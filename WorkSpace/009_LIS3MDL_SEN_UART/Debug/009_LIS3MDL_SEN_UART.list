
009_LIS3MDL_SEN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000643c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006668  08006668  000202dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006670  08006670  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08006678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  200002dc  08006954  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  08006954  00020b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a528  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b5  00000000  00000000  0003a834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  0003d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  0003f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b04  00000000  00000000  00040668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019aba  00000000  00000000  0006916c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5fb4  00000000  00000000  00082c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178bda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006580  00000000  00000000  00178c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002dc 	.word	0x200002dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065b4 	.word	0x080065b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	080065b4 	.word	0x080065b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f001 f9b7 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f891 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 fa59 	bl	8000a38 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000586:	f000 f8ef 	bl	8000768 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800058a:	f000 f925 	bl	80007d8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800058e:	f000 f961 	bl	8000854 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000592:	f000 f985 	bl	80008a0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000596:	f000 f9c1 	bl	800091c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800059a:	f000 f9ef 	bl	800097c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800059e:	f000 fa1d 	bl	80009dc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,train,sizeof(train),1000);
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80005aa:	4935      	ldr	r1, [pc, #212]	; (8000680 <main+0x10c>)
 80005ac:	4835      	ldr	r0, [pc, #212]	; (8000684 <main+0x110>)
 80005ae:	f004 fb9c 	bl	8004cea <HAL_UART_Transmit>
  HAL_Delay(100);
 80005b2:	2064      	movs	r0, #100	; 0x64
 80005b4:	f001 fa0e 	bl	80019d4 <HAL_Delay>
  HAL_UART_Transmit(&huart1,msg0,sizeof(msg0),1000);
 80005b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005bc:	2229      	movs	r2, #41	; 0x29
 80005be:	4932      	ldr	r1, [pc, #200]	; (8000688 <main+0x114>)
 80005c0:	4830      	ldr	r0, [pc, #192]	; (8000684 <main+0x110>)
 80005c2:	f004 fb92 	bl	8004cea <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	2231      	movs	r2, #49	; 0x31
 80005cc:	492f      	ldr	r1, [pc, #188]	; (800068c <main+0x118>)
 80005ce:	482d      	ldr	r0, [pc, #180]	; (8000684 <main+0x110>)
 80005d0:	f004 fb8b 	bl	8004cea <HAL_UART_Transmit>
  HAL_Delay(100);
 80005d4:	2064      	movs	r0, #100	; 0x64
 80005d6:	f001 f9fd 	bl	80019d4 <HAL_Delay>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	2229      	movs	r2, #41	; 0x29
 80005e0:	492b      	ldr	r1, [pc, #172]	; (8000690 <main+0x11c>)
 80005e2:	4828      	ldr	r0, [pc, #160]	; (8000684 <main+0x110>)
 80005e4:	f004 fb81 	bl	8004cea <HAL_UART_Transmit>
  MAGNETO_InitTypeDef LIS3MDL_InitStruct;
  int16_t magnetometerData[3];
  //Check page 20 of docs/sensor/lis3mdl.pdf
  // Control Register1 -> 0b01110000 -> 0x70
  // OM = 11 (ultra-high-performance mode for X and Y); DO = 100 (10 Hz ODR)
  LIS3MDL_InitStruct.Register1 = 0x70;
 80005e8:	2370      	movs	r3, #112	; 0x70
 80005ea:	723b      	strb	r3, [r7, #8]
  // Control Register2 -> 0b00000000 -> 0x00
  // FS = 00 (+/- 4 gauss full scale)
  LIS3MDL_InitStruct.Register2 = 0x0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	727b      	strb	r3, [r7, #9]
  // Control Register3 -> 0b00000000 -> 0x00
  // MD = 00 (continuous-conversion mode)
  LIS3MDL_InitStruct.Register3 = 0x0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	72bb      	strb	r3, [r7, #10]
  // Control Register4 -> 0b00001100 -> 0x0C
  // OMZ = 11 (ultra-high-performance mode for Z)
  LIS3MDL_InitStruct.Register4 = 0x0C;
 80005f4:	230c      	movs	r3, #12
 80005f6:	72fb      	strb	r3, [r7, #11]
  // Control Register5 -> 0b01000000 -> 0x40
  // BDU = 1 (block data update)
  LIS3MDL_InitStruct.Register5 = 0x40;
 80005f8:	2340      	movs	r3, #64	; 0x40
 80005fa:	733b      	strb	r3, [r7, #12]
  // Sensor Configuration
  //1. Initialize the sensor
  LIS3MDL_MagInit(LIS3MDL_InitStruct);
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000604:	f001 f8b8 	bl	8001778 <LIS3MDL_MagInit>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	2226      	movs	r2, #38	; 0x26
 800060e:	4921      	ldr	r1, [pc, #132]	; (8000694 <main+0x120>)
 8000610:	481c      	ldr	r0, [pc, #112]	; (8000684 <main+0x110>)
 8000612:	f004 fb6a 	bl	8004cea <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061a:	f001 f9db 	bl	80019d4 <HAL_Delay>
  uint8_t sensorID = LIS3MDL_MagReadID();
 800061e:	f001 f8d3 	bl	80017c8 <LIS3MDL_MagReadID>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
  snprintf(str_tmp,100,"ID = %x\n\r", sensorID);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <main+0x124>)
 800062a:	2164      	movs	r1, #100	; 0x64
 800062c:	481b      	ldr	r0, [pc, #108]	; (800069c <main+0x128>)
 800062e:	f005 fb3f 	bl	8005cb0 <sniprintf>
  HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	2264      	movs	r2, #100	; 0x64
 8000638:	4918      	ldr	r1, [pc, #96]	; (800069c <main+0x128>)
 800063a:	4812      	ldr	r0, [pc, #72]	; (8000684 <main+0x110>)
 800063c:	f004 fb55 	bl	8004cea <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LIS3MDL_MagReadXYZ(&magnetometerData[0]);
 8000640:	463b      	mov	r3, r7
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f8cc 	bl	80017e0 <LIS3MDL_MagReadXYZ>
	  snprintf(str_tmp,100,"X=%d Y=%d Z=%d\n\r", magnetometerData[0], magnetometerData[1], magnetometerData[2]);
 8000648:	f9b7 3000 	ldrsh.w	r3, [r7]
 800064c:	4619      	mov	r1, r3
 800064e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000652:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000656:	9201      	str	r2, [sp, #4]
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	460b      	mov	r3, r1
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <main+0x12c>)
 800065e:	2164      	movs	r1, #100	; 0x64
 8000660:	480e      	ldr	r0, [pc, #56]	; (800069c <main+0x128>)
 8000662:	f005 fb25 	bl	8005cb0 <sniprintf>
	  HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	2264      	movs	r2, #100	; 0x64
 800066c:	490b      	ldr	r1, [pc, #44]	; (800069c <main+0x128>)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <main+0x110>)
 8000670:	f004 fb3b 	bl	8004cea <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000678:	f001 f9ac 	bl	80019d4 <HAL_Delay>
	  LIS3MDL_MagReadXYZ(&magnetometerData[0]);
 800067c:	e7e0      	b.n	8000640 <main+0xcc>
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000
 8000684:	2000042c 	.word	0x2000042c
 8000688:	200001b8 	.word	0x200001b8
 800068c:	200001e4 	.word	0x200001e4
 8000690:	20000218 	.word	0x20000218
 8000694:	20000244 	.word	0x20000244
 8000698:	080065cc 	.word	0x080065cc
 800069c:	20000a40 	.word	0x20000a40
 80006a0:	080065d8 	.word	0x080065d8

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b096      	sub	sp, #88	; 0x58
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2244      	movs	r2, #68	; 0x44
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 faf4 	bl	8005ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ca:	f002 fe2f 	bl	800332c <HAL_PWREx_ControlVoltageScaling>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d4:	f000 fb62 	bl	8000d9c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d8:	f002 fe0a 	bl	80032f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <SystemClock_Config+0xc0>)
 80006de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <SystemClock_Config+0xc0>)
 80006e4:	f023 0318 	bic.w	r3, r3, #24
 80006e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006ec:	2314      	movs	r3, #20
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006fc:	2360      	movs	r3, #96	; 0x60
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000704:	2301      	movs	r3, #1
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800070c:	2328      	movs	r3, #40	; 0x28
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000710:	2307      	movs	r3, #7
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4618      	mov	r0, r3
 8000722:	f002 ff25 	bl	8003570 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800072c:	f000 fb36 	bl	8000d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2303      	movs	r3, #3
 8000736:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	2104      	movs	r1, #4
 8000748:	4618      	mov	r0, r3
 800074a:	f003 faed 	bl	8003d28 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000754:	f000 fb22 	bl	8000d9c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000758:	f003 fff4 	bl	8004744 <HAL_RCCEx_EnableMSIPLLMode>
}
 800075c:	bf00      	nop
 800075e:	3758      	adds	r7, #88	; 0x58
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000

08000768 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 800076e:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <MX_DFSDM1_Init+0x6c>)
 8000770:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 8000774:	2201      	movs	r2, #1
 8000776:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 8000780:	2202      	movs	r2, #2
 8000782:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 8000792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000796:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_DFSDM1_Init+0x68>)
 80007be:	f001 fa3f 	bl	8001c40 <HAL_DFSDM_ChannelInit>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80007c8:	f000 fae8 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200002f8 	.word	0x200002f8
 80007d4:	40016020 	.word	0x40016020

080007d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_I2C2_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_I2C2_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_I2C2_Init+0x74>)
 80007e4:	f640 6214 	movw	r2, #3604	; 0xe14
 80007e8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_I2C2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_I2C2_Init+0x74>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_I2C2_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_I2C2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2C2_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_I2C2_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2C2_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_I2C2_Init+0x74>)
 8000816:	f001 fdf8 	bl	800240a <HAL_I2C_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 fabc 	bl	8000d9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	4809      	ldr	r0, [pc, #36]	; (800084c <MX_I2C2_Init+0x74>)
 8000828:	f002 fb82 	bl	8002f30 <HAL_I2CEx_ConfigAnalogFilter>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000832:	f000 fab3 	bl	8000d9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_I2C2_Init+0x74>)
 800083a:	f002 fbc4 	bl	8002fc6 <HAL_I2CEx_ConfigDigitalFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000844:	f000 faaa 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000330 	.word	0x20000330
 8000850:	40005800 	.word	0x40005800

08000854 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_QUADSPI_Init+0x44>)
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <MX_QUADSPI_Init+0x48>)
 800085c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_QUADSPI_Init+0x44>)
 8000860:	2202      	movs	r2, #2
 8000862:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_QUADSPI_Init+0x44>)
 8000866:	2204      	movs	r2, #4
 8000868:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_QUADSPI_Init+0x44>)
 800086c:	2210      	movs	r2, #16
 800086e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_QUADSPI_Init+0x44>)
 8000872:	2217      	movs	r2, #23
 8000874:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_QUADSPI_Init+0x44>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_QUADSPI_Init+0x44>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_QUADSPI_Init+0x44>)
 8000884:	f002 fdb8 	bl	80033f8 <HAL_QSPI_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800088e:	f000 fa85 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000384 	.word	0x20000384
 800089c:	a0001000 	.word	0xa0001000

080008a0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_SPI3_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_SPI3_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_SPI3_Init+0x74>)
 80008ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_SPI3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_SPI3_Init+0x74>)
 80008ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008be:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_SPI3_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_SPI3_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_SPI3_Init+0x74>)
 80008ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_SPI3_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_SPI3_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_SPI3_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_SPI3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_SPI3_Init+0x74>)
 80008ee:	2207      	movs	r2, #7
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_SPI3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_SPI3_Init+0x74>)
 80008fa:	2208      	movs	r2, #8
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_SPI3_Init+0x74>)
 8000900:	f004 f902 	bl	8004b08 <HAL_SPI_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 fa47 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200003c8 	.word	0x200003c8
 8000918:	40003c00 	.word	0x40003c00

0800091c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART1_UART_Init+0x58>)
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <MX_USART1_UART_Init+0x5c>)
 8000924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART1_UART_Init+0x58>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART1_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_USART1_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART1_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART1_UART_Init+0x58>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART1_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART1_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART1_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART1_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART1_UART_Init+0x58>)
 8000960:	f004 f975 	bl	8004c4e <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800096a:	f000 fa17 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000042c 	.word	0x2000042c
 8000978:	40013800 	.word	0x40013800

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <MX_USART3_UART_Init+0x5c>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009c0:	f004 f945 	bl	8004c4e <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f9e7 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200004b0 	.word	0x200004b0
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2206      	movs	r2, #6
 80009ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a20:	f002 fb1d 	bl	800305e <HAL_PCD_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 f9b7 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000534 	.word	0x20000534

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4e:	4bbd      	ldr	r3, [pc, #756]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4abc      	ldr	r2, [pc, #752]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a54:	f043 0310 	orr.w	r3, r3, #16
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4bba      	ldr	r3, [pc, #744]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4bb7      	ldr	r3, [pc, #732]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4ab6      	ldr	r2, [pc, #728]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4bb4      	ldr	r3, [pc, #720]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4bb1      	ldr	r3, [pc, #708]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	4ab0      	ldr	r2, [pc, #704]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8a:	4bae      	ldr	r3, [pc, #696]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4bab      	ldr	r3, [pc, #684]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4aaa      	ldr	r2, [pc, #680]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4ba8      	ldr	r3, [pc, #672]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4ba5      	ldr	r3, [pc, #660]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4aa4      	ldr	r2, [pc, #656]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4ba2      	ldr	r3, [pc, #648]	; (8000d44 <MX_GPIO_Init+0x30c>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000acc:	489e      	ldr	r0, [pc, #632]	; (8000d48 <MX_GPIO_Init+0x310>)
 8000ace:	f001 fc61 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f248 1104 	movw	r1, #33028	; 0x8104
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f001 fc5a 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000ae6:	4899      	ldr	r0, [pc, #612]	; (8000d4c <MX_GPIO_Init+0x314>)
 8000ae8:	f001 fc54 	bl	8002394 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f241 0181 	movw	r1, #4225	; 0x1081
 8000af2:	4897      	ldr	r0, [pc, #604]	; (8000d50 <MX_GPIO_Init+0x318>)
 8000af4:	f001 fc4e 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afe:	4894      	ldr	r0, [pc, #592]	; (8000d50 <MX_GPIO_Init+0x318>)
 8000b00:	f001 fc48 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b0a:	4892      	ldr	r0, [pc, #584]	; (8000d54 <MX_GPIO_Init+0x31c>)
 8000b0c:	f001 fc42 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2120      	movs	r1, #32
 8000b14:	488d      	ldr	r0, [pc, #564]	; (8000d4c <MX_GPIO_Init+0x314>)
 8000b16:	f001 fc3d 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	488a      	ldr	r0, [pc, #552]	; (8000d48 <MX_GPIO_Init+0x310>)
 8000b20:	f001 fc38 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000b24:	f240 1315 	movw	r3, #277	; 0x115
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4882      	ldr	r0, [pc, #520]	; (8000d48 <MX_GPIO_Init+0x310>)
 8000b3e:	f001 f98b 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b42:	236a      	movs	r3, #106	; 0x6a
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	487c      	ldr	r0, [pc, #496]	; (8000d48 <MX_GPIO_Init+0x310>)
 8000b58:	f001 f97e 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4878      	ldr	r0, [pc, #480]	; (8000d54 <MX_GPIO_Init+0x31c>)
 8000b74:	f001 f970 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b78:	233f      	movs	r3, #63	; 0x3f
 8000b7a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4872      	ldr	r0, [pc, #456]	; (8000d54 <MX_GPIO_Init+0x31c>)
 8000b8c:	f001 f964 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b90:	2303      	movs	r3, #3
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f001 f953 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000bb2:	f248 1304 	movw	r3, #33028	; 0x8104
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f001 f943 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000be2:	2301      	movs	r3, #1
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 f932 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bf8:	230b      	movs	r3, #11
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f001 f925 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c0e:	23e0      	movs	r3, #224	; 0xe0
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f001 f914 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c30:	2301      	movs	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4841      	ldr	r0, [pc, #260]	; (8000d4c <MX_GPIO_Init+0x314>)
 8000c46:	f001 f907 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c4e:	230b      	movs	r3, #11
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	483b      	ldr	r0, [pc, #236]	; (8000d4c <MX_GPIO_Init+0x314>)
 8000c5e:	f001 f8fb 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c62:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c66:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4834      	ldr	r0, [pc, #208]	; (8000d4c <MX_GPIO_Init+0x314>)
 8000c7c:	f001 f8ec 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c80:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c84:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	482e      	ldr	r0, [pc, #184]	; (8000d50 <MX_GPIO_Init+0x318>)
 8000c98:	f001 f8de 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c9c:	f243 0381 	movw	r3, #12417	; 0x3081
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4826      	ldr	r0, [pc, #152]	; (8000d50 <MX_GPIO_Init+0x318>)
 8000cb6:	f001 f8cf 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000cba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4820      	ldr	r0, [pc, #128]	; (8000d54 <MX_GPIO_Init+0x31c>)
 8000cd4:	f001 f8c0 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000cd8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4819      	ldr	r0, [pc, #100]	; (8000d54 <MX_GPIO_Init+0x31c>)
 8000cf0:	f001 f8b2 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d04:	2305      	movs	r3, #5
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4810      	ldr	r0, [pc, #64]	; (8000d50 <MX_GPIO_Init+0x318>)
 8000d10:	f001 f8a2 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000d14:	2378      	movs	r3, #120	; 0x78
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d24:	2307      	movs	r3, #7
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <MX_GPIO_Init+0x318>)
 8000d30:	f001 f892 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e00a      	b.n	8000d58 <MX_GPIO_Init+0x320>
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000
 8000d48:	48001000 	.word	0x48001000
 8000d4c:	48000400 	.word	0x48000400
 8000d50:	48000c00 	.word	0x48000c00
 8000d54:	48000800 	.word	0x48000800
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <MX_GPIO_Init+0x360>)
 8000d6a:	f001 f875 	bl	8001e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2017      	movs	r0, #23
 8000d74:	f000 ff2d 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d78:	2017      	movs	r0, #23
 8000d7a:	f000 ff46 	bl	8001c0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	2028      	movs	r0, #40	; 0x28
 8000d84:	f000 ff25 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d88:	2028      	movs	r0, #40	; 0x28
 8000d8a:	f000 ff3e 	bl	8001c0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	48000400 	.word	0x48000400

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <Error_Handler+0x8>
	...

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_MspInit+0x44>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_MspInit+0x44>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_MspInit+0x44>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x44>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x44>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x44>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0ac      	sub	sp, #176	; 0xb0
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2288      	movs	r2, #136	; 0x88
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 ff45 	bl	8005ca0 <memset>
  if(DFSDM1_Init == 0)
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d142      	bne.n	8000ea4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 f99e 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000e3a:	f7ff ffaf 	bl	8000d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e48:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e6e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e88:	2306      	movs	r3, #6
 8000e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e92:	4619      	mov	r1, r3
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e96:	f000 ffdf 	bl	8001e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a02      	ldr	r2, [pc, #8]	; (8000eac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ea2:	6013      	str	r3, [r2, #0]
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	37b0      	adds	r7, #176	; 0xb0
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000aa4 	.word	0x20000aa4
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48001000 	.word	0x48001000

08000eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0ac      	sub	sp, #176	; 0xb0
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2288      	movs	r2, #136	; 0x88
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 fee1 	bl	8005ca0 <memset>
  if(hi2c->Instance==I2C2)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <HAL_I2C_MspInit+0xb0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d13b      	bne.n	8000f60 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 f93b 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f00:	f7ff ff4c 	bl	8000d9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_I2C_MspInit+0xb4>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_I2C_MspInit+0xb4>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_I2C_MspInit+0xb4>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f24:	2312      	movs	r3, #18
 8000f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f36:	2304      	movs	r3, #4
 8000f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f40:	4619      	mov	r1, r3
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <HAL_I2C_MspInit+0xb8>)
 8000f44:	f000 ff88 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_I2C_MspInit+0xb4>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_I2C_MspInit+0xb4>)
 8000f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f52:	6593      	str	r3, [r2, #88]	; 0x58
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_I2C_MspInit+0xb4>)
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	37b0      	adds	r7, #176	; 0xb0
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40005800 	.word	0x40005800
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48000400 	.word	0x48000400

08000f74 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_I2C_MspDeInit+0x3c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10f      	bne.n	8000fa6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_I2C_MspDeInit+0x40>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_I2C_MspDeInit+0x40>)
 8000f8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f90:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8000f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f96:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <HAL_I2C_MspDeInit+0x44>)
 8000f98:	f001 f908 	bl	80021ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8000f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_I2C_MspDeInit+0x44>)
 8000fa2:	f001 f903 	bl	80021ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40005800 	.word	0x40005800
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000400 	.word	0x48000400

08000fbc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_QSPI_MspInit+0x7c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d128      	bne.n	8001030 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_QSPI_MspInit+0x80>)
 8000fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fe2:	4a16      	ldr	r2, [pc, #88]	; (800103c <HAL_QSPI_MspInit+0x80>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	6513      	str	r3, [r2, #80]	; 0x50
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_QSPI_MspInit+0x80>)
 8000fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_QSPI_MspInit+0x80>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_QSPI_MspInit+0x80>)
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_QSPI_MspInit+0x80>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800100e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001012:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001020:	230a      	movs	r3, #10
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_QSPI_MspInit+0x84>)
 800102c:	f000 ff14 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	a0001000 	.word	0xa0001000
 800103c:	40021000 	.word	0x40021000
 8001040:	48001000 	.word	0x48001000

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_SPI_MspInit+0x7c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d128      	bne.n	80010b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 800106c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001070:	6593      	str	r3, [r2, #88]	; 0x58
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_SPI_MspInit+0x80>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001096:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010a8:	2306      	movs	r3, #6
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_SPI_MspInit+0x84>)
 80010b4:	f000 fed0 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40003c00 	.word	0x40003c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000800 	.word	0x48000800

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0ae      	sub	sp, #184	; 0xb8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	2288      	movs	r2, #136	; 0x88
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 fdd7 	bl	8005ca0 <memset>
  if(huart->Instance==USART1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <HAL_UART_MspInit+0x134>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d13b      	bne.n	8001174 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001100:	2300      	movs	r3, #0
 8001102:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4618      	mov	r0, r3
 800110a:	f003 f831 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001114:	f7ff fe42 	bl	8000d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001118:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <HAL_UART_MspInit+0x138>)
 800111a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111c:	4a39      	ldr	r2, [pc, #228]	; (8001204 <HAL_UART_MspInit+0x138>)
 800111e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001122:	6613      	str	r3, [r2, #96]	; 0x60
 8001124:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_UART_MspInit+0x138>)
 8001126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	4b34      	ldr	r3, [pc, #208]	; (8001204 <HAL_UART_MspInit+0x138>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a33      	ldr	r2, [pc, #204]	; (8001204 <HAL_UART_MspInit+0x138>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_UART_MspInit+0x138>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001148:	23c0      	movs	r3, #192	; 0xc0
 800114a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001160:	2307      	movs	r3, #7
 8001162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800116a:	4619      	mov	r1, r3
 800116c:	4826      	ldr	r0, [pc, #152]	; (8001208 <HAL_UART_MspInit+0x13c>)
 800116e:	f000 fe73 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001172:	e040      	b.n	80011f6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a24      	ldr	r2, [pc, #144]	; (800120c <HAL_UART_MspInit+0x140>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d13b      	bne.n	80011f6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800117e:	2304      	movs	r3, #4
 8001180:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001182:	2300      	movs	r3, #0
 8001184:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4618      	mov	r0, r3
 800118c:	f002 fff0 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001196:	f7ff fe01 	bl	8000d9c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_UART_MspInit+0x138>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	4a19      	ldr	r2, [pc, #100]	; (8001204 <HAL_UART_MspInit+0x138>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	6593      	str	r3, [r2, #88]	; 0x58
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_UART_MspInit+0x138>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_UART_MspInit+0x138>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <HAL_UART_MspInit+0x138>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_UART_MspInit+0x138>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80011ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e4:	2307      	movs	r3, #7
 80011e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <HAL_UART_MspInit+0x144>)
 80011f2:	f000 fe31 	bl	8001e58 <HAL_GPIO_Init>
}
 80011f6:	bf00      	nop
 80011f8:	37b8      	adds	r7, #184	; 0xb8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40013800 	.word	0x40013800
 8001204:	40021000 	.word	0x40021000
 8001208:	48000400 	.word	0x48000400
 800120c:	40004800 	.word	0x40004800
 8001210:	48000c00 	.word	0x48000c00

08001214 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0ac      	sub	sp, #176	; 0xb0
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2288      	movs	r2, #136	; 0x88
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f004 fd33 	bl	8005ca0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001242:	d17c      	bne.n	800133e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001248:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800124a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800124e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001256:	2301      	movs	r3, #1
 8001258:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800125a:	2318      	movs	r3, #24
 800125c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800125e:	2307      	movs	r3, #7
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001262:	2302      	movs	r3, #2
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001266:	2302      	movs	r3, #2
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800126a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4618      	mov	r0, r3
 8001276:	f002 ff7b 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001280:	f7ff fd8c 	bl	8000d9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_PCD_MspInit+0x134>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <HAL_PCD_MspInit+0x134>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_PCD_MspInit+0x134>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800129c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f000 fdcd 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80012be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012d8:	230a      	movs	r3, #10
 80012da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e8:	f000 fdb6 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_PCD_MspInit+0x134>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	4a15      	ldr	r2, [pc, #84]	; (8001348 <HAL_PCD_MspInit+0x134>)
 80012f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_PCD_MspInit+0x134>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_PCD_MspInit+0x134>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d114      	bne.n	800133a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_PCD_MspInit+0x134>)
 8001312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001314:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <HAL_PCD_MspInit+0x134>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6593      	str	r3, [r2, #88]	; 0x58
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_PCD_MspInit+0x134>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001328:	f002 f856 	bl	80033d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_PCD_MspInit+0x134>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_PCD_MspInit+0x134>)
 8001332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001336:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001338:	e001      	b.n	800133e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800133a:	f002 f84d 	bl	80033d8 <HAL_PWREx_EnableVddUSB>
}
 800133e:	bf00      	nop
 8001340:	37b0      	adds	r7, #176	; 0xb0
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 fafc 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80013a4:	2020      	movs	r0, #32
 80013a6:	f001 f80d 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80013aa:	2040      	movs	r0, #64	; 0x40
 80013ac:	f001 f80a 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80013b0:	2080      	movs	r0, #128	; 0x80
 80013b2:	f001 f807 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80013b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013ba:	f001 f803 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80013c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013ca:	f000 fffb 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80013ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013d2:	f000 fff7 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80013d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013da:	f000 fff3 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80013de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013e2:	f000 ffef 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80013e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013ea:	f000 ffeb 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <_sbrk+0x5c>)
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <_sbrk+0x60>)
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <_sbrk+0x64>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <_sbrk+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	429a      	cmp	r2, r3
 8001422:	d207      	bcs.n	8001434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001424:	f004 fc12 	bl	8005c4c <__errno>
 8001428:	4603      	mov	r3, r0
 800142a:	220c      	movs	r2, #12
 800142c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	e009      	b.n	8001448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <_sbrk+0x64>)
 8001444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20018000 	.word	0x20018000
 8001454:	00000400 	.word	0x00000400
 8001458:	20000aa8 	.word	0x20000aa8
 800145c:	20000b38 	.word	0x20000b38

08001460 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <SystemInit+0x20>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <SystemInit+0x20>)
 800146c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001488:	f7ff ffea 	bl	8001460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <LoopForever+0xe>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f004 fbd1 	bl	8005c58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b6:	f7ff f85d 	bl	8000574 <main>

080014ba <LoopForever>:

LoopForever:
    b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 80014c8:	08006678 	.word	0x08006678
  ldr r2, =_sbss
 80014cc:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 80014d0:	20000b38 	.word	0x20000b38

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>
	...

080014d8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <I2Cx_MspInit+0xa8>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	4a26      	ldr	r2, [pc, #152]	; (8001580 <I2Cx_MspInit+0xa8>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <I2Cx_MspInit+0xa8>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80014f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001502:	2301      	movs	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800150a:	2304      	movs	r3, #4
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	481b      	ldr	r0, [pc, #108]	; (8001584 <I2Cx_MspInit+0xac>)
 8001516:	f000 fc9f 	bl	8001e58 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4818      	ldr	r0, [pc, #96]	; (8001584 <I2Cx_MspInit+0xac>)
 8001522:	f000 fc99 	bl	8001e58 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <I2Cx_MspInit+0xa8>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	4a15      	ldr	r2, [pc, #84]	; (8001580 <I2Cx_MspInit+0xa8>)
 800152c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001530:	6593      	str	r3, [r2, #88]	; 0x58
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <I2Cx_MspInit+0xa8>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <I2Cx_MspInit+0xa8>)
 8001540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <I2Cx_MspInit+0xa8>)
 8001544:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001548:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <I2Cx_MspInit+0xa8>)
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <I2Cx_MspInit+0xa8>)
 8001550:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001554:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	210f      	movs	r1, #15
 800155a:	2021      	movs	r0, #33	; 0x21
 800155c:	f000 fb39 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001560:	2021      	movs	r0, #33	; 0x21
 8001562:	f000 fb52 	bl	8001c0a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	210f      	movs	r1, #15
 800156a:	2022      	movs	r0, #34	; 0x22
 800156c:	f000 fb31 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001570:	2022      	movs	r0, #34	; 0x22
 8001572:	f000 fb4a 	bl	8001c0a <HAL_NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	48000400 	.word	0x48000400

08001588 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <I2Cx_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <I2Cx_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff89 	bl	80014d8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 ff1f 	bl	800240a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80015cc:	2100      	movs	r1, #0
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f001 fcae 	bl	8002f30 <HAL_I2CEx_ConfigAnalogFilter>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40005800 	.word	0x40005800
 80015e0:	00702681 	.word	0x00702681

080015e4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	72fb      	strb	r3, [r7, #11]
 80015f6:	460b      	mov	r3, r1
 80015f8:	813b      	strh	r3, [r7, #8]
 80015fa:	4613      	mov	r3, r2
 80015fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	b299      	uxth	r1, r3
 8001606:	88f8      	ldrh	r0, [r7, #6]
 8001608:	893a      	ldrh	r2, [r7, #8]
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	4603      	mov	r3, r0
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f001 f8c8 	bl	80027b0 <HAL_I2C_Mem_Read>
 8001620:	4603      	mov	r3, r0
 8001622:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800162a:	7afb      	ldrb	r3, [r7, #11]
 800162c:	4619      	mov	r1, r3
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f832 	bl	8001698 <I2Cx_Error>
  }
  return status;
 8001634:	7dfb      	ldrb	r3, [r7, #23]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b08a      	sub	sp, #40	; 0x28
 8001642:	af04      	add	r7, sp, #16
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	4608      	mov	r0, r1
 8001648:	4611      	mov	r1, r2
 800164a:	461a      	mov	r2, r3
 800164c:	4603      	mov	r3, r0
 800164e:	72fb      	strb	r3, [r7, #11]
 8001650:	460b      	mov	r3, r1
 8001652:	813b      	strh	r3, [r7, #8]
 8001654:	4613      	mov	r3, r2
 8001656:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800165c:	7afb      	ldrb	r3, [r7, #11]
 800165e:	b299      	uxth	r1, r3
 8001660:	88f8      	ldrh	r0, [r7, #6]
 8001662:	893a      	ldrh	r2, [r7, #8]
 8001664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4603      	mov	r3, r0
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 ff87 	bl	8002588 <HAL_I2C_Mem_Write>
 800167a:	4603      	mov	r3, r0
 800167c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001684:	7afb      	ldrb	r3, [r7, #11]
 8001686:	4619      	mov	r1, r3
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f805 	bl	8001698 <I2Cx_Error>
  }
  return status;
 800168e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 ff3f 	bl	8002528 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff6c 	bl	8001588 <I2Cx_Init>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <SENSOR_IO_Init+0x10>)
 80016be:	f7ff ff63 	bl	8001588 <I2Cx_Init>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000aac 	.word	0x20000aac

080016cc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	460b      	mov	r3, r1
 80016d8:	71bb      	strb	r3, [r7, #6]
 80016da:	4613      	mov	r3, r2
 80016dc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	79f9      	ldrb	r1, [r7, #7]
 80016e4:	2301      	movs	r3, #1
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	1d7b      	adds	r3, r7, #5
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <SENSOR_IO_Write+0x30>)
 80016f0:	f7ff ffa5 	bl	800163e <I2Cx_WriteMultiple>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000aac 	.word	0x20000aac

08001700 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af02      	add	r7, sp, #8
 8001706:	4603      	mov	r3, r0
 8001708:	460a      	mov	r2, r1
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	4613      	mov	r3, r2
 800170e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	b29a      	uxth	r2, r3
 8001718:	79f9      	ldrb	r1, [r7, #7]
 800171a:	2301      	movs	r3, #1
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	f107 030f 	add.w	r3, r7, #15
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2301      	movs	r3, #1
 8001726:	4804      	ldr	r0, [pc, #16]	; (8001738 <SENSOR_IO_Read+0x38>)
 8001728:	f7ff ff5c 	bl	80015e4 <I2Cx_ReadMultiple>

  return read_value;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000aac 	.word	0x20000aac

0800173c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af02      	add	r7, sp, #8
 8001742:	603a      	str	r2, [r7, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	460b      	mov	r3, r1
 800174c:	71bb      	strb	r3, [r7, #6]
 800174e:	4613      	mov	r3, r2
 8001750:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001752:	79bb      	ldrb	r3, [r7, #6]
 8001754:	b29a      	uxth	r2, r3
 8001756:	79f9      	ldrb	r1, [r7, #7]
 8001758:	88bb      	ldrh	r3, [r7, #4]
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <SENSOR_IO_ReadMultiple+0x38>)
 8001764:	f7ff ff3e 	bl	80015e4 <I2Cx_ReadMultiple>
 8001768:	4603      	mov	r3, r0
 800176a:	b29b      	uxth	r3, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000aac 	.word	0x20000aac

08001778 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	463b      	mov	r3, r7
 8001780:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001784:	783b      	ldrb	r3, [r7, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	2120      	movs	r1, #32
 800178a:	203c      	movs	r0, #60	; 0x3c
 800178c:	f7ff ff9e 	bl	80016cc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001790:	787b      	ldrb	r3, [r7, #1]
 8001792:	461a      	mov	r2, r3
 8001794:	2121      	movs	r1, #33	; 0x21
 8001796:	203c      	movs	r0, #60	; 0x3c
 8001798:	f7ff ff98 	bl	80016cc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800179c:	78bb      	ldrb	r3, [r7, #2]
 800179e:	461a      	mov	r2, r3
 80017a0:	2122      	movs	r1, #34	; 0x22
 80017a2:	203c      	movs	r0, #60	; 0x3c
 80017a4:	f7ff ff92 	bl	80016cc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	461a      	mov	r2, r3
 80017ac:	2123      	movs	r1, #35	; 0x23
 80017ae:	203c      	movs	r0, #60	; 0x3c
 80017b0:	f7ff ff8c 	bl	80016cc <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80017b4:	793b      	ldrb	r3, [r7, #4]
 80017b6:	461a      	mov	r2, r3
 80017b8:	2124      	movs	r1, #36	; 0x24
 80017ba:	203c      	movs	r0, #60	; 0x3c
 80017bc:	f7ff ff86 	bl	80016cc <SENSOR_IO_Write>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80017cc:	f7ff ff74 	bl	80016b8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80017d0:	210f      	movs	r1, #15
 80017d2:	203c      	movs	r0, #60	; 0x3c
 80017d4:	f7ff ff94 	bl	8001700 <SENSOR_IO_Read>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80017f6:	2121      	movs	r1, #33	; 0x21
 80017f8:	203c      	movs	r0, #60	; 0x3c
 80017fa:	f7ff ff81 	bl	8001700 <SENSOR_IO_Read>
 80017fe:	4603      	mov	r3, r0
 8001800:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001802:	f107 0208 	add.w	r2, r7, #8
 8001806:	2306      	movs	r3, #6
 8001808:	21a8      	movs	r1, #168	; 0xa8
 800180a:	203c      	movs	r0, #60	; 0x3c
 800180c:	f7ff ff96 	bl	800173c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	77fb      	strb	r3, [r7, #31]
 8001814:	e01c      	b.n	8001850 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	3301      	adds	r3, #1
 800181c:	3320      	adds	r3, #32
 800181e:	443b      	add	r3, r7
 8001820:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001824:	b29b      	uxth	r3, r3
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	b29a      	uxth	r2, r3
 800182a:	7ffb      	ldrb	r3, [r7, #31]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	3320      	adds	r3, #32
 8001830:	443b      	add	r3, r7
 8001832:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001836:	b29b      	uxth	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	b29a      	uxth	r2, r3
 800183c:	7ffb      	ldrb	r3, [r7, #31]
 800183e:	b212      	sxth	r2, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	3320      	adds	r3, #32
 8001844:	443b      	add	r3, r7
 8001846:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800184a:	7ffb      	ldrb	r3, [r7, #31]
 800184c:	3301      	adds	r3, #1
 800184e:	77fb      	strb	r3, [r7, #31]
 8001850:	7ffb      	ldrb	r3, [r7, #31]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d9df      	bls.n	8001816 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800185c:	2b60      	cmp	r3, #96	; 0x60
 800185e:	d013      	beq.n	8001888 <LIS3MDL_MagReadXYZ+0xa8>
 8001860:	2b60      	cmp	r3, #96	; 0x60
 8001862:	dc14      	bgt.n	800188e <LIS3MDL_MagReadXYZ+0xae>
 8001864:	2b40      	cmp	r3, #64	; 0x40
 8001866:	d00c      	beq.n	8001882 <LIS3MDL_MagReadXYZ+0xa2>
 8001868:	2b40      	cmp	r3, #64	; 0x40
 800186a:	dc10      	bgt.n	800188e <LIS3MDL_MagReadXYZ+0xae>
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <LIS3MDL_MagReadXYZ+0x96>
 8001870:	2b20      	cmp	r3, #32
 8001872:	d003      	beq.n	800187c <LIS3MDL_MagReadXYZ+0x9c>
 8001874:	e00b      	b.n	800188e <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <LIS3MDL_MagReadXYZ+0xfc>)
 8001878:	61bb      	str	r3, [r7, #24]
    break;
 800187a:	e008      	b.n	800188e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <LIS3MDL_MagReadXYZ+0x100>)
 800187e:	61bb      	str	r3, [r7, #24]
    break;
 8001880:	e005      	b.n	800188e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <LIS3MDL_MagReadXYZ+0x104>)
 8001884:	61bb      	str	r3, [r7, #24]
    break;
 8001886:	e002      	b.n	800188e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <LIS3MDL_MagReadXYZ+0x108>)
 800188a:	61bb      	str	r3, [r7, #24]
    break;    
 800188c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	77fb      	strb	r3, [r7, #31]
 8001892:	e01a      	b.n	80018ca <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001894:	7ffb      	ldrb	r3, [r7, #31]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	3320      	adds	r3, #32
 800189a:	443b      	add	r3, r7
 800189c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80018ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b0:	7ffb      	ldrb	r3, [r7, #31]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018bc:	ee17 2a90 	vmov	r2, s15
 80018c0:	b212      	sxth	r2, r2
 80018c2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80018c4:	7ffb      	ldrb	r3, [r7, #31]
 80018c6:	3301      	adds	r3, #1
 80018c8:	77fb      	strb	r3, [r7, #31]
 80018ca:	7ffb      	ldrb	r3, [r7, #31]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d9e1      	bls.n	8001894 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	3e0f5c29 	.word	0x3e0f5c29
 80018e0:	3e947ae1 	.word	0x3e947ae1
 80018e4:	3edc28f6 	.word	0x3edc28f6
 80018e8:	3f147ae1 	.word	0x3f147ae1

080018ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f6:	2003      	movs	r0, #3
 80018f8:	f000 f960 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018fc:	2000      	movs	r0, #0
 80018fe:	f000 f80d 	bl	800191c <HAL_InitTick>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	71fb      	strb	r3, [r7, #7]
 800190c:	e001      	b.n	8001912 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800190e:	f7ff fa4b 	bl	8000da8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001912:	79fb      	ldrb	r3, [r7, #7]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_InitTick+0x6c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d023      	beq.n	8001978 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_InitTick+0x70>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_InitTick+0x6c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f96d 	bl	8001c26 <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10f      	bne.n	8001972 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d809      	bhi.n	800196c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f000 f937 	bl	8001bd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_InitTick+0x74>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e007      	b.n	800197c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e004      	b.n	800197c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
 8001976:	e001      	b.n	800197c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000274 	.word	0x20000274
 800198c:	2000026c 	.word	0x2000026c
 8001990:	20000270 	.word	0x20000270

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000274 	.word	0x20000274
 80019b8:	20000b00 	.word	0x20000b00

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000b00 	.word	0x20000b00

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000274 	.word	0x20000274

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	; (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff8e 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff29 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff3e 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff8e 	bl	8001b10 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5d 	bl	8001abc <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff31 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0ac      	b.n	8001dac <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f8b2 	bl	8001dc0 <DFSDM_GetChannelFromInstance>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a55      	ldr	r2, [pc, #340]	; (8001db4 <HAL_DFSDM_ChannelInit+0x174>)
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e09f      	b.n	8001dac <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff f8bf 	bl	8000df0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001c72:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <HAL_DFSDM_ChannelInit+0x178>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	4a4f      	ldr	r2, [pc, #316]	; (8001db8 <HAL_DFSDM_ChannelInit+0x178>)
 8001c7a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001c7c:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <HAL_DFSDM_ChannelInit+0x178>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d125      	bne.n	8001cd0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_DFSDM_ChannelInit+0x17c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <HAL_DFSDM_ChannelInit+0x17c>)
 8001c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c8e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001c90:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_DFSDM_ChannelInit+0x17c>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4948      	ldr	r1, [pc, #288]	; (8001dbc <HAL_DFSDM_ChannelInit+0x17c>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001c9e:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a46      	ldr	r2, [pc, #280]	; (8001dbc <HAL_DFSDM_ChannelInit+0x17c>)
 8001ca4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001ca8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	791b      	ldrb	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001cb2:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <HAL_DFSDM_ChannelInit+0x17c>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	493f      	ldr	r1, [pc, #252]	; (8001dbc <HAL_DFSDM_ChannelInit+0x17c>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <HAL_DFSDM_ChannelInit+0x17c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3c      	ldr	r2, [pc, #240]	; (8001dbc <HAL_DFSDM_ChannelInit+0x17c>)
 8001cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cce:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001cde:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001cee:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001cf4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 020f 	bic.w	r2, r2, #15
 8001d0c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001d34:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6899      	ldr	r1, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f002 0207 	and.w	r2, r2, #7
 8001d60:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d8c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f810 	bl	8001dc0 <DFSDM_GetChannelFromInstance>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4904      	ldr	r1, [pc, #16]	; (8001db4 <HAL_DFSDM_ChannelInit+0x174>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000b08 	.word	0x20000b08
 8001db8:	20000b04 	.word	0x20000b04
 8001dbc:	40016000 	.word	0x40016000

08001dc0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <DFSDM_GetChannelFromInstance+0x7c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d102      	bne.n	8001dd6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e02b      	b.n	8001e2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <DFSDM_GetChannelFromInstance+0x80>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d102      	bne.n	8001de4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e024      	b.n	8001e2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <DFSDM_GetChannelFromInstance+0x84>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d102      	bne.n	8001df2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001dec:	2302      	movs	r3, #2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e01d      	b.n	8001e2e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <DFSDM_GetChannelFromInstance+0x88>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d102      	bne.n	8001e00 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e016      	b.n	8001e2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <DFSDM_GetChannelFromInstance+0x8c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d102      	bne.n	8001e0e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001e08:	2305      	movs	r3, #5
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	e00f      	b.n	8001e2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <DFSDM_GetChannelFromInstance+0x90>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d102      	bne.n	8001e1c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001e16:	2306      	movs	r3, #6
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	e008      	b.n	8001e2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <DFSDM_GetChannelFromInstance+0x94>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d102      	bne.n	8001e2a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001e24:	2307      	movs	r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	e001      	b.n	8001e2e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40016000 	.word	0x40016000
 8001e40:	40016020 	.word	0x40016020
 8001e44:	40016040 	.word	0x40016040
 8001e48:	40016080 	.word	0x40016080
 8001e4c:	400160a0 	.word	0x400160a0
 8001e50:	400160c0 	.word	0x400160c0
 8001e54:	400160e0 	.word	0x400160e0

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e66:	e17f      	b.n	8002168 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8171 	beq.w	8002162 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d005      	beq.n	8001e98 <HAL_GPIO_Init+0x40>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d130      	bne.n	8001efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ece:	2201      	movs	r2, #1
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	f003 0201 	and.w	r2, r3, #1
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d118      	bne.n	8001f38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	6939      	ldr	r1, [r7, #16]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80ac 	beq.w	8002162 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	4b5f      	ldr	r3, [pc, #380]	; (8002188 <HAL_GPIO_Init+0x330>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	4a5e      	ldr	r2, [pc, #376]	; (8002188 <HAL_GPIO_Init+0x330>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6613      	str	r3, [r2, #96]	; 0x60
 8002016:	4b5c      	ldr	r3, [pc, #368]	; (8002188 <HAL_GPIO_Init+0x330>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002022:	4a5a      	ldr	r2, [pc, #360]	; (800218c <HAL_GPIO_Init+0x334>)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800204c:	d025      	beq.n	800209a <HAL_GPIO_Init+0x242>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4f      	ldr	r2, [pc, #316]	; (8002190 <HAL_GPIO_Init+0x338>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <HAL_GPIO_Init+0x23e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4e      	ldr	r2, [pc, #312]	; (8002194 <HAL_GPIO_Init+0x33c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x23a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4d      	ldr	r2, [pc, #308]	; (8002198 <HAL_GPIO_Init+0x340>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x236>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4c      	ldr	r2, [pc, #304]	; (800219c <HAL_GPIO_Init+0x344>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x232>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <HAL_GPIO_Init+0x348>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x22e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4a      	ldr	r2, [pc, #296]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x22a>
 800207e:	2306      	movs	r3, #6
 8002080:	e00c      	b.n	800209c <HAL_GPIO_Init+0x244>
 8002082:	2307      	movs	r3, #7
 8002084:	e00a      	b.n	800209c <HAL_GPIO_Init+0x244>
 8002086:	2305      	movs	r3, #5
 8002088:	e008      	b.n	800209c <HAL_GPIO_Init+0x244>
 800208a:	2304      	movs	r3, #4
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x244>
 800208e:	2303      	movs	r3, #3
 8002090:	e004      	b.n	800209c <HAL_GPIO_Init+0x244>
 8002092:	2302      	movs	r3, #2
 8002094:	e002      	b.n	800209c <HAL_GPIO_Init+0x244>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x244>
 800209a:	2300      	movs	r3, #0
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	f002 0203 	and.w	r2, r2, #3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ac:	4937      	ldr	r1, [pc, #220]	; (800218c <HAL_GPIO_Init+0x334>)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ba:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_GPIO_Init+0x350>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020de:	4a32      	ldr	r2, [pc, #200]	; (80021a8 <HAL_GPIO_Init+0x350>)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020e4:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <HAL_GPIO_Init+0x350>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002108:	4a27      	ldr	r2, [pc, #156]	; (80021a8 <HAL_GPIO_Init+0x350>)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_GPIO_Init+0x350>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002132:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_GPIO_Init+0x350>)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_GPIO_Init+0x350>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800215c:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <HAL_GPIO_Init+0x350>)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	f47f ae78 	bne.w	8001e68 <HAL_GPIO_Init+0x10>
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	40010000 	.word	0x40010000
 8002190:	48000400 	.word	0x48000400
 8002194:	48000800 	.word	0x48000800
 8002198:	48000c00 	.word	0x48000c00
 800219c:	48001000 	.word	0x48001000
 80021a0:	48001400 	.word	0x48001400
 80021a4:	48001800 	.word	0x48001800
 80021a8:	40010400 	.word	0x40010400

080021ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80021ba:	e0cd      	b.n	8002358 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80021bc:	2201      	movs	r2, #1
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80c0 	beq.w	8002352 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80021d2:	4a68      	ldr	r2, [pc, #416]	; (8002374 <HAL_GPIO_DeInit+0x1c8>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021fa:	d025      	beq.n	8002248 <HAL_GPIO_DeInit+0x9c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a5e      	ldr	r2, [pc, #376]	; (8002378 <HAL_GPIO_DeInit+0x1cc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d01f      	beq.n	8002244 <HAL_GPIO_DeInit+0x98>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a5d      	ldr	r2, [pc, #372]	; (800237c <HAL_GPIO_DeInit+0x1d0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d019      	beq.n	8002240 <HAL_GPIO_DeInit+0x94>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a5c      	ldr	r2, [pc, #368]	; (8002380 <HAL_GPIO_DeInit+0x1d4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <HAL_GPIO_DeInit+0x90>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <HAL_GPIO_DeInit+0x1d8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00d      	beq.n	8002238 <HAL_GPIO_DeInit+0x8c>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a5a      	ldr	r2, [pc, #360]	; (8002388 <HAL_GPIO_DeInit+0x1dc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d007      	beq.n	8002234 <HAL_GPIO_DeInit+0x88>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a59      	ldr	r2, [pc, #356]	; (800238c <HAL_GPIO_DeInit+0x1e0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_GPIO_DeInit+0x84>
 800222c:	2306      	movs	r3, #6
 800222e:	e00c      	b.n	800224a <HAL_GPIO_DeInit+0x9e>
 8002230:	2307      	movs	r3, #7
 8002232:	e00a      	b.n	800224a <HAL_GPIO_DeInit+0x9e>
 8002234:	2305      	movs	r3, #5
 8002236:	e008      	b.n	800224a <HAL_GPIO_DeInit+0x9e>
 8002238:	2304      	movs	r3, #4
 800223a:	e006      	b.n	800224a <HAL_GPIO_DeInit+0x9e>
 800223c:	2303      	movs	r3, #3
 800223e:	e004      	b.n	800224a <HAL_GPIO_DeInit+0x9e>
 8002240:	2302      	movs	r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_DeInit+0x9e>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_GPIO_DeInit+0x9e>
 8002248:	2300      	movs	r3, #0
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	f002 0203 	and.w	r2, r2, #3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4093      	lsls	r3, r2
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	429a      	cmp	r2, r3
 8002258:	d132      	bne.n	80022c0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800225a:	4b4d      	ldr	r3, [pc, #308]	; (8002390 <HAL_GPIO_DeInit+0x1e4>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	494b      	ldr	r1, [pc, #300]	; (8002390 <HAL_GPIO_DeInit+0x1e4>)
 8002264:	4013      	ands	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002268:	4b49      	ldr	r3, [pc, #292]	; (8002390 <HAL_GPIO_DeInit+0x1e4>)
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	4947      	ldr	r1, [pc, #284]	; (8002390 <HAL_GPIO_DeInit+0x1e4>)
 8002272:	4013      	ands	r3, r2
 8002274:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002276:	4b46      	ldr	r3, [pc, #280]	; (8002390 <HAL_GPIO_DeInit+0x1e4>)
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	4944      	ldr	r1, [pc, #272]	; (8002390 <HAL_GPIO_DeInit+0x1e4>)
 8002280:	4013      	ands	r3, r2
 8002282:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002284:	4b42      	ldr	r3, [pc, #264]	; (8002390 <HAL_GPIO_DeInit+0x1e4>)
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	4940      	ldr	r1, [pc, #256]	; (8002390 <HAL_GPIO_DeInit+0x1e4>)
 800228e:	4013      	ands	r3, r2
 8002290:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80022a2:	4a34      	ldr	r2, [pc, #208]	; (8002374 <HAL_GPIO_DeInit+0x1c8>)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43da      	mvns	r2, r3
 80022b2:	4830      	ldr	r0, [pc, #192]	; (8002374 <HAL_GPIO_DeInit+0x1c8>)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	400a      	ands	r2, r1
 80022ba:	3302      	adds	r3, #2
 80022bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2103      	movs	r1, #3
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	220f      	movs	r2, #15
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	08d2      	lsrs	r2, r2, #3
 80022f4:	4019      	ands	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2103      	movs	r1, #3
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	2101      	movs	r1, #1
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	401a      	ands	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2103      	movs	r1, #3
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	401a      	ands	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002342:	2101      	movs	r1, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	401a      	ands	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	f47f af2b 	bne.w	80021bc <HAL_GPIO_DeInit+0x10>
  }
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40010000 	.word	0x40010000
 8002378:	48000400 	.word	0x48000400
 800237c:	48000800 	.word	0x48000800
 8002380:	48000c00 	.word	0x48000c00
 8002384:	48001000 	.word	0x48001000
 8002388:	48001400 	.word	0x48001400
 800238c:	48001800 	.word	0x48001800
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f806 	bl	80023f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e081      	b.n	8002520 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7fe fd41 	bl	8000eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2224      	movs	r2, #36	; 0x24
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800245a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800246a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	e006      	b.n	8002492 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002490:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d104      	bne.n	80024a4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69d9      	ldr	r1, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1a      	ldr	r2, [r3, #32]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e021      	b.n	800257e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2224      	movs	r2, #36	; 0x24
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0201 	bic.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fd0e 	bl	8000f74 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4603      	mov	r3, r0
 8002598:	817b      	strh	r3, [r7, #10]
 800259a:	460b      	mov	r3, r1
 800259c:	813b      	strh	r3, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	f040 80f9 	bne.w	80027a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_I2C_Mem_Write+0x34>
 80025b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0ed      	b.n	80027a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_I2C_Mem_Write+0x4e>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0e6      	b.n	80027a4 <HAL_I2C_Mem_Write+0x21c>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025de:	f7ff f9ed 	bl	80019bc <HAL_GetTick>
 80025e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2319      	movs	r3, #25
 80025ea:	2201      	movs	r2, #1
 80025ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fac3 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0d1      	b.n	80027a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2221      	movs	r2, #33	; 0x21
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2240      	movs	r2, #64	; 0x40
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002628:	88f8      	ldrh	r0, [r7, #6]
 800262a:	893a      	ldrh	r2, [r7, #8]
 800262c:	8979      	ldrh	r1, [r7, #10]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4603      	mov	r3, r0
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f9d3 	bl	80029e4 <I2C_RequestMemoryWrite>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0a9      	b.n	80027a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	2bff      	cmp	r3, #255	; 0xff
 8002658:	d90e      	bls.n	8002678 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	22ff      	movs	r2, #255	; 0xff
 800265e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	b2da      	uxtb	r2, r3
 8002666:	8979      	ldrh	r1, [r7, #10]
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fc2b 	bl	8002ecc <I2C_TransferConfig>
 8002676:	e00f      	b.n	8002698 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	b2da      	uxtb	r2, r3
 8002688:	8979      	ldrh	r1, [r7, #10]
 800268a:	2300      	movs	r3, #0
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fc1a 	bl	8002ecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 faad 	bl	8002bfc <I2C_WaitOnTXISFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e07b      	b.n	80027a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d034      	beq.n	8002750 <HAL_I2C_Mem_Write+0x1c8>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d130      	bne.n	8002750 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fa3f 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e04d      	b.n	80027a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	d90e      	bls.n	8002730 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	b2da      	uxtb	r2, r3
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	2300      	movs	r3, #0
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fbcf 	bl	8002ecc <I2C_TransferConfig>
 800272e:	e00f      	b.n	8002750 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	b2da      	uxtb	r2, r3
 8002740:	8979      	ldrh	r1, [r7, #10]
 8002742:	2300      	movs	r3, #0
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fbbe 	bl	8002ecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d19e      	bne.n	8002698 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fa8c 	bl	8002c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e01a      	b.n	80027a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2220      	movs	r2, #32
 8002774:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_I2C_Mem_Write+0x224>)
 8002782:	400b      	ands	r3, r1
 8002784:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	fe00e800 	.word	0xfe00e800

080027b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	817b      	strh	r3, [r7, #10]
 80027c2:	460b      	mov	r3, r1
 80027c4:	813b      	strh	r3, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	f040 80fd 	bne.w	80029d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_I2C_Mem_Read+0x34>
 80027de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0f1      	b.n	80029d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_I2C_Mem_Read+0x4e>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e0ea      	b.n	80029d4 <HAL_I2C_Mem_Read+0x224>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002806:	f7ff f8d9 	bl	80019bc <HAL_GetTick>
 800280a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2319      	movs	r3, #25
 8002812:	2201      	movs	r2, #1
 8002814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f9af 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0d5      	b.n	80029d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2222      	movs	r2, #34	; 0x22
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002850:	88f8      	ldrh	r0, [r7, #6]
 8002852:	893a      	ldrh	r2, [r7, #8]
 8002854:	8979      	ldrh	r1, [r7, #10]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	4603      	mov	r3, r0
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f913 	bl	8002a8c <I2C_RequestMemoryRead>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0ad      	b.n	80029d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2bff      	cmp	r3, #255	; 0xff
 8002880:	d90e      	bls.n	80028a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	22ff      	movs	r2, #255	; 0xff
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	b2da      	uxtb	r2, r3
 800288e:	8979      	ldrh	r1, [r7, #10]
 8002890:	4b52      	ldr	r3, [pc, #328]	; (80029dc <HAL_I2C_Mem_Read+0x22c>)
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fb17 	bl	8002ecc <I2C_TransferConfig>
 800289e:	e00f      	b.n	80028c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	8979      	ldrh	r1, [r7, #10]
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_I2C_Mem_Read+0x22c>)
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fb06 	bl	8002ecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	2200      	movs	r2, #0
 80028c8:	2104      	movs	r1, #4
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f956 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e07c      	b.n	80029d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d034      	beq.n	8002980 <HAL_I2C_Mem_Read+0x1d0>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d130      	bne.n	8002980 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	2200      	movs	r2, #0
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f927 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e04d      	b.n	80029d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2bff      	cmp	r3, #255	; 0xff
 8002940:	d90e      	bls.n	8002960 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	22ff      	movs	r2, #255	; 0xff
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	b2da      	uxtb	r2, r3
 800294e:	8979      	ldrh	r1, [r7, #10]
 8002950:	2300      	movs	r3, #0
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fab7 	bl	8002ecc <I2C_TransferConfig>
 800295e:	e00f      	b.n	8002980 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	b2da      	uxtb	r2, r3
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	2300      	movs	r3, #0
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 faa6 	bl	8002ecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d19a      	bne.n	80028c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f974 	bl	8002c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e01a      	b.n	80029d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2220      	movs	r2, #32
 80029a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_I2C_Mem_Read+0x230>)
 80029b2:	400b      	ands	r3, r1
 80029b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e000      	b.n	80029d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
  }
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	80002400 	.word	0x80002400
 80029e0:	fe00e800 	.word	0xfe00e800

080029e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	460b      	mov	r3, r1
 80029f8:	813b      	strh	r3, [r7, #8]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	8979      	ldrh	r1, [r7, #10]
 8002a04:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <I2C_RequestMemoryWrite+0xa4>)
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fa5d 	bl	8002ecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	69b9      	ldr	r1, [r7, #24]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f8f0 	bl	8002bfc <I2C_WaitOnTXISFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e02c      	b.n	8002a80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	629a      	str	r2, [r3, #40]	; 0x28
 8002a36:	e015      	b.n	8002a64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	69b9      	ldr	r1, [r7, #24]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f8d6 	bl	8002bfc <I2C_WaitOnTXISFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e012      	b.n	8002a80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a5a:	893b      	ldrh	r3, [r7, #8]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f884 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	80002000 	.word	0x80002000

08002a8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	4608      	mov	r0, r1
 8002a96:	4611      	mov	r1, r2
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	817b      	strh	r3, [r7, #10]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	813b      	strh	r3, [r7, #8]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	8979      	ldrh	r1, [r7, #10]
 8002aac:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <I2C_RequestMemoryRead+0xa4>)
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa0a 	bl	8002ecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f89d 	bl	8002bfc <I2C_WaitOnTXISFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e02c      	b.n	8002b26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad2:	893b      	ldrh	r3, [r7, #8]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
 8002adc:	e015      	b.n	8002b0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ade:	893b      	ldrh	r3, [r7, #8]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f883 	bl	8002bfc <I2C_WaitOnTXISFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e012      	b.n	8002b26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b00:	893b      	ldrh	r3, [r7, #8]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2140      	movs	r1, #64	; 0x40
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f831 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	80002000 	.word	0x80002000

08002b34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d103      	bne.n	8002b52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d007      	beq.n	8002b70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	619a      	str	r2, [r3, #24]
  }
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8c:	e022      	b.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d01e      	beq.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b96:	f7fe ff11 	bl	80019bc <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d113      	bne.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e00f      	b.n	8002bf4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d0cd      	beq.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c08:	e02c      	b.n	8002c64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f870 	bl	8002cf4 <I2C_IsErrorOccurred>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e02a      	b.n	8002c74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d01e      	beq.n	8002c64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7fe fec9 	bl	80019bc <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d113      	bne.n	8002c64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e007      	b.n	8002c74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d1cb      	bne.n	8002c0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c88:	e028      	b.n	8002cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f830 	bl	8002cf4 <I2C_IsErrorOccurred>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e026      	b.n	8002cec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9e:	f7fe fe8d 	bl	80019bc <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d113      	bne.n	8002cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e007      	b.n	8002cec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d1cf      	bne.n	8002c8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d075      	beq.n	8002e0c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2210      	movs	r2, #16
 8002d26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d28:	e056      	b.n	8002dd8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d052      	beq.n	8002dd8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7fe fe43 	bl	80019bc <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <I2C_IsErrorOccurred+0x54>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d147      	bne.n	8002dd8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d6a:	d12e      	bne.n	8002dca <I2C_IsErrorOccurred+0xd6>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d72:	d02a      	beq.n	8002dca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d027      	beq.n	8002dca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d8a:	f7fe fe17 	bl	80019bc <HAL_GetTick>
 8002d8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d90:	e01b      	b.n	8002dca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d92:	f7fe fe13 	bl	80019bc <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b19      	cmp	r3, #25
 8002d9e:	d914      	bls.n	8002dca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d1dc      	bne.n	8002d92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d003      	beq.n	8002dee <I2C_IsErrorOccurred+0xfa>
 8002de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d09d      	beq.n	8002d2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f043 0304 	orr.w	r3, r3, #4
 8002e04:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	f043 0308 	orr.w	r3, r3, #8
 8002e46:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01c      	beq.n	8002ebc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f7ff fe56 	bl	8002b34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <I2C_IsErrorOccurred+0x1d4>)
 8002e94:	400b      	ands	r3, r1
 8002e96:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	fe00e800 	.word	0xfe00e800

08002ecc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	817b      	strh	r3, [r7, #10]
 8002eda:	4613      	mov	r3, r2
 8002edc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ee4:	7a7b      	ldrb	r3, [r7, #9]
 8002ee6:	041b      	lsls	r3, r3, #16
 8002ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002efa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	0d5b      	lsrs	r3, r3, #21
 8002f06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <I2C_TransferConfig+0x60>)
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	ea02 0103 	and.w	r1, r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	03ff63ff 	.word	0x03ff63ff

08002f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d138      	bne.n	8002fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e032      	b.n	8002fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	; 0x24
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6819      	ldr	r1, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e000      	b.n	8002fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d139      	bne.n	8003050 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e033      	b.n	8003052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2224      	movs	r2, #36	; 0x24
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003018:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800305e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003060:	b08f      	sub	sp, #60	; 0x3c
 8003062:	af0a      	add	r7, sp, #40	; 0x28
 8003064:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e116      	b.n	800329e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe f8c2 	bl	8001214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2203      	movs	r2, #3
 8003094:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 fb43 	bl	800573a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	687e      	ldr	r6, [r7, #4]
 80030bc:	466d      	mov	r5, sp
 80030be:	f106 0410 	add.w	r4, r6, #16
 80030c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80030d2:	1d33      	adds	r3, r6, #4
 80030d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d6:	6838      	ldr	r0, [r7, #0]
 80030d8:	f002 fb03 	bl	80056e2 <USB_CoreInit>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0d7      	b.n	800329e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f002 fb31 	bl	800575c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	e04a      	b.n	8003196 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	333d      	adds	r3, #61	; 0x3d
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	333c      	adds	r3, #60	; 0x3c
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	b298      	uxth	r0, r3
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	3344      	adds	r3, #68	; 0x44
 800313c:	4602      	mov	r2, r0
 800313e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3340      	adds	r3, #64	; 0x40
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3348      	adds	r3, #72	; 0x48
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334c      	adds	r3, #76	; 0x4c
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3354      	adds	r3, #84	; 0x54
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	3301      	adds	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	d3af      	bcc.n	8003100 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]
 80031a4:	e044      	b.n	8003230 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	3301      	adds	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d3b5      	bcc.n	80031a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	687e      	ldr	r6, [r7, #4]
 8003242:	466d      	mov	r5, sp
 8003244:	f106 0410 	add.w	r4, r6, #16
 8003248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003250:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003254:	e885 0003 	stmia.w	r5, {r0, r1}
 8003258:	1d33      	adds	r3, r6, #4
 800325a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800325c:	6838      	ldr	r0, [r7, #0]
 800325e:	f002 fac9 	bl	80057f4 <USB_DevInit>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e014      	b.n	800329e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	2b01      	cmp	r3, #1
 800328a:	d102      	bne.n	8003292 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f80a 	bl	80032a6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f002 fc75 	bl	8005b86 <USB_DevDisconnect>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032a6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	f043 0303 	orr.w	r3, r3, #3
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40007000 	.word	0x40007000

08003310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <HAL_PWREx_GetVoltageRange+0x18>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40007000 	.word	0x40007000

0800332c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333a:	d130      	bne.n	800339e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003348:	d038      	beq.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003352:	4a1e      	ldr	r2, [pc, #120]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2232      	movs	r2, #50	; 0x32
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	0c9b      	lsrs	r3, r3, #18
 800336c:	3301      	adds	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003370:	e002      	b.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3b01      	subs	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003384:	d102      	bne.n	800338c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f2      	bne.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003398:	d110      	bne.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00f      	b.n	80033be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033aa:	d007      	beq.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033b4:	4a05      	ldr	r2, [pc, #20]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40007000 	.word	0x40007000
 80033d0:	2000026c 	.word	0x2000026c
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80033e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033e6:	6053      	str	r3, [r2, #4]
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40007000 	.word	0x40007000

080033f8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7fe fadc 	bl	80019bc <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e063      	b.n	80034d8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10b      	bne.n	8003434 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7fd fdc9 	bl	8000fbc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800342a:	f241 3188 	movw	r1, #5000	; 0x1388
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f858 	bl	80034e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	3b01      	subs	r3, #1
 8003444:	021a      	lsls	r2, r3, #8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	2120      	movs	r1, #32
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f850 	bl	8003500 <QSPI_WaitFlagStateUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003464:	7afb      	ldrb	r3, [r7, #11]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d131      	bne.n	80034ce <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003474:	f023 0310 	bic.w	r3, r3, #16
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6852      	ldr	r2, [r2, #4]
 800347c:	0611      	lsls	r1, r2, #24
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68d2      	ldr	r2, [r2, #12]
 8003482:	4311      	orrs	r1, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	430b      	orrs	r3, r1
 800348a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_QSPI_Init+0xe8>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6912      	ldr	r2, [r2, #16]
 800349a:	0411      	lsls	r1, r2, #16
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6952      	ldr	r2, [r2, #20]
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6992      	ldr	r2, [r2, #24]
 80034a6:	4311      	orrs	r1, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80034d6:	7afb      	ldrb	r3, [r7, #11]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	ffe0f8fe 	.word	0xffe0f8fe

080034e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003510:	e01a      	b.n	8003548 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d016      	beq.n	8003548 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe fa4f 	bl	80019bc <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2204      	movs	r2, #4
 8003534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e00e      	b.n	8003566 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	429a      	cmp	r2, r3
 8003562:	d1d6      	bne.n	8003512 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e3ca      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003582:	4b97      	ldr	r3, [pc, #604]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800358c:	4b94      	ldr	r3, [pc, #592]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80e4 	beq.w	800376c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <HAL_RCC_OscConfig+0x4a>
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b0c      	cmp	r3, #12
 80035ae:	f040 808b 	bne.w	80036c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	f040 8087 	bne.w	80036c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ba:	4b89      	ldr	r3, [pc, #548]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_RCC_OscConfig+0x62>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e3a2      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1a      	ldr	r2, [r3, #32]
 80035d6:	4b82      	ldr	r3, [pc, #520]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <HAL_RCC_OscConfig+0x7c>
 80035e2:	4b7f      	ldr	r3, [pc, #508]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ea:	e005      	b.n	80035f8 <HAL_RCC_OscConfig+0x88>
 80035ec:	4b7c      	ldr	r3, [pc, #496]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d223      	bcs.n	8003644 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fd55 	bl	80040b0 <RCC_SetFlashLatencyFromMSIRange>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e383      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003610:	4b73      	ldr	r3, [pc, #460]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a72      	ldr	r2, [pc, #456]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003616:	f043 0308 	orr.w	r3, r3, #8
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b70      	ldr	r3, [pc, #448]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	496d      	ldr	r1, [pc, #436]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800362e:	4b6c      	ldr	r3, [pc, #432]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4968      	ldr	r1, [pc, #416]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800363e:	4313      	orrs	r3, r2
 8003640:	604b      	str	r3, [r1, #4]
 8003642:	e025      	b.n	8003690 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003644:	4b66      	ldr	r3, [pc, #408]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a65      	ldr	r2, [pc, #404]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800364a:	f043 0308 	orr.w	r3, r3, #8
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b63      	ldr	r3, [pc, #396]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4960      	ldr	r1, [pc, #384]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003662:	4b5f      	ldr	r3, [pc, #380]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	495b      	ldr	r1, [pc, #364]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fd15 	bl	80040b0 <RCC_SetFlashLatencyFromMSIRange>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e343      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003690:	f000 fc4a 	bl	8003f28 <HAL_RCC_GetSysClockFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b52      	ldr	r3, [pc, #328]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	4950      	ldr	r1, [pc, #320]	; (80037e4 <HAL_RCC_OscConfig+0x274>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ac:	4a4e      	ldr	r2, [pc, #312]	; (80037e8 <HAL_RCC_OscConfig+0x278>)
 80036ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036b0:	4b4e      	ldr	r3, [pc, #312]	; (80037ec <HAL_RCC_OscConfig+0x27c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fe f931 	bl	800191c <HAL_InitTick>
 80036ba:	4603      	mov	r3, r0
 80036bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d052      	beq.n	800376a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	e327      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d032      	beq.n	8003736 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036d0:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a42      	ldr	r2, [pc, #264]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036dc:	f7fe f96e 	bl	80019bc <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e4:	f7fe f96a 	bl	80019bc <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e310      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f6:	4b3a      	ldr	r3, [pc, #232]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a36      	ldr	r2, [pc, #216]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003708:	f043 0308 	orr.w	r3, r3, #8
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b34      	ldr	r3, [pc, #208]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4931      	ldr	r1, [pc, #196]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003720:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	492c      	ldr	r1, [pc, #176]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
 8003734:	e01a      	b.n	800376c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003742:	f7fe f93b 	bl	80019bc <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800374a:	f7fe f937 	bl	80019bc <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e2dd      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800375c:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x1da>
 8003768:	e000      	b.n	800376c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800376a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d074      	beq.n	8003862 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b08      	cmp	r3, #8
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x21a>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2b0c      	cmp	r3, #12
 8003782:	d10e      	bne.n	80037a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d10b      	bne.n	80037a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d064      	beq.n	8003860 <HAL_RCC_OscConfig+0x2f0>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d160      	bne.n	8003860 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e2ba      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x24a>
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e026      	b.n	8003808 <HAL_RCC_OscConfig+0x298>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c2:	d115      	bne.n	80037f0 <HAL_RCC_OscConfig+0x280>
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a05      	ldr	r2, [pc, #20]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a02      	ldr	r2, [pc, #8]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e014      	b.n	8003808 <HAL_RCC_OscConfig+0x298>
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	080065ec 	.word	0x080065ec
 80037e8:	2000026c 	.word	0x2000026c
 80037ec:	20000270 	.word	0x20000270
 80037f0:	4ba0      	ldr	r3, [pc, #640]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a9f      	ldr	r2, [pc, #636]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b9d      	ldr	r3, [pc, #628]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a9c      	ldr	r2, [pc, #624]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe f8d4 	bl	80019bc <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003818:	f7fe f8d0 	bl	80019bc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	; 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e276      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382a:	4b92      	ldr	r3, [pc, #584]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x2a8>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe f8c0 	bl	80019bc <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe f8bc 	bl	80019bc <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e262      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003852:	4b88      	ldr	r3, [pc, #544]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x2d0>
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d060      	beq.n	8003930 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d005      	beq.n	8003880 <HAL_RCC_OscConfig+0x310>
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d119      	bne.n	80038ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d116      	bne.n	80038ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003880:	4b7c      	ldr	r3, [pc, #496]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_OscConfig+0x328>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e23f      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b76      	ldr	r3, [pc, #472]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	4973      	ldr	r1, [pc, #460]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ac:	e040      	b.n	8003930 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d023      	beq.n	80038fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b6:	4b6f      	ldr	r3, [pc, #444]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6e      	ldr	r2, [pc, #440]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fe f87b 	bl	80019bc <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fe f877 	bl	80019bc <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e21d      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038dc:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	4b62      	ldr	r3, [pc, #392]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	495f      	ldr	r1, [pc, #380]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	e018      	b.n	8003930 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fe:	4b5d      	ldr	r3, [pc, #372]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a5c      	ldr	r2, [pc, #368]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fe f857 	bl	80019bc <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003912:	f7fe f853 	bl	80019bc <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1f9      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003924:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f0      	bne.n	8003912 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01c      	beq.n	800397e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394a:	4a4a      	ldr	r2, [pc, #296]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fe f832 	bl	80019bc <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395c:	f7fe f82e 	bl	80019bc <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1d4      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800396e:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ef      	beq.n	800395c <HAL_RCC_OscConfig+0x3ec>
 800397c:	e01b      	b.n	80039b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397e:	4b3d      	ldr	r3, [pc, #244]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003984:	4a3b      	ldr	r2, [pc, #236]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe f815 	bl	80019bc <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003996:	f7fe f811 	bl	80019bc <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e1b7      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039a8:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80039aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ef      	bne.n	8003996 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80a6 	beq.w	8003b10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039c8:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10d      	bne.n	80039f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d4:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d8:	4a26      	ldr	r2, [pc, #152]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80039da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039de:	6593      	str	r3, [r2, #88]	; 0x58
 80039e0:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ec:	2301      	movs	r3, #1
 80039ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f0:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <HAL_RCC_OscConfig+0x508>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d118      	bne.n	8003a2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039fc:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <HAL_RCC_OscConfig+0x508>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <HAL_RCC_OscConfig+0x508>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a08:	f7fd ffd8 	bl	80019bc <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7fd ffd4 	bl	80019bc <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e17a      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_RCC_OscConfig+0x508>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d108      	bne.n	8003a48 <HAL_RCC_OscConfig+0x4d8>
 8003a36:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a46:	e029      	b.n	8003a9c <HAL_RCC_OscConfig+0x52c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d115      	bne.n	8003a7c <HAL_RCC_OscConfig+0x50c>
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	4a07      	ldr	r2, [pc, #28]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	4a03      	ldr	r2, [pc, #12]	; (8003a74 <HAL_RCC_OscConfig+0x504>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a70:	e014      	b.n	8003a9c <HAL_RCC_OscConfig+0x52c>
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	4b9c      	ldr	r3, [pc, #624]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a9b      	ldr	r2, [pc, #620]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a8c:	4b98      	ldr	r3, [pc, #608]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	4a97      	ldr	r2, [pc, #604]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d016      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd ff8a 	bl	80019bc <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fd ff86 	bl	80019bc <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e12a      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac2:	4b8b      	ldr	r3, [pc, #556]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ed      	beq.n	8003aac <HAL_RCC_OscConfig+0x53c>
 8003ad0:	e015      	b.n	8003afe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fd ff73 	bl	80019bc <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fd ff6f 	bl	80019bc <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e113      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af0:	4b7f      	ldr	r3, [pc, #508]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1ed      	bne.n	8003ada <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003afe:	7ffb      	ldrb	r3, [r7, #31]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b04:	4b7a      	ldr	r3, [pc, #488]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4a79      	ldr	r2, [pc, #484]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80fe 	beq.w	8003d16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	f040 80d0 	bne.w	8003cc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b24:	4b72      	ldr	r3, [pc, #456]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0203 	and.w	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d130      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	3b01      	subs	r3, #1
 8003b44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d127      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d11f      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b64:	2a07      	cmp	r2, #7
 8003b66:	bf14      	ite	ne
 8003b68:	2201      	movne	r2, #1
 8003b6a:	2200      	moveq	r2, #0
 8003b6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d113      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d109      	bne.n	8003b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	3b01      	subs	r3, #1
 8003b94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d06e      	beq.n	8003c78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	d069      	beq.n	8003c74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ba0:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bac:	4b50      	ldr	r3, [pc, #320]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0ad      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bbc:	4b4c      	ldr	r3, [pc, #304]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a4b      	ldr	r2, [pc, #300]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bc8:	f7fd fef8 	bl	80019bc <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fd fef4 	bl	80019bc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e09a      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be2:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bee:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	4b40      	ldr	r3, [pc, #256]	; (8003cf4 <HAL_RCC_OscConfig+0x784>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bfe:	3a01      	subs	r2, #1
 8003c00:	0112      	lsls	r2, r2, #4
 8003c02:	4311      	orrs	r1, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c08:	0212      	lsls	r2, r2, #8
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c10:	0852      	lsrs	r2, r2, #1
 8003c12:	3a01      	subs	r2, #1
 8003c14:	0552      	lsls	r2, r2, #21
 8003c16:	4311      	orrs	r1, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c1c:	0852      	lsrs	r2, r2, #1
 8003c1e:	3a01      	subs	r2, #1
 8003c20:	0652      	lsls	r2, r2, #25
 8003c22:	4311      	orrs	r1, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c28:	0912      	lsrs	r2, r2, #4
 8003c2a:	0452      	lsls	r2, r2, #17
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	4930      	ldr	r1, [pc, #192]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c34:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2d      	ldr	r2, [pc, #180]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c40:	4b2b      	ldr	r3, [pc, #172]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a2a      	ldr	r2, [pc, #168]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c4c:	f7fd feb6 	bl	80019bc <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fd feb2 	bl	80019bc <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e058      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c66:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c72:	e050      	b.n	8003d16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e04f      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d148      	bne.n	8003d16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c9c:	f7fd fe8e 	bl	80019bc <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fd fe8a 	bl	80019bc <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e030      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x734>
 8003cc2:	e028      	b.n	8003d16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b0c      	cmp	r3, #12
 8003cc8:	d023      	beq.n	8003d12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <HAL_RCC_OscConfig+0x780>)
 8003cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd fe71 	bl	80019bc <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cdc:	e00c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fd fe6d 	bl	80019bc <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d905      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e013      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_RCC_OscConfig+0x7b0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1ec      	bne.n	8003cde <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCC_OscConfig+0x7b0>)
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	4905      	ldr	r1, [pc, #20]	; (8003d20 <HAL_RCC_OscConfig+0x7b0>)
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_RCC_OscConfig+0x7b4>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60cb      	str	r3, [r1, #12]
 8003d10:	e001      	b.n	8003d16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000
 8003d24:	feeefffc 	.word	0xfeeefffc

08003d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0e7      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b75      	ldr	r3, [pc, #468]	; (8003f14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d910      	bls.n	8003d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b72      	ldr	r3, [pc, #456]	; (8003f14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 0207 	bic.w	r2, r3, #7
 8003d52:	4970      	ldr	r1, [pc, #448]	; (8003f14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b6e      	ldr	r3, [pc, #440]	; (8003f14 <HAL_RCC_ClockConfig+0x1ec>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0cf      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d010      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	4b66      	ldr	r3, [pc, #408]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d908      	bls.n	8003d9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b63      	ldr	r3, [pc, #396]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4960      	ldr	r1, [pc, #384]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d04c      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dae:	4b5a      	ldr	r3, [pc, #360]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d121      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e0a6      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d107      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc6:	4b54      	ldr	r3, [pc, #336]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d115      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e09a      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dde:	4b4e      	ldr	r3, [pc, #312]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e08e      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dee:	4b4a      	ldr	r3, [pc, #296]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e086      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	4b46      	ldr	r3, [pc, #280]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4943      	ldr	r1, [pc, #268]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e10:	f7fd fdd4 	bl	80019bc <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fd fdd0 	bl	80019bc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e06e      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 020c 	and.w	r2, r3, #12
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1eb      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d010      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d208      	bcs.n	8003e6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	492b      	ldr	r1, [pc, #172]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e6e:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <HAL_RCC_ClockConfig+0x1ec>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d210      	bcs.n	8003e9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <HAL_RCC_ClockConfig+0x1ec>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f023 0207 	bic.w	r2, r3, #7
 8003e84:	4923      	ldr	r1, [pc, #140]	; (8003f14 <HAL_RCC_ClockConfig+0x1ec>)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8c:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <HAL_RCC_ClockConfig+0x1ec>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d001      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e036      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eaa:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4918      	ldr	r1, [pc, #96]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec8:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4910      	ldr	r1, [pc, #64]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003edc:	f000 f824 	bl	8003f28 <HAL_RCC_GetSysClockFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	490b      	ldr	r1, [pc, #44]	; (8003f1c <HAL_RCC_ClockConfig+0x1f4>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef8:	4a09      	ldr	r2, [pc, #36]	; (8003f20 <HAL_RCC_ClockConfig+0x1f8>)
 8003efa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_RCC_ClockConfig+0x1fc>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd fd0b 	bl	800191c <HAL_InitTick>
 8003f06:	4603      	mov	r3, r0
 8003f08:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40022000 	.word	0x40022000
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	080065ec 	.word	0x080065ec
 8003f20:	2000026c 	.word	0x2000026c
 8003f24:	20000270 	.word	0x20000270

08003f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b089      	sub	sp, #36	; 0x24
 8003f2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f36:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x34>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d121      	bne.n	8003f9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d11e      	bne.n	8003f9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f5c:	4b34      	ldr	r3, [pc, #208]	; (8004030 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f68:	4b31      	ldr	r3, [pc, #196]	; (8004030 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e005      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f78:	4b2d      	ldr	r3, [pc, #180]	; (8004030 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10d      	bne.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fa0:	4b25      	ldr	r3, [pc, #148]	; (8004038 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	e004      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fac:	4b23      	ldr	r3, [pc, #140]	; (800403c <HAL_RCC_GetSysClockFreq+0x114>)
 8003fae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b0c      	cmp	r3, #12
 8003fb4:	d134      	bne.n	8004020 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d003      	beq.n	8003fce <HAL_RCC_GetSysClockFreq+0xa6>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d003      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0xac>
 8003fcc:	e005      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fce:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fd0:	617b      	str	r3, [r7, #20]
      break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_RCC_GetSysClockFreq+0x114>)
 8003fd6:	617b      	str	r3, [r7, #20]
      break;
 8003fd8:	e002      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	617b      	str	r3, [r7, #20]
      break;
 8003fde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	3301      	adds	r3, #1
 8003fec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	fb03 f202 	mul.w	r2, r3, r2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004006:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <HAL_RCC_GetSysClockFreq+0x108>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	0e5b      	lsrs	r3, r3, #25
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	3301      	adds	r3, #1
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004020:	69bb      	ldr	r3, [r7, #24]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3724      	adds	r7, #36	; 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
 8004034:	08006604 	.word	0x08006604
 8004038:	00f42400 	.word	0x00f42400
 800403c:	007a1200 	.word	0x007a1200

08004040 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <HAL_RCC_GetHCLKFreq+0x14>)
 8004046:	681b      	ldr	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	2000026c 	.word	0x2000026c

08004058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800405c:	f7ff fff0 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	4904      	ldr	r1, [pc, #16]	; (8004080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	080065fc 	.word	0x080065fc

08004084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004088:	f7ff ffda 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	0adb      	lsrs	r3, r3, #11
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4904      	ldr	r1, [pc, #16]	; (80040ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40021000 	.word	0x40021000
 80040ac:	080065fc 	.word	0x080065fc

080040b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040bc:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040c8:	f7ff f922 	bl	8003310 <HAL_PWREx_GetVoltageRange>
 80040cc:	6178      	str	r0, [r7, #20]
 80040ce:	e014      	b.n	80040fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	4a24      	ldr	r2, [pc, #144]	; (8004168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040da:	6593      	str	r3, [r2, #88]	; 0x58
 80040dc:	4b22      	ldr	r3, [pc, #136]	; (8004168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040e8:	f7ff f912 	bl	8003310 <HAL_PWREx_GetVoltageRange>
 80040ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040ee:	4b1e      	ldr	r3, [pc, #120]	; (8004168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004100:	d10b      	bne.n	800411a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b80      	cmp	r3, #128	; 0x80
 8004106:	d919      	bls.n	800413c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2ba0      	cmp	r3, #160	; 0xa0
 800410c:	d902      	bls.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800410e:	2302      	movs	r3, #2
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	e013      	b.n	800413c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004114:	2301      	movs	r3, #1
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	e010      	b.n	800413c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d902      	bls.n	8004126 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004120:	2303      	movs	r3, #3
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	e00a      	b.n	800413c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b80      	cmp	r3, #128	; 0x80
 800412a:	d102      	bne.n	8004132 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800412c:	2302      	movs	r3, #2
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	e004      	b.n	800413c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b70      	cmp	r3, #112	; 0x70
 8004136:	d101      	bne.n	800413c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004138:	2301      	movs	r3, #1
 800413a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 0207 	bic.w	r2, r3, #7
 8004144:	4909      	ldr	r1, [pc, #36]	; (800416c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	429a      	cmp	r2, r3
 8004158:	d001      	beq.n	800415e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	40022000 	.word	0x40022000

08004170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004178:	2300      	movs	r3, #0
 800417a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800417c:	2300      	movs	r3, #0
 800417e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004188:	2b00      	cmp	r3, #0
 800418a:	d041      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004190:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004194:	d02a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004196:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800419a:	d824      	bhi.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800419c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041a0:	d008      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041a6:	d81e      	bhi.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b0:	d010      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041b2:	e018      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041b4:	4b86      	ldr	r3, [pc, #536]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a85      	ldr	r2, [pc, #532]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041c0:	e015      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 facb 	bl	8004764 <RCCEx_PLLSAI1_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d2:	e00c      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3320      	adds	r3, #32
 80041d8:	2100      	movs	r1, #0
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fbb6 	bl	800494c <RCCEx_PLLSAI2_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041e4:	e003      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	74fb      	strb	r3, [r7, #19]
      break;
 80041ea:	e000      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041f4:	4b76      	ldr	r3, [pc, #472]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004202:	4973      	ldr	r1, [pc, #460]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800420a:	e001      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d041      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004220:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004224:	d02a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004226:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800422a:	d824      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800422c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004230:	d008      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004236:	d81e      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800423c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004240:	d010      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004242:	e018      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004244:	4b62      	ldr	r3, [pc, #392]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a61      	ldr	r2, [pc, #388]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004250:	e015      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3304      	adds	r3, #4
 8004256:	2100      	movs	r1, #0
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fa83 	bl	8004764 <RCCEx_PLLSAI1_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004262:	e00c      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3320      	adds	r3, #32
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fb6e 	bl	800494c <RCCEx_PLLSAI2_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004274:	e003      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	74fb      	strb	r3, [r7, #19]
      break;
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800427c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800427e:	7cfb      	ldrb	r3, [r7, #19]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004284:	4b52      	ldr	r3, [pc, #328]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004292:	494f      	ldr	r1, [pc, #316]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80a0 	beq.w	80043ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042b2:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042c2:	2300      	movs	r3, #0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c8:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042cc:	4a40      	ldr	r2, [pc, #256]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d2:	6593      	str	r3, [r2, #88]	; 0x58
 80042d4:	4b3e      	ldr	r3, [pc, #248]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e0:	2301      	movs	r3, #1
 80042e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e4:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a3a      	ldr	r2, [pc, #232]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042f0:	f7fd fb64 	bl	80019bc <HAL_GetTick>
 80042f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042f6:	e009      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f8:	f7fd fb60 	bl	80019bc <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d902      	bls.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	74fb      	strb	r3, [r7, #19]
        break;
 800430a:	e005      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800430c:	4b31      	ldr	r3, [pc, #196]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0ef      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d15c      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800431e:	4b2c      	ldr	r3, [pc, #176]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004328:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01f      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	429a      	cmp	r2, r3
 800433a:	d019      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004346:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004348:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	4a20      	ldr	r2, [pc, #128]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004368:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7fd fb1f 	bl	80019bc <HAL_GetTick>
 800437e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004380:	e00b      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fd fb1b 	bl	80019bc <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d902      	bls.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	74fb      	strb	r3, [r7, #19]
            break;
 8004398:	e006      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800439a:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0ec      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043be:	4904      	ldr	r1, [pc, #16]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043c6:	e009      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
 80043cc:	e006      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043dc:	7c7b      	ldrb	r3, [r7, #17]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d105      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e2:	4b9e      	ldr	r3, [pc, #632]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	4a9d      	ldr	r2, [pc, #628]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043fa:	4b98      	ldr	r3, [pc, #608]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f023 0203 	bic.w	r2, r3, #3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	4994      	ldr	r1, [pc, #592]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800441c:	4b8f      	ldr	r3, [pc, #572]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f023 020c 	bic.w	r2, r3, #12
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	498c      	ldr	r1, [pc, #560]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800443e:	4b87      	ldr	r3, [pc, #540]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004444:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	4983      	ldr	r1, [pc, #524]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004460:	4b7e      	ldr	r3, [pc, #504]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	497b      	ldr	r1, [pc, #492]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004482:	4b76      	ldr	r3, [pc, #472]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004490:	4972      	ldr	r1, [pc, #456]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044a4:	4b6d      	ldr	r3, [pc, #436]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b2:	496a      	ldr	r1, [pc, #424]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044c6:	4b65      	ldr	r3, [pc, #404]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d4:	4961      	ldr	r1, [pc, #388]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044e8:	4b5c      	ldr	r3, [pc, #368]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f6:	4959      	ldr	r1, [pc, #356]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800450a:	4b54      	ldr	r3, [pc, #336]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004518:	4950      	ldr	r1, [pc, #320]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800452c:	4b4b      	ldr	r3, [pc, #300]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	4948      	ldr	r1, [pc, #288]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800454e:	4b43      	ldr	r3, [pc, #268]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	493f      	ldr	r1, [pc, #252]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d028      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004570:	4b3a      	ldr	r3, [pc, #232]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800457e:	4937      	ldr	r1, [pc, #220]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800458e:	d106      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004590:	4b32      	ldr	r3, [pc, #200]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a31      	ldr	r2, [pc, #196]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800459a:	60d3      	str	r3, [r2, #12]
 800459c:	e011      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045a6:	d10c      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 f8d8 	bl	8004764 <RCCEx_PLLSAI1_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d028      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045ce:	4b23      	ldr	r3, [pc, #140]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	491f      	ldr	r1, [pc, #124]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ec:	d106      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	4a1a      	ldr	r2, [pc, #104]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045f8:	60d3      	str	r3, [r2, #12]
 80045fa:	e011      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004604:	d10c      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3304      	adds	r3, #4
 800460a:	2101      	movs	r1, #1
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f8a9 	bl	8004764 <RCCEx_PLLSAI1_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800461c:	7cfb      	ldrb	r3, [r7, #19]
 800461e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d02b      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463a:	4908      	ldr	r1, [pc, #32]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800464a:	d109      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4a02      	ldr	r2, [pc, #8]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004656:	60d3      	str	r3, [r2, #12]
 8004658:	e014      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800465a:	bf00      	nop
 800465c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004668:	d10c      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	2101      	movs	r1, #1
 8004670:	4618      	mov	r0, r3
 8004672:	f000 f877 	bl	8004764 <RCCEx_PLLSAI1_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d02f      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004690:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800469e:	4928      	ldr	r1, [pc, #160]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ae:	d10d      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3304      	adds	r3, #4
 80046b4:	2102      	movs	r1, #2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 f854 	bl	8004764 <RCCEx_PLLSAI1_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d014      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046c6:	7cfb      	ldrb	r3, [r7, #19]
 80046c8:	74bb      	strb	r3, [r7, #18]
 80046ca:	e011      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3320      	adds	r3, #32
 80046da:	2102      	movs	r1, #2
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f935 	bl	800494c <RCCEx_PLLSAI2_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800470a:	490d      	ldr	r1, [pc, #52]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800471e:	4b08      	ldr	r3, [pc, #32]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800472e:	4904      	ldr	r1, [pc, #16]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004736:	7cbb      	ldrb	r3, [r7, #18]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40021000 	.word	0x40021000

08004744 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a04      	ldr	r2, [pc, #16]	; (8004760 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800474e:	f043 0304 	orr.w	r3, r3, #4
 8004752:	6013      	str	r3, [r2, #0]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000

08004764 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004772:	4b75      	ldr	r3, [pc, #468]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d018      	beq.n	80047b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800477e:	4b72      	ldr	r3, [pc, #456]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0203 	and.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d10d      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
       ||
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004796:	4b6c      	ldr	r3, [pc, #432]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
       ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d047      	beq.n	800483a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
 80047ae:	e044      	b.n	800483a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d018      	beq.n	80047ea <RCCEx_PLLSAI1_Config+0x86>
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d825      	bhi.n	8004808 <RCCEx_PLLSAI1_Config+0xa4>
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d002      	beq.n	80047c6 <RCCEx_PLLSAI1_Config+0x62>
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d009      	beq.n	80047d8 <RCCEx_PLLSAI1_Config+0x74>
 80047c4:	e020      	b.n	8004808 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047c6:	4b60      	ldr	r3, [pc, #384]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d11d      	bne.n	800480e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d6:	e01a      	b.n	800480e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047d8:	4b5b      	ldr	r3, [pc, #364]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d116      	bne.n	8004812 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e8:	e013      	b.n	8004812 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ea:	4b57      	ldr	r3, [pc, #348]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047f6:	4b54      	ldr	r3, [pc, #336]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004806:	e006      	b.n	8004816 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      break;
 800480c:	e004      	b.n	8004818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800480e:	bf00      	nop
 8004810:	e002      	b.n	8004818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004816:	bf00      	nop
    }

    if(status == HAL_OK)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10d      	bne.n	800483a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800481e:	4b4a      	ldr	r3, [pc, #296]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	3b01      	subs	r3, #1
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	430b      	orrs	r3, r1
 8004834:	4944      	ldr	r1, [pc, #272]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d17d      	bne.n	800493c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004840:	4b41      	ldr	r3, [pc, #260]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a40      	ldr	r2, [pc, #256]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800484a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800484c:	f7fd f8b6 	bl	80019bc <HAL_GetTick>
 8004850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004852:	e009      	b.n	8004868 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004854:	f7fd f8b2 	bl	80019bc <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d902      	bls.n	8004868 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	73fb      	strb	r3, [r7, #15]
        break;
 8004866:	e005      	b.n	8004874 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004868:	4b37      	ldr	r3, [pc, #220]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ef      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d160      	bne.n	800493c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d111      	bne.n	80048a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004880:	4b31      	ldr	r3, [pc, #196]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6892      	ldr	r2, [r2, #8]
 8004890:	0211      	lsls	r1, r2, #8
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	68d2      	ldr	r2, [r2, #12]
 8004896:	0912      	lsrs	r2, r2, #4
 8004898:	0452      	lsls	r2, r2, #17
 800489a:	430a      	orrs	r2, r1
 800489c:	492a      	ldr	r1, [pc, #168]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	610b      	str	r3, [r1, #16]
 80048a2:	e027      	b.n	80048f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d112      	bne.n	80048d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048aa:	4b27      	ldr	r3, [pc, #156]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6892      	ldr	r2, [r2, #8]
 80048ba:	0211      	lsls	r1, r2, #8
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6912      	ldr	r2, [r2, #16]
 80048c0:	0852      	lsrs	r2, r2, #1
 80048c2:	3a01      	subs	r2, #1
 80048c4:	0552      	lsls	r2, r2, #21
 80048c6:	430a      	orrs	r2, r1
 80048c8:	491f      	ldr	r1, [pc, #124]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	610b      	str	r3, [r1, #16]
 80048ce:	e011      	b.n	80048f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d0:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6892      	ldr	r2, [r2, #8]
 80048e0:	0211      	lsls	r1, r2, #8
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6952      	ldr	r2, [r2, #20]
 80048e6:	0852      	lsrs	r2, r2, #1
 80048e8:	3a01      	subs	r2, #1
 80048ea:	0652      	lsls	r2, r2, #25
 80048ec:	430a      	orrs	r2, r1
 80048ee:	4916      	ldr	r1, [pc, #88]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a13      	ldr	r2, [pc, #76]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fd f85c 	bl	80019bc <HAL_GetTick>
 8004904:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004906:	e009      	b.n	800491c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004908:	f7fd f858 	bl	80019bc <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d902      	bls.n	800491c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	73fb      	strb	r3, [r7, #15]
          break;
 800491a:	e005      	b.n	8004928 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0ef      	beq.n	8004908 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	4904      	ldr	r1, [pc, #16]	; (8004948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004938:	4313      	orrs	r3, r2
 800493a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800493c:	7bfb      	ldrb	r3, [r7, #15]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40021000 	.word	0x40021000

0800494c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800495a:	4b6a      	ldr	r3, [pc, #424]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004966:	4b67      	ldr	r3, [pc, #412]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0203 	and.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d10d      	bne.n	8004992 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
       ||
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800497e:	4b61      	ldr	r3, [pc, #388]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	091b      	lsrs	r3, r3, #4
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
       ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d047      	beq.n	8004a22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
 8004996:	e044      	b.n	8004a22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d018      	beq.n	80049d2 <RCCEx_PLLSAI2_Config+0x86>
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d825      	bhi.n	80049f0 <RCCEx_PLLSAI2_Config+0xa4>
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d002      	beq.n	80049ae <RCCEx_PLLSAI2_Config+0x62>
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d009      	beq.n	80049c0 <RCCEx_PLLSAI2_Config+0x74>
 80049ac:	e020      	b.n	80049f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ae:	4b55      	ldr	r3, [pc, #340]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d11d      	bne.n	80049f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049be:	e01a      	b.n	80049f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049c0:	4b50      	ldr	r3, [pc, #320]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d116      	bne.n	80049fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d0:	e013      	b.n	80049fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049d2:	4b4c      	ldr	r3, [pc, #304]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10f      	bne.n	80049fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049de:	4b49      	ldr	r3, [pc, #292]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049ee:	e006      	b.n	80049fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      break;
 80049f4:	e004      	b.n	8004a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a06:	4b3f      	ldr	r3, [pc, #252]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6819      	ldr	r1, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	4939      	ldr	r1, [pc, #228]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d167      	bne.n	8004af8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a28:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a35      	ldr	r2, [pc, #212]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a34:	f7fc ffc2 	bl	80019bc <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a3a:	e009      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a3c:	f7fc ffbe 	bl	80019bc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a4e:	e005      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a50:	4b2c      	ldr	r3, [pc, #176]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1ef      	bne.n	8004a3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d14a      	bne.n	8004af8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d111      	bne.n	8004a8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a68:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6892      	ldr	r2, [r2, #8]
 8004a78:	0211      	lsls	r1, r2, #8
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68d2      	ldr	r2, [r2, #12]
 8004a7e:	0912      	lsrs	r2, r2, #4
 8004a80:	0452      	lsls	r2, r2, #17
 8004a82:	430a      	orrs	r2, r1
 8004a84:	491f      	ldr	r1, [pc, #124]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	614b      	str	r3, [r1, #20]
 8004a8a:	e011      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6892      	ldr	r2, [r2, #8]
 8004a9c:	0211      	lsls	r1, r2, #8
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6912      	ldr	r2, [r2, #16]
 8004aa2:	0852      	lsrs	r2, r2, #1
 8004aa4:	3a01      	subs	r2, #1
 8004aa6:	0652      	lsls	r2, r2, #25
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	4916      	ldr	r1, [pc, #88]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ab0:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fc ff7e 	bl	80019bc <HAL_GetTick>
 8004ac0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ac2:	e009      	b.n	8004ad8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ac4:	f7fc ff7a 	bl	80019bc <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d902      	bls.n	8004ad8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ad6:	e005      	b.n	8004ae4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ef      	beq.n	8004ac4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	4904      	ldr	r1, [pc, #16]	; (8004b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000

08004b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e095      	b.n	8004c46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d108      	bne.n	8004b34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2a:	d009      	beq.n	8004b40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	61da      	str	r2, [r3, #28]
 8004b32:	e005      	b.n	8004b40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fc fa72 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b80:	d902      	bls.n	8004b88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e002      	b.n	8004b8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b96:	d007      	beq.n	8004ba8 <HAL_SPI_Init+0xa0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bea:	ea42 0103 	orr.w	r1, r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	0c1b      	lsrs	r3, r3, #16
 8004c04:	f003 0204 	and.w	r2, r3, #4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c24:	ea42 0103 	orr.w	r1, r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e040      	b.n	8004ce2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d106      	bne.n	8004c76 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7fc fa2b 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2224      	movs	r2, #36	; 0x24
 8004c7a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f8c1 	bl	8004e14 <UART_SetConfig>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e022      	b.n	8004ce2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fb6d 	bl	8005384 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fbf4 	bl	80054c8 <UART_CheckIdleState>
 8004ce0:	4603      	mov	r3, r0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b08a      	sub	sp, #40	; 0x28
 8004cee:	af02      	add	r7, sp, #8
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	603b      	str	r3, [r7, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	f040 8082 	bne.w	8004e08 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_UART_Transmit+0x26>
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e07a      	b.n	8004e0a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Transmit+0x38>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e073      	b.n	8004e0a <HAL_UART_Transmit+0x120>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2221      	movs	r2, #33	; 0x21
 8004d36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d38:	f7fc fe40 	bl	80019bc <HAL_GetTick>
 8004d3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	88fa      	ldrh	r2, [r7, #6]
 8004d42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	88fa      	ldrh	r2, [r7, #6]
 8004d4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d56:	d108      	bne.n	8004d6a <HAL_UART_Transmit+0x80>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e003      	b.n	8004d72 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d7a:	e02d      	b.n	8004dd8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2200      	movs	r2, #0
 8004d84:	2180      	movs	r1, #128	; 0x80
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fbe7 	bl	800555a <UART_WaitOnFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e039      	b.n	8004e0a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10b      	bne.n	8004db4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da8:	b292      	uxth	r2, r2
 8004daa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	3302      	adds	r3, #2
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	e008      	b.n	8004dc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	b292      	uxth	r2, r2
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1cb      	bne.n	8004d7c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2200      	movs	r2, #0
 8004dec:	2140      	movs	r1, #64	; 0x40
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fbb3 	bl	800555a <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e005      	b.n	8004e0a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e000      	b.n	8004e0a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
  }
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e18:	b08a      	sub	sp, #40	; 0x28
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4ba4      	ldr	r3, [pc, #656]	; (80050d4 <UART_SetConfig+0x2c0>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a99      	ldr	r2, [pc, #612]	; (80050d8 <UART_SetConfig+0x2c4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e90:	430a      	orrs	r2, r1
 8004e92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a90      	ldr	r2, [pc, #576]	; (80050dc <UART_SetConfig+0x2c8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d126      	bne.n	8004eec <UART_SetConfig+0xd8>
 8004e9e:	4b90      	ldr	r3, [pc, #576]	; (80050e0 <UART_SetConfig+0x2cc>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d81b      	bhi.n	8004ee4 <UART_SetConfig+0xd0>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <UART_SetConfig+0xa0>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ec5 	.word	0x08004ec5
 8004eb8:	08004ed5 	.word	0x08004ed5
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004edd 	.word	0x08004edd
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eca:	e116      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed2:	e112      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eda:	e10e      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004edc:	2308      	movs	r3, #8
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee2:	e10a      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eea:	e106      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a7c      	ldr	r2, [pc, #496]	; (80050e4 <UART_SetConfig+0x2d0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d138      	bne.n	8004f68 <UART_SetConfig+0x154>
 8004ef6:	4b7a      	ldr	r3, [pc, #488]	; (80050e0 <UART_SetConfig+0x2cc>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	d82d      	bhi.n	8004f60 <UART_SetConfig+0x14c>
 8004f04:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <UART_SetConfig+0xf8>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f41 	.word	0x08004f41
 8004f10:	08004f61 	.word	0x08004f61
 8004f14:	08004f61 	.word	0x08004f61
 8004f18:	08004f61 	.word	0x08004f61
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f61 	.word	0x08004f61
 8004f24:	08004f61 	.word	0x08004f61
 8004f28:	08004f61 	.word	0x08004f61
 8004f2c:	08004f49 	.word	0x08004f49
 8004f30:	08004f61 	.word	0x08004f61
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	08004f61 	.word	0x08004f61
 8004f3c:	08004f59 	.word	0x08004f59
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f46:	e0d8      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4e:	e0d4      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f56:	e0d0      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5e:	e0cc      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e0c8      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a5e      	ldr	r2, [pc, #376]	; (80050e8 <UART_SetConfig+0x2d4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d125      	bne.n	8004fbe <UART_SetConfig+0x1aa>
 8004f72:	4b5b      	ldr	r3, [pc, #364]	; (80050e0 <UART_SetConfig+0x2cc>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f7c:	2b30      	cmp	r3, #48	; 0x30
 8004f7e:	d016      	beq.n	8004fae <UART_SetConfig+0x19a>
 8004f80:	2b30      	cmp	r3, #48	; 0x30
 8004f82:	d818      	bhi.n	8004fb6 <UART_SetConfig+0x1a2>
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d00a      	beq.n	8004f9e <UART_SetConfig+0x18a>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d814      	bhi.n	8004fb6 <UART_SetConfig+0x1a2>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <UART_SetConfig+0x182>
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d008      	beq.n	8004fa6 <UART_SetConfig+0x192>
 8004f94:	e00f      	b.n	8004fb6 <UART_SetConfig+0x1a2>
 8004f96:	2300      	movs	r3, #0
 8004f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9c:	e0ad      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa4:	e0a9      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fac:	e0a5      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004fae:	2308      	movs	r3, #8
 8004fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb4:	e0a1      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004fb6:	2310      	movs	r3, #16
 8004fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fbc:	e09d      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4a      	ldr	r2, [pc, #296]	; (80050ec <UART_SetConfig+0x2d8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d125      	bne.n	8005014 <UART_SetConfig+0x200>
 8004fc8:	4b45      	ldr	r3, [pc, #276]	; (80050e0 <UART_SetConfig+0x2cc>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8004fd4:	d016      	beq.n	8005004 <UART_SetConfig+0x1f0>
 8004fd6:	2bc0      	cmp	r3, #192	; 0xc0
 8004fd8:	d818      	bhi.n	800500c <UART_SetConfig+0x1f8>
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	d00a      	beq.n	8004ff4 <UART_SetConfig+0x1e0>
 8004fde:	2b80      	cmp	r3, #128	; 0x80
 8004fe0:	d814      	bhi.n	800500c <UART_SetConfig+0x1f8>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <UART_SetConfig+0x1d8>
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d008      	beq.n	8004ffc <UART_SetConfig+0x1e8>
 8004fea:	e00f      	b.n	800500c <UART_SetConfig+0x1f8>
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff2:	e082      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffa:	e07e      	b.n	80050fa <UART_SetConfig+0x2e6>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005002:	e07a      	b.n	80050fa <UART_SetConfig+0x2e6>
 8005004:	2308      	movs	r3, #8
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500a:	e076      	b.n	80050fa <UART_SetConfig+0x2e6>
 800500c:	2310      	movs	r3, #16
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005012:	e072      	b.n	80050fa <UART_SetConfig+0x2e6>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a35      	ldr	r2, [pc, #212]	; (80050f0 <UART_SetConfig+0x2dc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d12a      	bne.n	8005074 <UART_SetConfig+0x260>
 800501e:	4b30      	ldr	r3, [pc, #192]	; (80050e0 <UART_SetConfig+0x2cc>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800502c:	d01a      	beq.n	8005064 <UART_SetConfig+0x250>
 800502e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005032:	d81b      	bhi.n	800506c <UART_SetConfig+0x258>
 8005034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005038:	d00c      	beq.n	8005054 <UART_SetConfig+0x240>
 800503a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503e:	d815      	bhi.n	800506c <UART_SetConfig+0x258>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <UART_SetConfig+0x238>
 8005044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005048:	d008      	beq.n	800505c <UART_SetConfig+0x248>
 800504a:	e00f      	b.n	800506c <UART_SetConfig+0x258>
 800504c:	2300      	movs	r3, #0
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005052:	e052      	b.n	80050fa <UART_SetConfig+0x2e6>
 8005054:	2302      	movs	r3, #2
 8005056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505a:	e04e      	b.n	80050fa <UART_SetConfig+0x2e6>
 800505c:	2304      	movs	r3, #4
 800505e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005062:	e04a      	b.n	80050fa <UART_SetConfig+0x2e6>
 8005064:	2308      	movs	r3, #8
 8005066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506a:	e046      	b.n	80050fa <UART_SetConfig+0x2e6>
 800506c:	2310      	movs	r3, #16
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005072:	e042      	b.n	80050fa <UART_SetConfig+0x2e6>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <UART_SetConfig+0x2c4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d13a      	bne.n	80050f4 <UART_SetConfig+0x2e0>
 800507e:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <UART_SetConfig+0x2cc>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800508c:	d01a      	beq.n	80050c4 <UART_SetConfig+0x2b0>
 800508e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005092:	d81b      	bhi.n	80050cc <UART_SetConfig+0x2b8>
 8005094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005098:	d00c      	beq.n	80050b4 <UART_SetConfig+0x2a0>
 800509a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509e:	d815      	bhi.n	80050cc <UART_SetConfig+0x2b8>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <UART_SetConfig+0x298>
 80050a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a8:	d008      	beq.n	80050bc <UART_SetConfig+0x2a8>
 80050aa:	e00f      	b.n	80050cc <UART_SetConfig+0x2b8>
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b2:	e022      	b.n	80050fa <UART_SetConfig+0x2e6>
 80050b4:	2302      	movs	r3, #2
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ba:	e01e      	b.n	80050fa <UART_SetConfig+0x2e6>
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c2:	e01a      	b.n	80050fa <UART_SetConfig+0x2e6>
 80050c4:	2308      	movs	r3, #8
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ca:	e016      	b.n	80050fa <UART_SetConfig+0x2e6>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d2:	e012      	b.n	80050fa <UART_SetConfig+0x2e6>
 80050d4:	efff69f3 	.word	0xefff69f3
 80050d8:	40008000 	.word	0x40008000
 80050dc:	40013800 	.word	0x40013800
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40004400 	.word	0x40004400
 80050e8:	40004800 	.word	0x40004800
 80050ec:	40004c00 	.word	0x40004c00
 80050f0:	40005000 	.word	0x40005000
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a9f      	ldr	r2, [pc, #636]	; (800537c <UART_SetConfig+0x568>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d17a      	bne.n	80051fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005108:	2b08      	cmp	r3, #8
 800510a:	d824      	bhi.n	8005156 <UART_SetConfig+0x342>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <UART_SetConfig+0x300>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005139 	.word	0x08005139
 8005118:	08005157 	.word	0x08005157
 800511c:	08005141 	.word	0x08005141
 8005120:	08005157 	.word	0x08005157
 8005124:	08005147 	.word	0x08005147
 8005128:	08005157 	.word	0x08005157
 800512c:	08005157 	.word	0x08005157
 8005130:	08005157 	.word	0x08005157
 8005134:	0800514f 	.word	0x0800514f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005138:	f7fe ff8e 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 800513c:	61f8      	str	r0, [r7, #28]
        break;
 800513e:	e010      	b.n	8005162 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005140:	4b8f      	ldr	r3, [pc, #572]	; (8005380 <UART_SetConfig+0x56c>)
 8005142:	61fb      	str	r3, [r7, #28]
        break;
 8005144:	e00d      	b.n	8005162 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005146:	f7fe feef 	bl	8003f28 <HAL_RCC_GetSysClockFreq>
 800514a:	61f8      	str	r0, [r7, #28]
        break;
 800514c:	e009      	b.n	8005162 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005152:	61fb      	str	r3, [r7, #28]
        break;
 8005154:	e005      	b.n	8005162 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005160:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80fb 	beq.w	8005360 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	4413      	add	r3, r2
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	429a      	cmp	r2, r3
 8005178:	d305      	bcc.n	8005186 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	429a      	cmp	r2, r3
 8005184:	d903      	bls.n	800518e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800518c:	e0e8      	b.n	8005360 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2200      	movs	r2, #0
 8005192:	461c      	mov	r4, r3
 8005194:	4615      	mov	r5, r2
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	022b      	lsls	r3, r5, #8
 80051a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051a4:	0222      	lsls	r2, r4, #8
 80051a6:	68f9      	ldr	r1, [r7, #12]
 80051a8:	6849      	ldr	r1, [r1, #4]
 80051aa:	0849      	lsrs	r1, r1, #1
 80051ac:	2000      	movs	r0, #0
 80051ae:	4688      	mov	r8, r1
 80051b0:	4681      	mov	r9, r0
 80051b2:	eb12 0a08 	adds.w	sl, r2, r8
 80051b6:	eb43 0b09 	adc.w	fp, r3, r9
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051c8:	4650      	mov	r0, sl
 80051ca:	4659      	mov	r1, fp
 80051cc:	f7fb f850 	bl	8000270 <__aeabi_uldivmod>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4613      	mov	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051de:	d308      	bcc.n	80051f2 <UART_SetConfig+0x3de>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e6:	d204      	bcs.n	80051f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	e0b6      	b.n	8005360 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051f8:	e0b2      	b.n	8005360 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005202:	d15e      	bne.n	80052c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005204:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005208:	2b08      	cmp	r3, #8
 800520a:	d828      	bhi.n	800525e <UART_SetConfig+0x44a>
 800520c:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <UART_SetConfig+0x400>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005239 	.word	0x08005239
 8005218:	08005241 	.word	0x08005241
 800521c:	08005249 	.word	0x08005249
 8005220:	0800525f 	.word	0x0800525f
 8005224:	0800524f 	.word	0x0800524f
 8005228:	0800525f 	.word	0x0800525f
 800522c:	0800525f 	.word	0x0800525f
 8005230:	0800525f 	.word	0x0800525f
 8005234:	08005257 	.word	0x08005257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005238:	f7fe ff0e 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 800523c:	61f8      	str	r0, [r7, #28]
        break;
 800523e:	e014      	b.n	800526a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005240:	f7fe ff20 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 8005244:	61f8      	str	r0, [r7, #28]
        break;
 8005246:	e010      	b.n	800526a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005248:	4b4d      	ldr	r3, [pc, #308]	; (8005380 <UART_SetConfig+0x56c>)
 800524a:	61fb      	str	r3, [r7, #28]
        break;
 800524c:	e00d      	b.n	800526a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524e:	f7fe fe6b 	bl	8003f28 <HAL_RCC_GetSysClockFreq>
 8005252:	61f8      	str	r0, [r7, #28]
        break;
 8005254:	e009      	b.n	800526a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525a:	61fb      	str	r3, [r7, #28]
        break;
 800525c:	e005      	b.n	800526a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005268:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d077      	beq.n	8005360 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	005a      	lsls	r2, r3, #1
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	441a      	add	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b0f      	cmp	r3, #15
 800528a:	d916      	bls.n	80052ba <UART_SetConfig+0x4a6>
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005292:	d212      	bcs.n	80052ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f023 030f 	bic.w	r3, r3, #15
 800529c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	8afb      	ldrh	r3, [r7, #22]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	8afa      	ldrh	r2, [r7, #22]
 80052b6:	60da      	str	r2, [r3, #12]
 80052b8:	e052      	b.n	8005360 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052c0:	e04e      	b.n	8005360 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d827      	bhi.n	800531a <UART_SetConfig+0x506>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <UART_SetConfig+0x4bc>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	080052f5 	.word	0x080052f5
 80052d4:	080052fd 	.word	0x080052fd
 80052d8:	08005305 	.word	0x08005305
 80052dc:	0800531b 	.word	0x0800531b
 80052e0:	0800530b 	.word	0x0800530b
 80052e4:	0800531b 	.word	0x0800531b
 80052e8:	0800531b 	.word	0x0800531b
 80052ec:	0800531b 	.word	0x0800531b
 80052f0:	08005313 	.word	0x08005313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f4:	f7fe feb0 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 80052f8:	61f8      	str	r0, [r7, #28]
        break;
 80052fa:	e014      	b.n	8005326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052fc:	f7fe fec2 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 8005300:	61f8      	str	r0, [r7, #28]
        break;
 8005302:	e010      	b.n	8005326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005304:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <UART_SetConfig+0x56c>)
 8005306:	61fb      	str	r3, [r7, #28]
        break;
 8005308:	e00d      	b.n	8005326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800530a:	f7fe fe0d 	bl	8003f28 <HAL_RCC_GetSysClockFreq>
 800530e:	61f8      	str	r0, [r7, #28]
        break;
 8005310:	e009      	b.n	8005326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005316:	61fb      	str	r3, [r7, #28]
        break;
 8005318:	e005      	b.n	8005326 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005324:	bf00      	nop
    }

    if (pclk != 0U)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d019      	beq.n	8005360 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	085a      	lsrs	r2, r3, #1
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	441a      	add	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	fbb2 f3f3 	udiv	r3, r2, r3
 800533e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	d909      	bls.n	800535a <UART_SetConfig+0x546>
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534c:	d205      	bcs.n	800535a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60da      	str	r2, [r3, #12]
 8005358:	e002      	b.n	8005360 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800536c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005370:	4618      	mov	r0, r3
 8005372:	3728      	adds	r7, #40	; 0x28
 8005374:	46bd      	mov	sp, r7
 8005376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800537a:	bf00      	nop
 800537c:	40008000 	.word	0x40008000
 8005380:	00f42400 	.word	0x00f42400

08005384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	f003 0320 	and.w	r3, r3, #32
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01a      	beq.n	800549a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005482:	d10a      	bne.n	800549a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
  }
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054d8:	f7fc fa70 	bl	80019bc <HAL_GetTick>
 80054dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d10e      	bne.n	800550a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f82d 	bl	800555a <UART_WaitOnFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e023      	b.n	8005552 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b04      	cmp	r3, #4
 8005516:	d10e      	bne.n	8005536 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f817 	bl	800555a <UART_WaitOnFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e00d      	b.n	8005552 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b09c      	sub	sp, #112	; 0x70
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	4613      	mov	r3, r2
 8005568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556a:	e0a5      	b.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	f000 80a1 	beq.w	80056b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fc fa21 	bl	80019bc <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <UART_WaitOnFlagUntilTimeout+0x32>
 8005586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005588:	2b00      	cmp	r3, #0
 800558a:	d13e      	bne.n	800560a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800559a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055a0:	667b      	str	r3, [r7, #100]	; 0x64
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e6      	bne.n	800558c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3308      	adds	r3, #8
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	f023 0301 	bic.w	r3, r3, #1
 80055d4:	663b      	str	r3, [r7, #96]	; 0x60
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055de:	64ba      	str	r2, [r7, #72]	; 0x48
 80055e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e5      	bne.n	80055be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e067      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d04f      	beq.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005626:	d147      	bne.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005630:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
 8005652:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e6      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	613b      	str	r3, [r7, #16]
   return(result);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	66bb      	str	r3, [r7, #104]	; 0x68
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005684:	623a      	str	r2, [r7, #32]
 8005686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	69f9      	ldr	r1, [r7, #28]
 800568a:	6a3a      	ldr	r2, [r7, #32]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	61bb      	str	r3, [r7, #24]
   return(result);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e5      	bne.n	8005664 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e010      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4013      	ands	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	f43f af4a 	beq.w	800556c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3770      	adds	r7, #112	; 0x70
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e2:	b084      	sub	sp, #16
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	f107 001c 	add.w	r0, r7, #28
 80056f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fa6f 	bl	8005be4 <USB_CoreReset>
 8005706:	4603      	mov	r3, r0
 8005708:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800570a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
 800571c:	e005      	b.n	800572a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005736:	b004      	add	sp, #16
 8005738:	4770      	bx	lr

0800573a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f023 0201 	bic.w	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d115      	bne.n	80057aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800578a:	2001      	movs	r0, #1
 800578c:	f7fc f922 	bl	80019d4 <HAL_Delay>
      ms++;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3301      	adds	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fa16 	bl	8005bc8 <USB_GetMode>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d01e      	beq.n	80057e0 <USB_SetCurrentMode+0x84>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b31      	cmp	r3, #49	; 0x31
 80057a6:	d9f0      	bls.n	800578a <USB_SetCurrentMode+0x2e>
 80057a8:	e01a      	b.n	80057e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d115      	bne.n	80057dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057bc:	2001      	movs	r0, #1
 80057be:	f7fc f909 	bl	80019d4 <HAL_Delay>
      ms++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f9fd 	bl	8005bc8 <USB_GetMode>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <USB_SetCurrentMode+0x84>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b31      	cmp	r3, #49	; 0x31
 80057d8:	d9f0      	bls.n	80057bc <USB_SetCurrentMode+0x60>
 80057da:	e001      	b.n	80057e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e005      	b.n	80057ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b32      	cmp	r3, #50	; 0x32
 80057e4:	d101      	bne.n	80057ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057f4:	b084      	sub	sp, #16
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b086      	sub	sp, #24
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800580e:	2300      	movs	r3, #0
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	e009      	b.n	8005828 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	3340      	adds	r3, #64	; 0x40
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	2200      	movs	r2, #0
 8005820:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	3301      	adds	r3, #1
 8005826:	613b      	str	r3, [r7, #16]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	2b0e      	cmp	r3, #14
 800582c:	d9f2      	bls.n	8005814 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800582e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d11c      	bne.n	800586e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005842:	f043 0302 	orr.w	r3, r3, #2
 8005846:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	e005      	b.n	800587a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005880:	461a      	mov	r2, r3
 8005882:	2300      	movs	r3, #0
 8005884:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588c:	4619      	mov	r1, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005894:	461a      	mov	r2, r3
 8005896:	680b      	ldr	r3, [r1, #0]
 8005898:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800589a:	2103      	movs	r1, #3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f959 	bl	8005b54 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058a2:	2110      	movs	r1, #16
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f8f1 	bl	8005a8c <USB_FlushTxFifo>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f91d 	bl	8005af4 <USB_FlushRxFifo>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ca:	461a      	mov	r2, r3
 80058cc:	2300      	movs	r3, #0
 80058ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d6:	461a      	mov	r2, r3
 80058d8:	2300      	movs	r3, #0
 80058da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	461a      	mov	r2, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058e8:	2300      	movs	r3, #0
 80058ea:	613b      	str	r3, [r7, #16]
 80058ec:	e043      	b.n	8005976 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005904:	d118      	bne.n	8005938 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	461a      	mov	r2, r3
 800591a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e013      	b.n	800594a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592e:	461a      	mov	r2, r3
 8005930:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e008      	b.n	800594a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005944:	461a      	mov	r2, r3
 8005946:	2300      	movs	r3, #0
 8005948:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	461a      	mov	r2, r3
 8005958:	2300      	movs	r3, #0
 800595a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	461a      	mov	r2, r3
 800596a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800596e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	3301      	adds	r3, #1
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	429a      	cmp	r2, r3
 800597c:	d3b7      	bcc.n	80058ee <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800597e:	2300      	movs	r3, #0
 8005980:	613b      	str	r3, [r7, #16]
 8005982:	e043      	b.n	8005a0c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800599a:	d118      	bne.n	80059ce <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	461a      	mov	r2, r3
 80059b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	e013      	b.n	80059e0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	461a      	mov	r2, r3
 80059c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	e008      	b.n	80059e0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	461a      	mov	r2, r3
 80059dc:	2300      	movs	r3, #0
 80059de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	461a      	mov	r2, r3
 80059ee:	2300      	movs	r3, #0
 80059f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fe:	461a      	mov	r2, r3
 8005a00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d3b7      	bcc.n	8005984 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f043 0210 	orr.w	r2, r3, #16
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <USB_DevInit+0x294>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f043 0208 	orr.w	r2, r3, #8
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d107      	bne.n	8005a76 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a6e:	f043 0304 	orr.w	r3, r3, #4
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a82:	b004      	add	sp, #16
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	803c3800 	.word	0x803c3800

08005a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <USB_FlushTxFifo+0x64>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d901      	bls.n	8005aac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e01b      	b.n	8005ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	daf2      	bge.n	8005a9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	019b      	lsls	r3, r3, #6
 8005abc:	f043 0220 	orr.w	r2, r3, #32
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <USB_FlushTxFifo+0x64>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d901      	bls.n	8005ad6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e006      	b.n	8005ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d0f0      	beq.n	8005ac4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	00030d40 	.word	0x00030d40

08005af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a11      	ldr	r2, [pc, #68]	; (8005b50 <USB_FlushRxFifo+0x5c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e018      	b.n	8005b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	daf2      	bge.n	8005b00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2210      	movs	r2, #16
 8005b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4a08      	ldr	r2, [pc, #32]	; (8005b50 <USB_FlushRxFifo+0x5c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e006      	b.n	8005b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	d0f0      	beq.n	8005b24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	00030d40 	.word	0x00030d40

08005b54 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	68f9      	ldr	r1, [r7, #12]
 8005b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ba0:	f023 0303 	bic.w	r3, r3, #3
 8005ba4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bb4:	f043 0302 	orr.w	r3, r3, #2
 8005bb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <USB_CoreReset+0x64>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d901      	bls.n	8005c02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e01b      	b.n	8005c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	daf2      	bge.n	8005bf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f043 0201 	orr.w	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <USB_CoreReset+0x64>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d901      	bls.n	8005c2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e006      	b.n	8005c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d0f0      	beq.n	8005c1a <USB_CoreReset+0x36>

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	00030d40 	.word	0x00030d40

08005c4c <__errno>:
 8005c4c:	4b01      	ldr	r3, [pc, #4]	; (8005c54 <__errno+0x8>)
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20000278 	.word	0x20000278

08005c58 <__libc_init_array>:
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	4d0d      	ldr	r5, [pc, #52]	; (8005c90 <__libc_init_array+0x38>)
 8005c5c:	4c0d      	ldr	r4, [pc, #52]	; (8005c94 <__libc_init_array+0x3c>)
 8005c5e:	1b64      	subs	r4, r4, r5
 8005c60:	10a4      	asrs	r4, r4, #2
 8005c62:	2600      	movs	r6, #0
 8005c64:	42a6      	cmp	r6, r4
 8005c66:	d109      	bne.n	8005c7c <__libc_init_array+0x24>
 8005c68:	4d0b      	ldr	r5, [pc, #44]	; (8005c98 <__libc_init_array+0x40>)
 8005c6a:	4c0c      	ldr	r4, [pc, #48]	; (8005c9c <__libc_init_array+0x44>)
 8005c6c:	f000 fca2 	bl	80065b4 <_init>
 8005c70:	1b64      	subs	r4, r4, r5
 8005c72:	10a4      	asrs	r4, r4, #2
 8005c74:	2600      	movs	r6, #0
 8005c76:	42a6      	cmp	r6, r4
 8005c78:	d105      	bne.n	8005c86 <__libc_init_array+0x2e>
 8005c7a:	bd70      	pop	{r4, r5, r6, pc}
 8005c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c80:	4798      	blx	r3
 8005c82:	3601      	adds	r6, #1
 8005c84:	e7ee      	b.n	8005c64 <__libc_init_array+0xc>
 8005c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c8a:	4798      	blx	r3
 8005c8c:	3601      	adds	r6, #1
 8005c8e:	e7f2      	b.n	8005c76 <__libc_init_array+0x1e>
 8005c90:	08006670 	.word	0x08006670
 8005c94:	08006670 	.word	0x08006670
 8005c98:	08006670 	.word	0x08006670
 8005c9c:	08006674 	.word	0x08006674

08005ca0 <memset>:
 8005ca0:	4402      	add	r2, r0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d100      	bne.n	8005caa <memset+0xa>
 8005ca8:	4770      	bx	lr
 8005caa:	f803 1b01 	strb.w	r1, [r3], #1
 8005cae:	e7f9      	b.n	8005ca4 <memset+0x4>

08005cb0 <sniprintf>:
 8005cb0:	b40c      	push	{r2, r3}
 8005cb2:	b530      	push	{r4, r5, lr}
 8005cb4:	4b17      	ldr	r3, [pc, #92]	; (8005d14 <sniprintf+0x64>)
 8005cb6:	1e0c      	subs	r4, r1, #0
 8005cb8:	681d      	ldr	r5, [r3, #0]
 8005cba:	b09d      	sub	sp, #116	; 0x74
 8005cbc:	da08      	bge.n	8005cd0 <sniprintf+0x20>
 8005cbe:	238b      	movs	r3, #139	; 0x8b
 8005cc0:	602b      	str	r3, [r5, #0]
 8005cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc6:	b01d      	add	sp, #116	; 0x74
 8005cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ccc:	b002      	add	sp, #8
 8005cce:	4770      	bx	lr
 8005cd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005cd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005cd8:	bf14      	ite	ne
 8005cda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005cde:	4623      	moveq	r3, r4
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ce8:	9002      	str	r0, [sp, #8]
 8005cea:	9006      	str	r0, [sp, #24]
 8005cec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005cf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cf2:	ab21      	add	r3, sp, #132	; 0x84
 8005cf4:	a902      	add	r1, sp, #8
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	f000 f869 	bl	8005dd0 <_svfiprintf_r>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	bfbc      	itt	lt
 8005d02:	238b      	movlt	r3, #139	; 0x8b
 8005d04:	602b      	strlt	r3, [r5, #0]
 8005d06:	2c00      	cmp	r4, #0
 8005d08:	d0dd      	beq.n	8005cc6 <sniprintf+0x16>
 8005d0a:	9b02      	ldr	r3, [sp, #8]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e7d9      	b.n	8005cc6 <sniprintf+0x16>
 8005d12:	bf00      	nop
 8005d14:	20000278 	.word	0x20000278

08005d18 <__ssputs_r>:
 8005d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d1c:	688e      	ldr	r6, [r1, #8]
 8005d1e:	429e      	cmp	r6, r3
 8005d20:	4682      	mov	sl, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	4690      	mov	r8, r2
 8005d26:	461f      	mov	r7, r3
 8005d28:	d838      	bhi.n	8005d9c <__ssputs_r+0x84>
 8005d2a:	898a      	ldrh	r2, [r1, #12]
 8005d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d30:	d032      	beq.n	8005d98 <__ssputs_r+0x80>
 8005d32:	6825      	ldr	r5, [r4, #0]
 8005d34:	6909      	ldr	r1, [r1, #16]
 8005d36:	eba5 0901 	sub.w	r9, r5, r1
 8005d3a:	6965      	ldr	r5, [r4, #20]
 8005d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d44:	3301      	adds	r3, #1
 8005d46:	444b      	add	r3, r9
 8005d48:	106d      	asrs	r5, r5, #1
 8005d4a:	429d      	cmp	r5, r3
 8005d4c:	bf38      	it	cc
 8005d4e:	461d      	movcc	r5, r3
 8005d50:	0553      	lsls	r3, r2, #21
 8005d52:	d531      	bpl.n	8005db8 <__ssputs_r+0xa0>
 8005d54:	4629      	mov	r1, r5
 8005d56:	f000 fb63 	bl	8006420 <_malloc_r>
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	b950      	cbnz	r0, 8005d74 <__ssputs_r+0x5c>
 8005d5e:	230c      	movs	r3, #12
 8005d60:	f8ca 3000 	str.w	r3, [sl]
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d74:	6921      	ldr	r1, [r4, #16]
 8005d76:	464a      	mov	r2, r9
 8005d78:	f000 fabe 	bl	80062f8 <memcpy>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d86:	81a3      	strh	r3, [r4, #12]
 8005d88:	6126      	str	r6, [r4, #16]
 8005d8a:	6165      	str	r5, [r4, #20]
 8005d8c:	444e      	add	r6, r9
 8005d8e:	eba5 0509 	sub.w	r5, r5, r9
 8005d92:	6026      	str	r6, [r4, #0]
 8005d94:	60a5      	str	r5, [r4, #8]
 8005d96:	463e      	mov	r6, r7
 8005d98:	42be      	cmp	r6, r7
 8005d9a:	d900      	bls.n	8005d9e <__ssputs_r+0x86>
 8005d9c:	463e      	mov	r6, r7
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	4632      	mov	r2, r6
 8005da2:	4641      	mov	r1, r8
 8005da4:	f000 fab6 	bl	8006314 <memmove>
 8005da8:	68a3      	ldr	r3, [r4, #8]
 8005daa:	1b9b      	subs	r3, r3, r6
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	4433      	add	r3, r6
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	2000      	movs	r0, #0
 8005db6:	e7db      	b.n	8005d70 <__ssputs_r+0x58>
 8005db8:	462a      	mov	r2, r5
 8005dba:	f000 fba5 	bl	8006508 <_realloc_r>
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d1e1      	bne.n	8005d88 <__ssputs_r+0x70>
 8005dc4:	6921      	ldr	r1, [r4, #16]
 8005dc6:	4650      	mov	r0, sl
 8005dc8:	f000 fabe 	bl	8006348 <_free_r>
 8005dcc:	e7c7      	b.n	8005d5e <__ssputs_r+0x46>
	...

08005dd0 <_svfiprintf_r>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	4698      	mov	r8, r3
 8005dd6:	898b      	ldrh	r3, [r1, #12]
 8005dd8:	061b      	lsls	r3, r3, #24
 8005dda:	b09d      	sub	sp, #116	; 0x74
 8005ddc:	4607      	mov	r7, r0
 8005dde:	460d      	mov	r5, r1
 8005de0:	4614      	mov	r4, r2
 8005de2:	d50e      	bpl.n	8005e02 <_svfiprintf_r+0x32>
 8005de4:	690b      	ldr	r3, [r1, #16]
 8005de6:	b963      	cbnz	r3, 8005e02 <_svfiprintf_r+0x32>
 8005de8:	2140      	movs	r1, #64	; 0x40
 8005dea:	f000 fb19 	bl	8006420 <_malloc_r>
 8005dee:	6028      	str	r0, [r5, #0]
 8005df0:	6128      	str	r0, [r5, #16]
 8005df2:	b920      	cbnz	r0, 8005dfe <_svfiprintf_r+0x2e>
 8005df4:	230c      	movs	r3, #12
 8005df6:	603b      	str	r3, [r7, #0]
 8005df8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfc:	e0d1      	b.n	8005fa2 <_svfiprintf_r+0x1d2>
 8005dfe:	2340      	movs	r3, #64	; 0x40
 8005e00:	616b      	str	r3, [r5, #20]
 8005e02:	2300      	movs	r3, #0
 8005e04:	9309      	str	r3, [sp, #36]	; 0x24
 8005e06:	2320      	movs	r3, #32
 8005e08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e10:	2330      	movs	r3, #48	; 0x30
 8005e12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fbc <_svfiprintf_r+0x1ec>
 8005e16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e1a:	f04f 0901 	mov.w	r9, #1
 8005e1e:	4623      	mov	r3, r4
 8005e20:	469a      	mov	sl, r3
 8005e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e26:	b10a      	cbz	r2, 8005e2c <_svfiprintf_r+0x5c>
 8005e28:	2a25      	cmp	r2, #37	; 0x25
 8005e2a:	d1f9      	bne.n	8005e20 <_svfiprintf_r+0x50>
 8005e2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e30:	d00b      	beq.n	8005e4a <_svfiprintf_r+0x7a>
 8005e32:	465b      	mov	r3, fp
 8005e34:	4622      	mov	r2, r4
 8005e36:	4629      	mov	r1, r5
 8005e38:	4638      	mov	r0, r7
 8005e3a:	f7ff ff6d 	bl	8005d18 <__ssputs_r>
 8005e3e:	3001      	adds	r0, #1
 8005e40:	f000 80aa 	beq.w	8005f98 <_svfiprintf_r+0x1c8>
 8005e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e46:	445a      	add	r2, fp
 8005e48:	9209      	str	r2, [sp, #36]	; 0x24
 8005e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80a2 	beq.w	8005f98 <_svfiprintf_r+0x1c8>
 8005e54:	2300      	movs	r3, #0
 8005e56:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e5e:	f10a 0a01 	add.w	sl, sl, #1
 8005e62:	9304      	str	r3, [sp, #16]
 8005e64:	9307      	str	r3, [sp, #28]
 8005e66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e6a:	931a      	str	r3, [sp, #104]	; 0x68
 8005e6c:	4654      	mov	r4, sl
 8005e6e:	2205      	movs	r2, #5
 8005e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e74:	4851      	ldr	r0, [pc, #324]	; (8005fbc <_svfiprintf_r+0x1ec>)
 8005e76:	f7fa f9ab 	bl	80001d0 <memchr>
 8005e7a:	9a04      	ldr	r2, [sp, #16]
 8005e7c:	b9d8      	cbnz	r0, 8005eb6 <_svfiprintf_r+0xe6>
 8005e7e:	06d0      	lsls	r0, r2, #27
 8005e80:	bf44      	itt	mi
 8005e82:	2320      	movmi	r3, #32
 8005e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e88:	0711      	lsls	r1, r2, #28
 8005e8a:	bf44      	itt	mi
 8005e8c:	232b      	movmi	r3, #43	; 0x2b
 8005e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e92:	f89a 3000 	ldrb.w	r3, [sl]
 8005e96:	2b2a      	cmp	r3, #42	; 0x2a
 8005e98:	d015      	beq.n	8005ec6 <_svfiprintf_r+0xf6>
 8005e9a:	9a07      	ldr	r2, [sp, #28]
 8005e9c:	4654      	mov	r4, sl
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f04f 0c0a 	mov.w	ip, #10
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eaa:	3b30      	subs	r3, #48	; 0x30
 8005eac:	2b09      	cmp	r3, #9
 8005eae:	d94e      	bls.n	8005f4e <_svfiprintf_r+0x17e>
 8005eb0:	b1b0      	cbz	r0, 8005ee0 <_svfiprintf_r+0x110>
 8005eb2:	9207      	str	r2, [sp, #28]
 8005eb4:	e014      	b.n	8005ee0 <_svfiprintf_r+0x110>
 8005eb6:	eba0 0308 	sub.w	r3, r0, r8
 8005eba:	fa09 f303 	lsl.w	r3, r9, r3
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	9304      	str	r3, [sp, #16]
 8005ec2:	46a2      	mov	sl, r4
 8005ec4:	e7d2      	b.n	8005e6c <_svfiprintf_r+0x9c>
 8005ec6:	9b03      	ldr	r3, [sp, #12]
 8005ec8:	1d19      	adds	r1, r3, #4
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	9103      	str	r1, [sp, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bfbb      	ittet	lt
 8005ed2:	425b      	neglt	r3, r3
 8005ed4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ed8:	9307      	strge	r3, [sp, #28]
 8005eda:	9307      	strlt	r3, [sp, #28]
 8005edc:	bfb8      	it	lt
 8005ede:	9204      	strlt	r2, [sp, #16]
 8005ee0:	7823      	ldrb	r3, [r4, #0]
 8005ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ee4:	d10c      	bne.n	8005f00 <_svfiprintf_r+0x130>
 8005ee6:	7863      	ldrb	r3, [r4, #1]
 8005ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8005eea:	d135      	bne.n	8005f58 <_svfiprintf_r+0x188>
 8005eec:	9b03      	ldr	r3, [sp, #12]
 8005eee:	1d1a      	adds	r2, r3, #4
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	9203      	str	r2, [sp, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bfb8      	it	lt
 8005ef8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005efc:	3402      	adds	r4, #2
 8005efe:	9305      	str	r3, [sp, #20]
 8005f00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fcc <_svfiprintf_r+0x1fc>
 8005f04:	7821      	ldrb	r1, [r4, #0]
 8005f06:	2203      	movs	r2, #3
 8005f08:	4650      	mov	r0, sl
 8005f0a:	f7fa f961 	bl	80001d0 <memchr>
 8005f0e:	b140      	cbz	r0, 8005f22 <_svfiprintf_r+0x152>
 8005f10:	2340      	movs	r3, #64	; 0x40
 8005f12:	eba0 000a 	sub.w	r0, r0, sl
 8005f16:	fa03 f000 	lsl.w	r0, r3, r0
 8005f1a:	9b04      	ldr	r3, [sp, #16]
 8005f1c:	4303      	orrs	r3, r0
 8005f1e:	3401      	adds	r4, #1
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f26:	4826      	ldr	r0, [pc, #152]	; (8005fc0 <_svfiprintf_r+0x1f0>)
 8005f28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f2c:	2206      	movs	r2, #6
 8005f2e:	f7fa f94f 	bl	80001d0 <memchr>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d038      	beq.n	8005fa8 <_svfiprintf_r+0x1d8>
 8005f36:	4b23      	ldr	r3, [pc, #140]	; (8005fc4 <_svfiprintf_r+0x1f4>)
 8005f38:	bb1b      	cbnz	r3, 8005f82 <_svfiprintf_r+0x1b2>
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	3307      	adds	r3, #7
 8005f3e:	f023 0307 	bic.w	r3, r3, #7
 8005f42:	3308      	adds	r3, #8
 8005f44:	9303      	str	r3, [sp, #12]
 8005f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f48:	4433      	add	r3, r6
 8005f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f4c:	e767      	b.n	8005e1e <_svfiprintf_r+0x4e>
 8005f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f52:	460c      	mov	r4, r1
 8005f54:	2001      	movs	r0, #1
 8005f56:	e7a5      	b.n	8005ea4 <_svfiprintf_r+0xd4>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	3401      	adds	r4, #1
 8005f5c:	9305      	str	r3, [sp, #20]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	f04f 0c0a 	mov.w	ip, #10
 8005f64:	4620      	mov	r0, r4
 8005f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f6a:	3a30      	subs	r2, #48	; 0x30
 8005f6c:	2a09      	cmp	r2, #9
 8005f6e:	d903      	bls.n	8005f78 <_svfiprintf_r+0x1a8>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0c5      	beq.n	8005f00 <_svfiprintf_r+0x130>
 8005f74:	9105      	str	r1, [sp, #20]
 8005f76:	e7c3      	b.n	8005f00 <_svfiprintf_r+0x130>
 8005f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7f0      	b.n	8005f64 <_svfiprintf_r+0x194>
 8005f82:	ab03      	add	r3, sp, #12
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	462a      	mov	r2, r5
 8005f88:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <_svfiprintf_r+0x1f8>)
 8005f8a:	a904      	add	r1, sp, #16
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f3af 8000 	nop.w
 8005f92:	1c42      	adds	r2, r0, #1
 8005f94:	4606      	mov	r6, r0
 8005f96:	d1d6      	bne.n	8005f46 <_svfiprintf_r+0x176>
 8005f98:	89ab      	ldrh	r3, [r5, #12]
 8005f9a:	065b      	lsls	r3, r3, #25
 8005f9c:	f53f af2c 	bmi.w	8005df8 <_svfiprintf_r+0x28>
 8005fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fa2:	b01d      	add	sp, #116	; 0x74
 8005fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa8:	ab03      	add	r3, sp, #12
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	462a      	mov	r2, r5
 8005fae:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <_svfiprintf_r+0x1f8>)
 8005fb0:	a904      	add	r1, sp, #16
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	f000 f87a 	bl	80060ac <_printf_i>
 8005fb8:	e7eb      	b.n	8005f92 <_svfiprintf_r+0x1c2>
 8005fba:	bf00      	nop
 8005fbc:	08006634 	.word	0x08006634
 8005fc0:	0800663e 	.word	0x0800663e
 8005fc4:	00000000 	.word	0x00000000
 8005fc8:	08005d19 	.word	0x08005d19
 8005fcc:	0800663a 	.word	0x0800663a

08005fd0 <_printf_common>:
 8005fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	4699      	mov	r9, r3
 8005fd8:	688a      	ldr	r2, [r1, #8]
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bfb8      	it	lt
 8005fe4:	4613      	movlt	r3, r2
 8005fe6:	6033      	str	r3, [r6, #0]
 8005fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fec:	4607      	mov	r7, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	b10a      	cbz	r2, 8005ff6 <_printf_common+0x26>
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	0699      	lsls	r1, r3, #26
 8005ffa:	bf42      	ittt	mi
 8005ffc:	6833      	ldrmi	r3, [r6, #0]
 8005ffe:	3302      	addmi	r3, #2
 8006000:	6033      	strmi	r3, [r6, #0]
 8006002:	6825      	ldr	r5, [r4, #0]
 8006004:	f015 0506 	ands.w	r5, r5, #6
 8006008:	d106      	bne.n	8006018 <_printf_common+0x48>
 800600a:	f104 0a19 	add.w	sl, r4, #25
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	6832      	ldr	r2, [r6, #0]
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	42ab      	cmp	r3, r5
 8006016:	dc26      	bgt.n	8006066 <_printf_common+0x96>
 8006018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800601c:	1e13      	subs	r3, r2, #0
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	bf18      	it	ne
 8006022:	2301      	movne	r3, #1
 8006024:	0692      	lsls	r2, r2, #26
 8006026:	d42b      	bmi.n	8006080 <_printf_common+0xb0>
 8006028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800602c:	4649      	mov	r1, r9
 800602e:	4638      	mov	r0, r7
 8006030:	47c0      	blx	r8
 8006032:	3001      	adds	r0, #1
 8006034:	d01e      	beq.n	8006074 <_printf_common+0xa4>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	68e5      	ldr	r5, [r4, #12]
 800603a:	6832      	ldr	r2, [r6, #0]
 800603c:	f003 0306 	and.w	r3, r3, #6
 8006040:	2b04      	cmp	r3, #4
 8006042:	bf08      	it	eq
 8006044:	1aad      	subeq	r5, r5, r2
 8006046:	68a3      	ldr	r3, [r4, #8]
 8006048:	6922      	ldr	r2, [r4, #16]
 800604a:	bf0c      	ite	eq
 800604c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006050:	2500      	movne	r5, #0
 8006052:	4293      	cmp	r3, r2
 8006054:	bfc4      	itt	gt
 8006056:	1a9b      	subgt	r3, r3, r2
 8006058:	18ed      	addgt	r5, r5, r3
 800605a:	2600      	movs	r6, #0
 800605c:	341a      	adds	r4, #26
 800605e:	42b5      	cmp	r5, r6
 8006060:	d11a      	bne.n	8006098 <_printf_common+0xc8>
 8006062:	2000      	movs	r0, #0
 8006064:	e008      	b.n	8006078 <_printf_common+0xa8>
 8006066:	2301      	movs	r3, #1
 8006068:	4652      	mov	r2, sl
 800606a:	4649      	mov	r1, r9
 800606c:	4638      	mov	r0, r7
 800606e:	47c0      	blx	r8
 8006070:	3001      	adds	r0, #1
 8006072:	d103      	bne.n	800607c <_printf_common+0xac>
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	3501      	adds	r5, #1
 800607e:	e7c6      	b.n	800600e <_printf_common+0x3e>
 8006080:	18e1      	adds	r1, r4, r3
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	2030      	movs	r0, #48	; 0x30
 8006086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800608a:	4422      	add	r2, r4
 800608c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006094:	3302      	adds	r3, #2
 8006096:	e7c7      	b.n	8006028 <_printf_common+0x58>
 8006098:	2301      	movs	r3, #1
 800609a:	4622      	mov	r2, r4
 800609c:	4649      	mov	r1, r9
 800609e:	4638      	mov	r0, r7
 80060a0:	47c0      	blx	r8
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0e6      	beq.n	8006074 <_printf_common+0xa4>
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7d9      	b.n	800605e <_printf_common+0x8e>
	...

080060ac <_printf_i>:
 80060ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	7e0f      	ldrb	r7, [r1, #24]
 80060b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060b4:	2f78      	cmp	r7, #120	; 0x78
 80060b6:	4691      	mov	r9, r2
 80060b8:	4680      	mov	r8, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	469a      	mov	sl, r3
 80060be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060c2:	d807      	bhi.n	80060d4 <_printf_i+0x28>
 80060c4:	2f62      	cmp	r7, #98	; 0x62
 80060c6:	d80a      	bhi.n	80060de <_printf_i+0x32>
 80060c8:	2f00      	cmp	r7, #0
 80060ca:	f000 80d8 	beq.w	800627e <_printf_i+0x1d2>
 80060ce:	2f58      	cmp	r7, #88	; 0x58
 80060d0:	f000 80a3 	beq.w	800621a <_printf_i+0x16e>
 80060d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060dc:	e03a      	b.n	8006154 <_printf_i+0xa8>
 80060de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060e2:	2b15      	cmp	r3, #21
 80060e4:	d8f6      	bhi.n	80060d4 <_printf_i+0x28>
 80060e6:	a101      	add	r1, pc, #4	; (adr r1, 80060ec <_printf_i+0x40>)
 80060e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060ec:	08006145 	.word	0x08006145
 80060f0:	08006159 	.word	0x08006159
 80060f4:	080060d5 	.word	0x080060d5
 80060f8:	080060d5 	.word	0x080060d5
 80060fc:	080060d5 	.word	0x080060d5
 8006100:	080060d5 	.word	0x080060d5
 8006104:	08006159 	.word	0x08006159
 8006108:	080060d5 	.word	0x080060d5
 800610c:	080060d5 	.word	0x080060d5
 8006110:	080060d5 	.word	0x080060d5
 8006114:	080060d5 	.word	0x080060d5
 8006118:	08006265 	.word	0x08006265
 800611c:	08006189 	.word	0x08006189
 8006120:	08006247 	.word	0x08006247
 8006124:	080060d5 	.word	0x080060d5
 8006128:	080060d5 	.word	0x080060d5
 800612c:	08006287 	.word	0x08006287
 8006130:	080060d5 	.word	0x080060d5
 8006134:	08006189 	.word	0x08006189
 8006138:	080060d5 	.word	0x080060d5
 800613c:	080060d5 	.word	0x080060d5
 8006140:	0800624f 	.word	0x0800624f
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	602a      	str	r2, [r5, #0]
 800614c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006154:	2301      	movs	r3, #1
 8006156:	e0a3      	b.n	80062a0 <_printf_i+0x1f4>
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	6829      	ldr	r1, [r5, #0]
 800615c:	0606      	lsls	r6, r0, #24
 800615e:	f101 0304 	add.w	r3, r1, #4
 8006162:	d50a      	bpl.n	800617a <_printf_i+0xce>
 8006164:	680e      	ldr	r6, [r1, #0]
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	2e00      	cmp	r6, #0
 800616a:	da03      	bge.n	8006174 <_printf_i+0xc8>
 800616c:	232d      	movs	r3, #45	; 0x2d
 800616e:	4276      	negs	r6, r6
 8006170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006174:	485e      	ldr	r0, [pc, #376]	; (80062f0 <_printf_i+0x244>)
 8006176:	230a      	movs	r3, #10
 8006178:	e019      	b.n	80061ae <_printf_i+0x102>
 800617a:	680e      	ldr	r6, [r1, #0]
 800617c:	602b      	str	r3, [r5, #0]
 800617e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006182:	bf18      	it	ne
 8006184:	b236      	sxthne	r6, r6
 8006186:	e7ef      	b.n	8006168 <_printf_i+0xbc>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	6820      	ldr	r0, [r4, #0]
 800618c:	1d19      	adds	r1, r3, #4
 800618e:	6029      	str	r1, [r5, #0]
 8006190:	0601      	lsls	r1, r0, #24
 8006192:	d501      	bpl.n	8006198 <_printf_i+0xec>
 8006194:	681e      	ldr	r6, [r3, #0]
 8006196:	e002      	b.n	800619e <_printf_i+0xf2>
 8006198:	0646      	lsls	r6, r0, #25
 800619a:	d5fb      	bpl.n	8006194 <_printf_i+0xe8>
 800619c:	881e      	ldrh	r6, [r3, #0]
 800619e:	4854      	ldr	r0, [pc, #336]	; (80062f0 <_printf_i+0x244>)
 80061a0:	2f6f      	cmp	r7, #111	; 0x6f
 80061a2:	bf0c      	ite	eq
 80061a4:	2308      	moveq	r3, #8
 80061a6:	230a      	movne	r3, #10
 80061a8:	2100      	movs	r1, #0
 80061aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061ae:	6865      	ldr	r5, [r4, #4]
 80061b0:	60a5      	str	r5, [r4, #8]
 80061b2:	2d00      	cmp	r5, #0
 80061b4:	bfa2      	ittt	ge
 80061b6:	6821      	ldrge	r1, [r4, #0]
 80061b8:	f021 0104 	bicge.w	r1, r1, #4
 80061bc:	6021      	strge	r1, [r4, #0]
 80061be:	b90e      	cbnz	r6, 80061c4 <_printf_i+0x118>
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	d04d      	beq.n	8006260 <_printf_i+0x1b4>
 80061c4:	4615      	mov	r5, r2
 80061c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80061ca:	fb03 6711 	mls	r7, r3, r1, r6
 80061ce:	5dc7      	ldrb	r7, [r0, r7]
 80061d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061d4:	4637      	mov	r7, r6
 80061d6:	42bb      	cmp	r3, r7
 80061d8:	460e      	mov	r6, r1
 80061da:	d9f4      	bls.n	80061c6 <_printf_i+0x11a>
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d10b      	bne.n	80061f8 <_printf_i+0x14c>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	07de      	lsls	r6, r3, #31
 80061e4:	d508      	bpl.n	80061f8 <_printf_i+0x14c>
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	6861      	ldr	r1, [r4, #4]
 80061ea:	4299      	cmp	r1, r3
 80061ec:	bfde      	ittt	le
 80061ee:	2330      	movle	r3, #48	; 0x30
 80061f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061f8:	1b52      	subs	r2, r2, r5
 80061fa:	6122      	str	r2, [r4, #16]
 80061fc:	f8cd a000 	str.w	sl, [sp]
 8006200:	464b      	mov	r3, r9
 8006202:	aa03      	add	r2, sp, #12
 8006204:	4621      	mov	r1, r4
 8006206:	4640      	mov	r0, r8
 8006208:	f7ff fee2 	bl	8005fd0 <_printf_common>
 800620c:	3001      	adds	r0, #1
 800620e:	d14c      	bne.n	80062aa <_printf_i+0x1fe>
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	b004      	add	sp, #16
 8006216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621a:	4835      	ldr	r0, [pc, #212]	; (80062f0 <_printf_i+0x244>)
 800621c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006220:	6829      	ldr	r1, [r5, #0]
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	f851 6b04 	ldr.w	r6, [r1], #4
 8006228:	6029      	str	r1, [r5, #0]
 800622a:	061d      	lsls	r5, r3, #24
 800622c:	d514      	bpl.n	8006258 <_printf_i+0x1ac>
 800622e:	07df      	lsls	r7, r3, #31
 8006230:	bf44      	itt	mi
 8006232:	f043 0320 	orrmi.w	r3, r3, #32
 8006236:	6023      	strmi	r3, [r4, #0]
 8006238:	b91e      	cbnz	r6, 8006242 <_printf_i+0x196>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f023 0320 	bic.w	r3, r3, #32
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	2310      	movs	r3, #16
 8006244:	e7b0      	b.n	80061a8 <_printf_i+0xfc>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	f043 0320 	orr.w	r3, r3, #32
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	2378      	movs	r3, #120	; 0x78
 8006250:	4828      	ldr	r0, [pc, #160]	; (80062f4 <_printf_i+0x248>)
 8006252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006256:	e7e3      	b.n	8006220 <_printf_i+0x174>
 8006258:	0659      	lsls	r1, r3, #25
 800625a:	bf48      	it	mi
 800625c:	b2b6      	uxthmi	r6, r6
 800625e:	e7e6      	b.n	800622e <_printf_i+0x182>
 8006260:	4615      	mov	r5, r2
 8006262:	e7bb      	b.n	80061dc <_printf_i+0x130>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	6826      	ldr	r6, [r4, #0]
 8006268:	6961      	ldr	r1, [r4, #20]
 800626a:	1d18      	adds	r0, r3, #4
 800626c:	6028      	str	r0, [r5, #0]
 800626e:	0635      	lsls	r5, r6, #24
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	d501      	bpl.n	8006278 <_printf_i+0x1cc>
 8006274:	6019      	str	r1, [r3, #0]
 8006276:	e002      	b.n	800627e <_printf_i+0x1d2>
 8006278:	0670      	lsls	r0, r6, #25
 800627a:	d5fb      	bpl.n	8006274 <_printf_i+0x1c8>
 800627c:	8019      	strh	r1, [r3, #0]
 800627e:	2300      	movs	r3, #0
 8006280:	6123      	str	r3, [r4, #16]
 8006282:	4615      	mov	r5, r2
 8006284:	e7ba      	b.n	80061fc <_printf_i+0x150>
 8006286:	682b      	ldr	r3, [r5, #0]
 8006288:	1d1a      	adds	r2, r3, #4
 800628a:	602a      	str	r2, [r5, #0]
 800628c:	681d      	ldr	r5, [r3, #0]
 800628e:	6862      	ldr	r2, [r4, #4]
 8006290:	2100      	movs	r1, #0
 8006292:	4628      	mov	r0, r5
 8006294:	f7f9 ff9c 	bl	80001d0 <memchr>
 8006298:	b108      	cbz	r0, 800629e <_printf_i+0x1f2>
 800629a:	1b40      	subs	r0, r0, r5
 800629c:	6060      	str	r0, [r4, #4]
 800629e:	6863      	ldr	r3, [r4, #4]
 80062a0:	6123      	str	r3, [r4, #16]
 80062a2:	2300      	movs	r3, #0
 80062a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a8:	e7a8      	b.n	80061fc <_printf_i+0x150>
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	462a      	mov	r2, r5
 80062ae:	4649      	mov	r1, r9
 80062b0:	4640      	mov	r0, r8
 80062b2:	47d0      	blx	sl
 80062b4:	3001      	adds	r0, #1
 80062b6:	d0ab      	beq.n	8006210 <_printf_i+0x164>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	079b      	lsls	r3, r3, #30
 80062bc:	d413      	bmi.n	80062e6 <_printf_i+0x23a>
 80062be:	68e0      	ldr	r0, [r4, #12]
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	4298      	cmp	r0, r3
 80062c4:	bfb8      	it	lt
 80062c6:	4618      	movlt	r0, r3
 80062c8:	e7a4      	b.n	8006214 <_printf_i+0x168>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4632      	mov	r2, r6
 80062ce:	4649      	mov	r1, r9
 80062d0:	4640      	mov	r0, r8
 80062d2:	47d0      	blx	sl
 80062d4:	3001      	adds	r0, #1
 80062d6:	d09b      	beq.n	8006210 <_printf_i+0x164>
 80062d8:	3501      	adds	r5, #1
 80062da:	68e3      	ldr	r3, [r4, #12]
 80062dc:	9903      	ldr	r1, [sp, #12]
 80062de:	1a5b      	subs	r3, r3, r1
 80062e0:	42ab      	cmp	r3, r5
 80062e2:	dcf2      	bgt.n	80062ca <_printf_i+0x21e>
 80062e4:	e7eb      	b.n	80062be <_printf_i+0x212>
 80062e6:	2500      	movs	r5, #0
 80062e8:	f104 0619 	add.w	r6, r4, #25
 80062ec:	e7f5      	b.n	80062da <_printf_i+0x22e>
 80062ee:	bf00      	nop
 80062f0:	08006645 	.word	0x08006645
 80062f4:	08006656 	.word	0x08006656

080062f8 <memcpy>:
 80062f8:	440a      	add	r2, r1
 80062fa:	4291      	cmp	r1, r2
 80062fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006300:	d100      	bne.n	8006304 <memcpy+0xc>
 8006302:	4770      	bx	lr
 8006304:	b510      	push	{r4, lr}
 8006306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800630a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800630e:	4291      	cmp	r1, r2
 8006310:	d1f9      	bne.n	8006306 <memcpy+0xe>
 8006312:	bd10      	pop	{r4, pc}

08006314 <memmove>:
 8006314:	4288      	cmp	r0, r1
 8006316:	b510      	push	{r4, lr}
 8006318:	eb01 0402 	add.w	r4, r1, r2
 800631c:	d902      	bls.n	8006324 <memmove+0x10>
 800631e:	4284      	cmp	r4, r0
 8006320:	4623      	mov	r3, r4
 8006322:	d807      	bhi.n	8006334 <memmove+0x20>
 8006324:	1e43      	subs	r3, r0, #1
 8006326:	42a1      	cmp	r1, r4
 8006328:	d008      	beq.n	800633c <memmove+0x28>
 800632a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800632e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006332:	e7f8      	b.n	8006326 <memmove+0x12>
 8006334:	4402      	add	r2, r0
 8006336:	4601      	mov	r1, r0
 8006338:	428a      	cmp	r2, r1
 800633a:	d100      	bne.n	800633e <memmove+0x2a>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006346:	e7f7      	b.n	8006338 <memmove+0x24>

08006348 <_free_r>:
 8006348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800634a:	2900      	cmp	r1, #0
 800634c:	d044      	beq.n	80063d8 <_free_r+0x90>
 800634e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006352:	9001      	str	r0, [sp, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f1a1 0404 	sub.w	r4, r1, #4
 800635a:	bfb8      	it	lt
 800635c:	18e4      	addlt	r4, r4, r3
 800635e:	f000 f913 	bl	8006588 <__malloc_lock>
 8006362:	4a1e      	ldr	r2, [pc, #120]	; (80063dc <_free_r+0x94>)
 8006364:	9801      	ldr	r0, [sp, #4]
 8006366:	6813      	ldr	r3, [r2, #0]
 8006368:	b933      	cbnz	r3, 8006378 <_free_r+0x30>
 800636a:	6063      	str	r3, [r4, #4]
 800636c:	6014      	str	r4, [r2, #0]
 800636e:	b003      	add	sp, #12
 8006370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006374:	f000 b90e 	b.w	8006594 <__malloc_unlock>
 8006378:	42a3      	cmp	r3, r4
 800637a:	d908      	bls.n	800638e <_free_r+0x46>
 800637c:	6825      	ldr	r5, [r4, #0]
 800637e:	1961      	adds	r1, r4, r5
 8006380:	428b      	cmp	r3, r1
 8006382:	bf01      	itttt	eq
 8006384:	6819      	ldreq	r1, [r3, #0]
 8006386:	685b      	ldreq	r3, [r3, #4]
 8006388:	1949      	addeq	r1, r1, r5
 800638a:	6021      	streq	r1, [r4, #0]
 800638c:	e7ed      	b.n	800636a <_free_r+0x22>
 800638e:	461a      	mov	r2, r3
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	b10b      	cbz	r3, 8006398 <_free_r+0x50>
 8006394:	42a3      	cmp	r3, r4
 8006396:	d9fa      	bls.n	800638e <_free_r+0x46>
 8006398:	6811      	ldr	r1, [r2, #0]
 800639a:	1855      	adds	r5, r2, r1
 800639c:	42a5      	cmp	r5, r4
 800639e:	d10b      	bne.n	80063b8 <_free_r+0x70>
 80063a0:	6824      	ldr	r4, [r4, #0]
 80063a2:	4421      	add	r1, r4
 80063a4:	1854      	adds	r4, r2, r1
 80063a6:	42a3      	cmp	r3, r4
 80063a8:	6011      	str	r1, [r2, #0]
 80063aa:	d1e0      	bne.n	800636e <_free_r+0x26>
 80063ac:	681c      	ldr	r4, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	6053      	str	r3, [r2, #4]
 80063b2:	4421      	add	r1, r4
 80063b4:	6011      	str	r1, [r2, #0]
 80063b6:	e7da      	b.n	800636e <_free_r+0x26>
 80063b8:	d902      	bls.n	80063c0 <_free_r+0x78>
 80063ba:	230c      	movs	r3, #12
 80063bc:	6003      	str	r3, [r0, #0]
 80063be:	e7d6      	b.n	800636e <_free_r+0x26>
 80063c0:	6825      	ldr	r5, [r4, #0]
 80063c2:	1961      	adds	r1, r4, r5
 80063c4:	428b      	cmp	r3, r1
 80063c6:	bf04      	itt	eq
 80063c8:	6819      	ldreq	r1, [r3, #0]
 80063ca:	685b      	ldreq	r3, [r3, #4]
 80063cc:	6063      	str	r3, [r4, #4]
 80063ce:	bf04      	itt	eq
 80063d0:	1949      	addeq	r1, r1, r5
 80063d2:	6021      	streq	r1, [r4, #0]
 80063d4:	6054      	str	r4, [r2, #4]
 80063d6:	e7ca      	b.n	800636e <_free_r+0x26>
 80063d8:	b003      	add	sp, #12
 80063da:	bd30      	pop	{r4, r5, pc}
 80063dc:	20000b28 	.word	0x20000b28

080063e0 <sbrk_aligned>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	4e0e      	ldr	r6, [pc, #56]	; (800641c <sbrk_aligned+0x3c>)
 80063e4:	460c      	mov	r4, r1
 80063e6:	6831      	ldr	r1, [r6, #0]
 80063e8:	4605      	mov	r5, r0
 80063ea:	b911      	cbnz	r1, 80063f2 <sbrk_aligned+0x12>
 80063ec:	f000 f8bc 	bl	8006568 <_sbrk_r>
 80063f0:	6030      	str	r0, [r6, #0]
 80063f2:	4621      	mov	r1, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 f8b7 	bl	8006568 <_sbrk_r>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d00a      	beq.n	8006414 <sbrk_aligned+0x34>
 80063fe:	1cc4      	adds	r4, r0, #3
 8006400:	f024 0403 	bic.w	r4, r4, #3
 8006404:	42a0      	cmp	r0, r4
 8006406:	d007      	beq.n	8006418 <sbrk_aligned+0x38>
 8006408:	1a21      	subs	r1, r4, r0
 800640a:	4628      	mov	r0, r5
 800640c:	f000 f8ac 	bl	8006568 <_sbrk_r>
 8006410:	3001      	adds	r0, #1
 8006412:	d101      	bne.n	8006418 <sbrk_aligned+0x38>
 8006414:	f04f 34ff 	mov.w	r4, #4294967295
 8006418:	4620      	mov	r0, r4
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	20000b2c 	.word	0x20000b2c

08006420 <_malloc_r>:
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	1ccd      	adds	r5, r1, #3
 8006426:	f025 0503 	bic.w	r5, r5, #3
 800642a:	3508      	adds	r5, #8
 800642c:	2d0c      	cmp	r5, #12
 800642e:	bf38      	it	cc
 8006430:	250c      	movcc	r5, #12
 8006432:	2d00      	cmp	r5, #0
 8006434:	4607      	mov	r7, r0
 8006436:	db01      	blt.n	800643c <_malloc_r+0x1c>
 8006438:	42a9      	cmp	r1, r5
 800643a:	d905      	bls.n	8006448 <_malloc_r+0x28>
 800643c:	230c      	movs	r3, #12
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	2600      	movs	r6, #0
 8006442:	4630      	mov	r0, r6
 8006444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006448:	4e2e      	ldr	r6, [pc, #184]	; (8006504 <_malloc_r+0xe4>)
 800644a:	f000 f89d 	bl	8006588 <__malloc_lock>
 800644e:	6833      	ldr	r3, [r6, #0]
 8006450:	461c      	mov	r4, r3
 8006452:	bb34      	cbnz	r4, 80064a2 <_malloc_r+0x82>
 8006454:	4629      	mov	r1, r5
 8006456:	4638      	mov	r0, r7
 8006458:	f7ff ffc2 	bl	80063e0 <sbrk_aligned>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	4604      	mov	r4, r0
 8006460:	d14d      	bne.n	80064fe <_malloc_r+0xde>
 8006462:	6834      	ldr	r4, [r6, #0]
 8006464:	4626      	mov	r6, r4
 8006466:	2e00      	cmp	r6, #0
 8006468:	d140      	bne.n	80064ec <_malloc_r+0xcc>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	4631      	mov	r1, r6
 800646e:	4638      	mov	r0, r7
 8006470:	eb04 0803 	add.w	r8, r4, r3
 8006474:	f000 f878 	bl	8006568 <_sbrk_r>
 8006478:	4580      	cmp	r8, r0
 800647a:	d13a      	bne.n	80064f2 <_malloc_r+0xd2>
 800647c:	6821      	ldr	r1, [r4, #0]
 800647e:	3503      	adds	r5, #3
 8006480:	1a6d      	subs	r5, r5, r1
 8006482:	f025 0503 	bic.w	r5, r5, #3
 8006486:	3508      	adds	r5, #8
 8006488:	2d0c      	cmp	r5, #12
 800648a:	bf38      	it	cc
 800648c:	250c      	movcc	r5, #12
 800648e:	4629      	mov	r1, r5
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ffa5 	bl	80063e0 <sbrk_aligned>
 8006496:	3001      	adds	r0, #1
 8006498:	d02b      	beq.n	80064f2 <_malloc_r+0xd2>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	442b      	add	r3, r5
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	e00e      	b.n	80064c0 <_malloc_r+0xa0>
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	1b52      	subs	r2, r2, r5
 80064a6:	d41e      	bmi.n	80064e6 <_malloc_r+0xc6>
 80064a8:	2a0b      	cmp	r2, #11
 80064aa:	d916      	bls.n	80064da <_malloc_r+0xba>
 80064ac:	1961      	adds	r1, r4, r5
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	6025      	str	r5, [r4, #0]
 80064b2:	bf18      	it	ne
 80064b4:	6059      	strne	r1, [r3, #4]
 80064b6:	6863      	ldr	r3, [r4, #4]
 80064b8:	bf08      	it	eq
 80064ba:	6031      	streq	r1, [r6, #0]
 80064bc:	5162      	str	r2, [r4, r5]
 80064be:	604b      	str	r3, [r1, #4]
 80064c0:	4638      	mov	r0, r7
 80064c2:	f104 060b 	add.w	r6, r4, #11
 80064c6:	f000 f865 	bl	8006594 <__malloc_unlock>
 80064ca:	f026 0607 	bic.w	r6, r6, #7
 80064ce:	1d23      	adds	r3, r4, #4
 80064d0:	1af2      	subs	r2, r6, r3
 80064d2:	d0b6      	beq.n	8006442 <_malloc_r+0x22>
 80064d4:	1b9b      	subs	r3, r3, r6
 80064d6:	50a3      	str	r3, [r4, r2]
 80064d8:	e7b3      	b.n	8006442 <_malloc_r+0x22>
 80064da:	6862      	ldr	r2, [r4, #4]
 80064dc:	42a3      	cmp	r3, r4
 80064de:	bf0c      	ite	eq
 80064e0:	6032      	streq	r2, [r6, #0]
 80064e2:	605a      	strne	r2, [r3, #4]
 80064e4:	e7ec      	b.n	80064c0 <_malloc_r+0xa0>
 80064e6:	4623      	mov	r3, r4
 80064e8:	6864      	ldr	r4, [r4, #4]
 80064ea:	e7b2      	b.n	8006452 <_malloc_r+0x32>
 80064ec:	4634      	mov	r4, r6
 80064ee:	6876      	ldr	r6, [r6, #4]
 80064f0:	e7b9      	b.n	8006466 <_malloc_r+0x46>
 80064f2:	230c      	movs	r3, #12
 80064f4:	603b      	str	r3, [r7, #0]
 80064f6:	4638      	mov	r0, r7
 80064f8:	f000 f84c 	bl	8006594 <__malloc_unlock>
 80064fc:	e7a1      	b.n	8006442 <_malloc_r+0x22>
 80064fe:	6025      	str	r5, [r4, #0]
 8006500:	e7de      	b.n	80064c0 <_malloc_r+0xa0>
 8006502:	bf00      	nop
 8006504:	20000b28 	.word	0x20000b28

08006508 <_realloc_r>:
 8006508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800650c:	4680      	mov	r8, r0
 800650e:	4614      	mov	r4, r2
 8006510:	460e      	mov	r6, r1
 8006512:	b921      	cbnz	r1, 800651e <_realloc_r+0x16>
 8006514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006518:	4611      	mov	r1, r2
 800651a:	f7ff bf81 	b.w	8006420 <_malloc_r>
 800651e:	b92a      	cbnz	r2, 800652c <_realloc_r+0x24>
 8006520:	f7ff ff12 	bl	8006348 <_free_r>
 8006524:	4625      	mov	r5, r4
 8006526:	4628      	mov	r0, r5
 8006528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652c:	f000 f838 	bl	80065a0 <_malloc_usable_size_r>
 8006530:	4284      	cmp	r4, r0
 8006532:	4607      	mov	r7, r0
 8006534:	d802      	bhi.n	800653c <_realloc_r+0x34>
 8006536:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800653a:	d812      	bhi.n	8006562 <_realloc_r+0x5a>
 800653c:	4621      	mov	r1, r4
 800653e:	4640      	mov	r0, r8
 8006540:	f7ff ff6e 	bl	8006420 <_malloc_r>
 8006544:	4605      	mov	r5, r0
 8006546:	2800      	cmp	r0, #0
 8006548:	d0ed      	beq.n	8006526 <_realloc_r+0x1e>
 800654a:	42bc      	cmp	r4, r7
 800654c:	4622      	mov	r2, r4
 800654e:	4631      	mov	r1, r6
 8006550:	bf28      	it	cs
 8006552:	463a      	movcs	r2, r7
 8006554:	f7ff fed0 	bl	80062f8 <memcpy>
 8006558:	4631      	mov	r1, r6
 800655a:	4640      	mov	r0, r8
 800655c:	f7ff fef4 	bl	8006348 <_free_r>
 8006560:	e7e1      	b.n	8006526 <_realloc_r+0x1e>
 8006562:	4635      	mov	r5, r6
 8006564:	e7df      	b.n	8006526 <_realloc_r+0x1e>
	...

08006568 <_sbrk_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d06      	ldr	r5, [pc, #24]	; (8006584 <_sbrk_r+0x1c>)
 800656c:	2300      	movs	r3, #0
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	602b      	str	r3, [r5, #0]
 8006574:	f7fa ff3e 	bl	80013f4 <_sbrk>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_sbrk_r+0x1a>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_sbrk_r+0x1a>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20000b30 	.word	0x20000b30

08006588 <__malloc_lock>:
 8006588:	4801      	ldr	r0, [pc, #4]	; (8006590 <__malloc_lock+0x8>)
 800658a:	f000 b811 	b.w	80065b0 <__retarget_lock_acquire_recursive>
 800658e:	bf00      	nop
 8006590:	20000b34 	.word	0x20000b34

08006594 <__malloc_unlock>:
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__malloc_unlock+0x8>)
 8006596:	f000 b80c 	b.w	80065b2 <__retarget_lock_release_recursive>
 800659a:	bf00      	nop
 800659c:	20000b34 	.word	0x20000b34

080065a0 <_malloc_usable_size_r>:
 80065a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a4:	1f18      	subs	r0, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bfbc      	itt	lt
 80065aa:	580b      	ldrlt	r3, [r1, r0]
 80065ac:	18c0      	addlt	r0, r0, r3
 80065ae:	4770      	bx	lr

080065b0 <__retarget_lock_acquire_recursive>:
 80065b0:	4770      	bx	lr

080065b2 <__retarget_lock_release_recursive>:
 80065b2:	4770      	bx	lr

080065b4 <_init>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	bf00      	nop
 80065b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ba:	bc08      	pop	{r3}
 80065bc:	469e      	mov	lr, r3
 80065be:	4770      	bx	lr

080065c0 <_fini>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr
