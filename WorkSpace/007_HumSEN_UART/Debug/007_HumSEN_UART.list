
007_HumSEN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c98  08006c98  000204a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ca0  08006ca0  000204a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca0  08006ca0  00016ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a8  20000000  08006ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  200004a8  08007150  000204a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d0c  08007150  00020d0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9da  00000000  00000000  000204d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327a  00000000  00000000  0003aeb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0003e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  0003f840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d17  00000000  00000000  00040df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3e2  00000000  00000000  00069b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d83  00000000  00000000  00083ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179c74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f0  00000000  00000000  00179cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004a8 	.word	0x200004a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bec 	.word	0x08006bec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004ac 	.word	0x200004ac
 80001cc:	08006bec 	.word	0x08006bec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b974 	b.w	8000938 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468e      	mov	lr, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14d      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000676:	428a      	cmp	r2, r1
 8000678:	4694      	mov	ip, r2
 800067a:	d969      	bls.n	8000750 <__udivmoddi4+0xe8>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b152      	cbz	r2, 8000698 <__udivmoddi4+0x30>
 8000682:	fa01 f302 	lsl.w	r3, r1, r2
 8000686:	f1c2 0120 	rsb	r1, r2, #32
 800068a:	fa20 f101 	lsr.w	r1, r0, r1
 800068e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000692:	ea41 0e03 	orr.w	lr, r1, r3
 8000696:	4094      	lsls	r4, r2
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	0c21      	lsrs	r1, r4, #16
 800069e:	fbbe f6f8 	udiv	r6, lr, r8
 80006a2:	fa1f f78c 	uxth.w	r7, ip
 80006a6:	fb08 e316 	mls	r3, r8, r6, lr
 80006aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ae:	fb06 f107 	mul.w	r1, r6, r7
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80006be:	f080 811f 	bcs.w	8000900 <__udivmoddi4+0x298>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 811c 	bls.w	8000900 <__udivmoddi4+0x298>
 80006c8:	3e02      	subs	r6, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d4:	fb08 3310 	mls	r3, r8, r0, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb00 f707 	mul.w	r7, r0, r7
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	d90a      	bls.n	80006fa <__udivmoddi4+0x92>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ec:	f080 810a 	bcs.w	8000904 <__udivmoddi4+0x29c>
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	f240 8107 	bls.w	8000904 <__udivmoddi4+0x29c>
 80006f6:	4464      	add	r4, ip
 80006f8:	3802      	subs	r0, #2
 80006fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006fe:	1be4      	subs	r4, r4, r7
 8000700:	2600      	movs	r6, #0
 8000702:	b11d      	cbz	r5, 800070c <__udivmoddi4+0xa4>
 8000704:	40d4      	lsrs	r4, r2
 8000706:	2300      	movs	r3, #0
 8000708:	e9c5 4300 	strd	r4, r3, [r5]
 800070c:	4631      	mov	r1, r6
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0xc2>
 8000716:	2d00      	cmp	r5, #0
 8000718:	f000 80ef 	beq.w	80008fa <__udivmoddi4+0x292>
 800071c:	2600      	movs	r6, #0
 800071e:	e9c5 0100 	strd	r0, r1, [r5]
 8000722:	4630      	mov	r0, r6
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	fab3 f683 	clz	r6, r3
 800072e:	2e00      	cmp	r6, #0
 8000730:	d14a      	bne.n	80007c8 <__udivmoddi4+0x160>
 8000732:	428b      	cmp	r3, r1
 8000734:	d302      	bcc.n	800073c <__udivmoddi4+0xd4>
 8000736:	4282      	cmp	r2, r0
 8000738:	f200 80f9 	bhi.w	800092e <__udivmoddi4+0x2c6>
 800073c:	1a84      	subs	r4, r0, r2
 800073e:	eb61 0303 	sbc.w	r3, r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	469e      	mov	lr, r3
 8000746:	2d00      	cmp	r5, #0
 8000748:	d0e0      	beq.n	800070c <__udivmoddi4+0xa4>
 800074a:	e9c5 4e00 	strd	r4, lr, [r5]
 800074e:	e7dd      	b.n	800070c <__udivmoddi4+0xa4>
 8000750:	b902      	cbnz	r2, 8000754 <__udivmoddi4+0xec>
 8000752:	deff      	udf	#255	; 0xff
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	2a00      	cmp	r2, #0
 800075a:	f040 8092 	bne.w	8000882 <__udivmoddi4+0x21a>
 800075e:	eba1 010c 	sub.w	r1, r1, ip
 8000762:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000766:	fa1f fe8c 	uxth.w	lr, ip
 800076a:	2601      	movs	r6, #1
 800076c:	0c20      	lsrs	r0, r4, #16
 800076e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000772:	fb07 1113 	mls	r1, r7, r3, r1
 8000776:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800077a:	fb0e f003 	mul.w	r0, lr, r3
 800077e:	4288      	cmp	r0, r1
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x12c>
 8000782:	eb1c 0101 	adds.w	r1, ip, r1
 8000786:	f103 38ff 	add.w	r8, r3, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x12a>
 800078c:	4288      	cmp	r0, r1
 800078e:	f200 80cb 	bhi.w	8000928 <__udivmoddi4+0x2c0>
 8000792:	4643      	mov	r3, r8
 8000794:	1a09      	subs	r1, r1, r0
 8000796:	b2a4      	uxth	r4, r4
 8000798:	fbb1 f0f7 	udiv	r0, r1, r7
 800079c:	fb07 1110 	mls	r1, r7, r0, r1
 80007a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007a4:	fb0e fe00 	mul.w	lr, lr, r0
 80007a8:	45a6      	cmp	lr, r4
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x156>
 80007ac:	eb1c 0404 	adds.w	r4, ip, r4
 80007b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007b4:	d202      	bcs.n	80007bc <__udivmoddi4+0x154>
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	f200 80bb 	bhi.w	8000932 <__udivmoddi4+0x2ca>
 80007bc:	4608      	mov	r0, r1
 80007be:	eba4 040e 	sub.w	r4, r4, lr
 80007c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007c6:	e79c      	b.n	8000702 <__udivmoddi4+0x9a>
 80007c8:	f1c6 0720 	rsb	r7, r6, #32
 80007cc:	40b3      	lsls	r3, r6
 80007ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80007d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007d6:	fa20 f407 	lsr.w	r4, r0, r7
 80007da:	fa01 f306 	lsl.w	r3, r1, r6
 80007de:	431c      	orrs	r4, r3
 80007e0:	40f9      	lsrs	r1, r7
 80007e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007e6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ee:	0c20      	lsrs	r0, r4, #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fb09 1118 	mls	r1, r9, r8, r1
 80007f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000800:	4288      	cmp	r0, r1
 8000802:	fa02 f206 	lsl.w	r2, r2, r6
 8000806:	d90b      	bls.n	8000820 <__udivmoddi4+0x1b8>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000810:	f080 8088 	bcs.w	8000924 <__udivmoddi4+0x2bc>
 8000814:	4288      	cmp	r0, r1
 8000816:	f240 8085 	bls.w	8000924 <__udivmoddi4+0x2bc>
 800081a:	f1a8 0802 	sub.w	r8, r8, #2
 800081e:	4461      	add	r1, ip
 8000820:	1a09      	subs	r1, r1, r0
 8000822:	b2a4      	uxth	r4, r4
 8000824:	fbb1 f0f9 	udiv	r0, r1, r9
 8000828:	fb09 1110 	mls	r1, r9, r0, r1
 800082c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000830:	fb00 fe0e 	mul.w	lr, r0, lr
 8000834:	458e      	cmp	lr, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x1e2>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000840:	d26c      	bcs.n	800091c <__udivmoddi4+0x2b4>
 8000842:	458e      	cmp	lr, r1
 8000844:	d96a      	bls.n	800091c <__udivmoddi4+0x2b4>
 8000846:	3802      	subs	r0, #2
 8000848:	4461      	add	r1, ip
 800084a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800084e:	fba0 9402 	umull	r9, r4, r0, r2
 8000852:	eba1 010e 	sub.w	r1, r1, lr
 8000856:	42a1      	cmp	r1, r4
 8000858:	46c8      	mov	r8, r9
 800085a:	46a6      	mov	lr, r4
 800085c:	d356      	bcc.n	800090c <__udivmoddi4+0x2a4>
 800085e:	d053      	beq.n	8000908 <__udivmoddi4+0x2a0>
 8000860:	b15d      	cbz	r5, 800087a <__udivmoddi4+0x212>
 8000862:	ebb3 0208 	subs.w	r2, r3, r8
 8000866:	eb61 010e 	sbc.w	r1, r1, lr
 800086a:	fa01 f707 	lsl.w	r7, r1, r7
 800086e:	fa22 f306 	lsr.w	r3, r2, r6
 8000872:	40f1      	lsrs	r1, r6
 8000874:	431f      	orrs	r7, r3
 8000876:	e9c5 7100 	strd	r7, r1, [r5]
 800087a:	2600      	movs	r6, #0
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	40d8      	lsrs	r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	fa21 f303 	lsr.w	r3, r1, r3
 8000890:	4091      	lsls	r1, r2
 8000892:	4301      	orrs	r1, r0
 8000894:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000898:	fa1f fe8c 	uxth.w	lr, ip
 800089c:	fbb3 f0f7 	udiv	r0, r3, r7
 80008a0:	fb07 3610 	mls	r6, r7, r0, r3
 80008a4:	0c0b      	lsrs	r3, r1, #16
 80008a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008aa:	fb00 f60e 	mul.w	r6, r0, lr
 80008ae:	429e      	cmp	r6, r3
 80008b0:	fa04 f402 	lsl.w	r4, r4, r2
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x260>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80008be:	d22f      	bcs.n	8000920 <__udivmoddi4+0x2b8>
 80008c0:	429e      	cmp	r6, r3
 80008c2:	d92d      	bls.n	8000920 <__udivmoddi4+0x2b8>
 80008c4:	3802      	subs	r0, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1b9b      	subs	r3, r3, r6
 80008ca:	b289      	uxth	r1, r1
 80008cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008d0:	fb07 3316 	mls	r3, r7, r6, r3
 80008d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d8:	fb06 f30e 	mul.w	r3, r6, lr
 80008dc:	428b      	cmp	r3, r1
 80008de:	d908      	bls.n	80008f2 <__udivmoddi4+0x28a>
 80008e0:	eb1c 0101 	adds.w	r1, ip, r1
 80008e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008e8:	d216      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d914      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008ee:	3e02      	subs	r6, #2
 80008f0:	4461      	add	r1, ip
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008f8:	e738      	b.n	800076c <__udivmoddi4+0x104>
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e705      	b.n	800070c <__udivmoddi4+0xa4>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e3      	b.n	80006cc <__udivmoddi4+0x64>
 8000904:	4618      	mov	r0, r3
 8000906:	e6f8      	b.n	80006fa <__udivmoddi4+0x92>
 8000908:	454b      	cmp	r3, r9
 800090a:	d2a9      	bcs.n	8000860 <__udivmoddi4+0x1f8>
 800090c:	ebb9 0802 	subs.w	r8, r9, r2
 8000910:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000914:	3801      	subs	r0, #1
 8000916:	e7a3      	b.n	8000860 <__udivmoddi4+0x1f8>
 8000918:	4646      	mov	r6, r8
 800091a:	e7ea      	b.n	80008f2 <__udivmoddi4+0x28a>
 800091c:	4620      	mov	r0, r4
 800091e:	e794      	b.n	800084a <__udivmoddi4+0x1e2>
 8000920:	4640      	mov	r0, r8
 8000922:	e7d1      	b.n	80008c8 <__udivmoddi4+0x260>
 8000924:	46d0      	mov	r8, sl
 8000926:	e77b      	b.n	8000820 <__udivmoddi4+0x1b8>
 8000928:	3b02      	subs	r3, #2
 800092a:	4461      	add	r1, ip
 800092c:	e732      	b.n	8000794 <__udivmoddi4+0x12c>
 800092e:	4630      	mov	r0, r6
 8000930:	e709      	b.n	8000746 <__udivmoddi4+0xde>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	e742      	b.n	80007be <__udivmoddi4+0x156>

08000938 <__aeabi_idiv0>:
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f001 fabd 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f945 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 fb0d 	bl	8000f68 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800094e:	f000 f9a3 	bl	8000c98 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000952:	f000 f9d9 	bl	8000d08 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000956:	f000 fa15 	bl	8000d84 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800095a:	f000 fa39 	bl	8000dd0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800095e:	f000 fa75 	bl	8000e4c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000962:	f000 faa3 	bl	8000eac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000966:	f000 fad1 	bl	8000f0c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,art0,sizeof(art0),1000);
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	220e      	movs	r2, #14
 8000970:	497a      	ldr	r1, [pc, #488]	; (8000b5c <main+0x220>)
 8000972:	487b      	ldr	r0, [pc, #492]	; (8000b60 <main+0x224>)
 8000974:	f004 fca3 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art1,sizeof(art1),1000);
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	2217      	movs	r2, #23
 800097e:	4979      	ldr	r1, [pc, #484]	; (8000b64 <main+0x228>)
 8000980:	4877      	ldr	r0, [pc, #476]	; (8000b60 <main+0x224>)
 8000982:	f004 fc9c 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art2,sizeof(art2),1000);
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	2228      	movs	r2, #40	; 0x28
 800098c:	4976      	ldr	r1, [pc, #472]	; (8000b68 <main+0x22c>)
 800098e:	4874      	ldr	r0, [pc, #464]	; (8000b60 <main+0x224>)
 8000990:	f004 fc95 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art3,sizeof(art3),1000);
 8000994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000998:	2229      	movs	r2, #41	; 0x29
 800099a:	4974      	ldr	r1, [pc, #464]	; (8000b6c <main+0x230>)
 800099c:	4870      	ldr	r0, [pc, #448]	; (8000b60 <main+0x224>)
 800099e:	f004 fc8e 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art4,sizeof(art4),1000);
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	2227      	movs	r2, #39	; 0x27
 80009a8:	4971      	ldr	r1, [pc, #452]	; (8000b70 <main+0x234>)
 80009aa:	486d      	ldr	r0, [pc, #436]	; (8000b60 <main+0x224>)
 80009ac:	f004 fc87 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art5,sizeof(art5),1000);
 80009b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b4:	221f      	movs	r2, #31
 80009b6:	496f      	ldr	r1, [pc, #444]	; (8000b74 <main+0x238>)
 80009b8:	4869      	ldr	r0, [pc, #420]	; (8000b60 <main+0x224>)
 80009ba:	f004 fc80 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art6,sizeof(art6),1000);
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	221c      	movs	r2, #28
 80009c4:	496c      	ldr	r1, [pc, #432]	; (8000b78 <main+0x23c>)
 80009c6:	4866      	ldr	r0, [pc, #408]	; (8000b60 <main+0x224>)
 80009c8:	f004 fc79 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art7,sizeof(art7),1000);
 80009cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d0:	221c      	movs	r2, #28
 80009d2:	496a      	ldr	r1, [pc, #424]	; (8000b7c <main+0x240>)
 80009d4:	4862      	ldr	r0, [pc, #392]	; (8000b60 <main+0x224>)
 80009d6:	f004 fc72 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art8,sizeof(art8),1000);
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	221c      	movs	r2, #28
 80009e0:	4967      	ldr	r1, [pc, #412]	; (8000b80 <main+0x244>)
 80009e2:	485f      	ldr	r0, [pc, #380]	; (8000b60 <main+0x224>)
 80009e4:	f004 fc6b 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art9,sizeof(art9),1000);
 80009e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ec:	2223      	movs	r2, #35	; 0x23
 80009ee:	4965      	ldr	r1, [pc, #404]	; (8000b84 <main+0x248>)
 80009f0:	485b      	ldr	r0, [pc, #364]	; (8000b60 <main+0x224>)
 80009f2:	f004 fc64 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art10,sizeof(art10),1000);
 80009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fa:	2222      	movs	r2, #34	; 0x22
 80009fc:	4962      	ldr	r1, [pc, #392]	; (8000b88 <main+0x24c>)
 80009fe:	4858      	ldr	r0, [pc, #352]	; (8000b60 <main+0x224>)
 8000a00:	f004 fc5d 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art11,sizeof(art11),1000);
 8000a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a08:	2220      	movs	r2, #32
 8000a0a:	4960      	ldr	r1, [pc, #384]	; (8000b8c <main+0x250>)
 8000a0c:	4854      	ldr	r0, [pc, #336]	; (8000b60 <main+0x224>)
 8000a0e:	f004 fc56 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,art12,sizeof(art12),1000);
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	2222      	movs	r2, #34	; 0x22
 8000a18:	495d      	ldr	r1, [pc, #372]	; (8000b90 <main+0x254>)
 8000a1a:	4851      	ldr	r0, [pc, #324]	; (8000b60 <main+0x224>)
 8000a1c:	f004 fc4f 	bl	80052be <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart1,train1,sizeof(train1),1000);
 8000a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a24:	2236      	movs	r2, #54	; 0x36
 8000a26:	495b      	ldr	r1, [pc, #364]	; (8000b94 <main+0x258>)
 8000a28:	484d      	ldr	r0, [pc, #308]	; (8000b60 <main+0x224>)
 8000a2a:	f004 fc48 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,train2,sizeof(train2),1000);
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	222e      	movs	r2, #46	; 0x2e
 8000a34:	4958      	ldr	r1, [pc, #352]	; (8000b98 <main+0x25c>)
 8000a36:	484a      	ldr	r0, [pc, #296]	; (8000b60 <main+0x224>)
 8000a38:	f004 fc41 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,train3,sizeof(train3),1000);
 8000a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a40:	222c      	movs	r2, #44	; 0x2c
 8000a42:	4956      	ldr	r1, [pc, #344]	; (8000b9c <main+0x260>)
 8000a44:	4846      	ldr	r0, [pc, #280]	; (8000b60 <main+0x224>)
 8000a46:	f004 fc3a 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,train4,sizeof(train4),1000);
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	223d      	movs	r2, #61	; 0x3d
 8000a50:	4953      	ldr	r1, [pc, #332]	; (8000ba0 <main+0x264>)
 8000a52:	4843      	ldr	r0, [pc, #268]	; (8000b60 <main+0x224>)
 8000a54:	f004 fc33 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,train5,sizeof(train5),1000);
 8000a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5c:	223d      	movs	r2, #61	; 0x3d
 8000a5e:	4951      	ldr	r1, [pc, #324]	; (8000ba4 <main+0x268>)
 8000a60:	483f      	ldr	r0, [pc, #252]	; (8000b60 <main+0x224>)
 8000a62:	f004 fc2c 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,train6,sizeof(train6),1000);
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	223d      	movs	r2, #61	; 0x3d
 8000a6c:	494e      	ldr	r1, [pc, #312]	; (8000ba8 <main+0x26c>)
 8000a6e:	483c      	ldr	r0, [pc, #240]	; (8000b60 <main+0x224>)
 8000a70:	f004 fc25 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,train7,sizeof(train7),1000);
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	223b      	movs	r2, #59	; 0x3b
 8000a7a:	494c      	ldr	r1, [pc, #304]	; (8000bac <main+0x270>)
 8000a7c:	4838      	ldr	r0, [pc, #224]	; (8000b60 <main+0x224>)
 8000a7e:	f004 fc1e 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,train8,sizeof(train8),1000);
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	223d      	movs	r2, #61	; 0x3d
 8000a88:	4949      	ldr	r1, [pc, #292]	; (8000bb0 <main+0x274>)
 8000a8a:	4835      	ldr	r0, [pc, #212]	; (8000b60 <main+0x224>)
 8000a8c:	f004 fc17 	bl	80052be <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart1,msg0,sizeof(msg1),1000);
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	222d      	movs	r2, #45	; 0x2d
 8000a96:	4947      	ldr	r1, [pc, #284]	; (8000bb4 <main+0x278>)
 8000a98:	4831      	ldr	r0, [pc, #196]	; (8000b60 <main+0x224>)
 8000a9a:	f004 fc10 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	222d      	movs	r2, #45	; 0x2d
 8000aa4:	4944      	ldr	r1, [pc, #272]	; (8000bb8 <main+0x27c>)
 8000aa6:	482e      	ldr	r0, [pc, #184]	; (8000b60 <main+0x224>)
 8000aa8:	f004 fc09 	bl	80052be <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab0:	222c      	movs	r2, #44	; 0x2c
 8000ab2:	4942      	ldr	r1, [pc, #264]	; (8000bbc <main+0x280>)
 8000ab4:	482a      	ldr	r0, [pc, #168]	; (8000b60 <main+0x224>)
 8000ab6:	f004 fc02 	bl	80052be <HAL_UART_Transmit>
  BSP_HSENSOR_Init();
 8000aba:	f001 f8f5 	bl	8001ca8 <BSP_HSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	222e      	movs	r2, #46	; 0x2e
 8000ac4:	493e      	ldr	r1, [pc, #248]	; (8000bc0 <main+0x284>)
 8000ac6:	4826      	ldr	r0, [pc, #152]	; (8000b60 <main+0x224>)
 8000ac8:	f004 fbf9 	bl	80052be <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  humidity_value = BSP_HSENSOR_ReadHumidity();
 8000acc:	f001 f90c 	bl	8001ce8 <BSP_HSENSOR_ReadHumidity>
 8000ad0:	eef0 7a40 	vmov.f32	s15, s0
 8000ad4:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <main+0x288>)
 8000ad6:	edc3 7a00 	vstr	s15, [r3]
	  int tmpInt1 = humidity_value;
 8000ada:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <main+0x288>)
 8000adc:	edd3 7a00 	vldr	s15, [r3]
 8000ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae4:	ee17 3a90 	vmov	r3, s15
 8000ae8:	60fb      	str	r3, [r7, #12]
	  float tmpFrac = humidity_value - tmpInt1;
 8000aea:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <main+0x288>)
 8000aec:	ed93 7a00 	vldr	s14, [r3]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	ee07 3a90 	vmov	s15, r3
 8000af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000afe:	edc7 7a02 	vstr	s15, [r7, #8]
	  int tmpInt2 = trunc(tmpFrac * 100);
 8000b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b06:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000bc8 <main+0x28c>
 8000b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b0e:	ee17 0a90 	vmov	r0, s15
 8000b12:	f7ff fd11 	bl	8000538 <__aeabi_f2d>
 8000b16:	4602      	mov	r2, r0
 8000b18:	460b      	mov	r3, r1
 8000b1a:	ec43 2b10 	vmov	d0, r2, r3
 8000b1e:	f006 f833 	bl	8006b88 <trunc>
 8000b22:	ec53 2b10 	vmov	r2, r3, d0
 8000b26:	4610      	mov	r0, r2
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f7ff fd5d 	bl	80005e8 <__aeabi_d2iz>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	607b      	str	r3, [r7, #4]
	  snprintf(str_tmp,100,"  Humidity = %d.%02d\n\r", tmpInt1, tmpInt2);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <main+0x290>)
 8000b3a:	2164      	movs	r1, #100	; 0x64
 8000b3c:	4824      	ldr	r0, [pc, #144]	; (8000bd0 <main+0x294>)
 8000b3e:	f005 fba1 	bl	8006284 <sniprintf>
	  HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	2264      	movs	r2, #100	; 0x64
 8000b48:	4921      	ldr	r1, [pc, #132]	; (8000bd0 <main+0x294>)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <main+0x224>)
 8000b4c:	f004 fbb7 	bl	80052be <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000b50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b54:	f001 fa28 	bl	8001fa8 <HAL_Delay>
  {
 8000b58:	e7b8      	b.n	8000acc <main+0x190>
 8000b5a:	bf00      	nop
 8000b5c:	200000b8 	.word	0x200000b8
 8000b60:	200005f8 	.word	0x200005f8
 8000b64:	200000c8 	.word	0x200000c8
 8000b68:	200000e0 	.word	0x200000e0
 8000b6c:	20000108 	.word	0x20000108
 8000b70:	20000134 	.word	0x20000134
 8000b74:	2000015c 	.word	0x2000015c
 8000b78:	2000017c 	.word	0x2000017c
 8000b7c:	20000198 	.word	0x20000198
 8000b80:	200001b4 	.word	0x200001b4
 8000b84:	200001d0 	.word	0x200001d0
 8000b88:	200001f4 	.word	0x200001f4
 8000b8c:	20000218 	.word	0x20000218
 8000b90:	20000238 	.word	0x20000238
 8000b94:	2000025c 	.word	0x2000025c
 8000b98:	20000294 	.word	0x20000294
 8000b9c:	200002c4 	.word	0x200002c4
 8000ba0:	200002f0 	.word	0x200002f0
 8000ba4:	20000330 	.word	0x20000330
 8000ba8:	20000370 	.word	0x20000370
 8000bac:	200003b0 	.word	0x200003b0
 8000bb0:	200003ec 	.word	0x200003ec
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	2000002c 	.word	0x2000002c
 8000bbc:	2000005c 	.word	0x2000005c
 8000bc0:	20000088 	.word	0x20000088
 8000bc4:	20000c0c 	.word	0x20000c0c
 8000bc8:	42c80000 	.word	0x42c80000
 8000bcc:	08006c04 	.word	0x08006c04
 8000bd0:	20000c10 	.word	0x20000c10

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b096      	sub	sp, #88	; 0x58
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	2244      	movs	r2, #68	; 0x44
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f005 fb46 	bl	8006274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bf6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bfa:	f002 fe81 	bl	8003900 <HAL_PWREx_ControlVoltageScaling>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c04:	f000 fb62 	bl	80012cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c08:	f002 fe5c 	bl	80038c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <SystemClock_Config+0xc0>)
 8000c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c12:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <SystemClock_Config+0xc0>)
 8000c14:	f023 0318 	bic.w	r3, r3, #24
 8000c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c1c:	2314      	movs	r3, #20
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c2c:	2360      	movs	r3, #96	; 0x60
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c34:	2301      	movs	r3, #1
 8000c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c3c:	2328      	movs	r3, #40	; 0x28
 8000c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c40:	2307      	movs	r3, #7
 8000c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4618      	mov	r0, r3
 8000c52:	f002 ff77 	bl	8003b44 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c5c:	f000 fb36 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c64:	2303      	movs	r3, #3
 8000c66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	2104      	movs	r1, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fb3f 	bl	80042fc <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c84:	f000 fb22 	bl	80012cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c88:	f004 f846 	bl	8004d18 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c8c:	bf00      	nop
 8000c8e:	3758      	adds	r7, #88	; 0x58
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40021000 	.word	0x40021000

08000c98 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000c9e:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <MX_DFSDM1_Init+0x6c>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_DFSDM1_Init+0x68>)
 8000cee:	f001 fa91 	bl	8002214 <HAL_DFSDM_ChannelInit>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000cf8:	f000 fae8 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200004c4 	.word	0x200004c4
 8000d04:	40016020 	.word	0x40016020

08000d08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <MX_I2C2_Init+0x78>)
 8000d10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d14:	f640 6214 	movw	r2, #3604	; 0xe14
 8000d18:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d46:	f001 fe4a 	bl	80029de <HAL_I2C_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d50:	f000 fabc 	bl	80012cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d58:	f002 fbd4 	bl	8003504 <HAL_I2CEx_ConfigAnalogFilter>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000d62:	f000 fab3 	bl	80012cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_I2C2_Init+0x74>)
 8000d6a:	f002 fc16 	bl	800359a <HAL_I2CEx_ConfigDigitalFilter>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000d74:	f000 faaa 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200004fc 	.word	0x200004fc
 8000d80:	40005800 	.word	0x40005800

08000d84 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_QUADSPI_Init+0x44>)
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <MX_QUADSPI_Init+0x48>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_QUADSPI_Init+0x44>)
 8000d90:	2202      	movs	r2, #2
 8000d92:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_QUADSPI_Init+0x44>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_QUADSPI_Init+0x44>)
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_QUADSPI_Init+0x44>)
 8000da2:	2217      	movs	r2, #23
 8000da4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_QUADSPI_Init+0x44>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_QUADSPI_Init+0x44>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_QUADSPI_Init+0x44>)
 8000db4:	f002 fe0a 	bl	80039cc <HAL_QSPI_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000dbe:	f000 fa85 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000550 	.word	0x20000550
 8000dcc:	a0001000 	.word	0xa0001000

08000dd0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <MX_SPI3_Init+0x78>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000dea:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000dee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000e1e:	2207      	movs	r2, #7
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_SPI3_Init+0x74>)
 8000e30:	f004 f954 	bl	80050dc <HAL_SPI_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 fa47 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000594 	.word	0x20000594
 8000e48:	40003c00 	.word	0x40003c00

08000e4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e52:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <MX_USART1_UART_Init+0x5c>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_USART1_UART_Init+0x58>)
 8000e90:	f004 f9c7 	bl	8005222 <HAL_UART_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e9a:	f000 fa17 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200005f8 	.word	0x200005f8
 8000ea8:	40013800 	.word	0x40013800

08000eac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MX_USART3_UART_Init+0x5c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART3_UART_Init+0x58>)
 8000ef0:	f004 f997 	bl	8005222 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000efa:	f000 f9e7 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000067c 	.word	0x2000067c
 8000f08:	40004800 	.word	0x40004800

08000f0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1a:	2206      	movs	r2, #6
 8000f1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f50:	f002 fb6f 	bl	8003632 <HAL_PCD_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f5a:	f000 f9b7 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000700 	.word	0x20000700

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7e:	4bbd      	ldr	r3, [pc, #756]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4abc      	ldr	r2, [pc, #752]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4bba      	ldr	r3, [pc, #744]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4bb7      	ldr	r3, [pc, #732]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4ab6      	ldr	r2, [pc, #728]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4bb4      	ldr	r3, [pc, #720]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4bb1      	ldr	r3, [pc, #708]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4ab0      	ldr	r2, [pc, #704]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4bae      	ldr	r3, [pc, #696]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4bab      	ldr	r3, [pc, #684]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4aaa      	ldr	r2, [pc, #680]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4ba8      	ldr	r3, [pc, #672]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4ba5      	ldr	r3, [pc, #660]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4aa4      	ldr	r2, [pc, #656]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <MX_GPIO_Init+0x30c>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ffc:	489e      	ldr	r0, [pc, #632]	; (8001278 <MX_GPIO_Init+0x310>)
 8000ffe:	f001 fcb3 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f248 1104 	movw	r1, #33028	; 0x8104
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f001 fcac 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001010:	2200      	movs	r2, #0
 8001012:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001016:	4899      	ldr	r0, [pc, #612]	; (800127c <MX_GPIO_Init+0x314>)
 8001018:	f001 fca6 	bl	8002968 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001022:	4897      	ldr	r0, [pc, #604]	; (8001280 <MX_GPIO_Init+0x318>)
 8001024:	f001 fca0 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102e:	4894      	ldr	r0, [pc, #592]	; (8001280 <MX_GPIO_Init+0x318>)
 8001030:	f001 fc9a 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 7110 	mov.w	r1, #576	; 0x240
 800103a:	4892      	ldr	r0, [pc, #584]	; (8001284 <MX_GPIO_Init+0x31c>)
 800103c:	f001 fc94 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2120      	movs	r1, #32
 8001044:	488d      	ldr	r0, [pc, #564]	; (800127c <MX_GPIO_Init+0x314>)
 8001046:	f001 fc8f 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	2101      	movs	r1, #1
 800104e:	488a      	ldr	r0, [pc, #552]	; (8001278 <MX_GPIO_Init+0x310>)
 8001050:	f001 fc8a 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001054:	f240 1315 	movw	r3, #277	; 0x115
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4882      	ldr	r0, [pc, #520]	; (8001278 <MX_GPIO_Init+0x310>)
 800106e:	f001 f9dd 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001072:	236a      	movs	r3, #106	; 0x6a
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001076:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	487c      	ldr	r0, [pc, #496]	; (8001278 <MX_GPIO_Init+0x310>)
 8001088:	f001 f9d0 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800108c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001092:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4878      	ldr	r0, [pc, #480]	; (8001284 <MX_GPIO_Init+0x31c>)
 80010a4:	f001 f9c2 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80010a8:	233f      	movs	r3, #63	; 0x3f
 80010aa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ac:	230b      	movs	r3, #11
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	4872      	ldr	r0, [pc, #456]	; (8001284 <MX_GPIO_Init+0x31c>)
 80010bc:	f001 f9b6 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80010c0:	2303      	movs	r3, #3
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010d0:	2308      	movs	r3, #8
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f001 f9a5 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80010e2:	f248 1304 	movw	r3, #33028	; 0x8104
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f001 f995 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001102:	2308      	movs	r3, #8
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001112:	2301      	movs	r3, #1
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f001 f984 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001124:	2310      	movs	r3, #16
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001128:	230b      	movs	r3, #11
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f001 f977 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800113e:	23e0      	movs	r3, #224	; 0xe0
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800114e:	2305      	movs	r3, #5
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f001 f966 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001164:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4841      	ldr	r0, [pc, #260]	; (800127c <MX_GPIO_Init+0x314>)
 8001176:	f001 f959 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800117a:	2302      	movs	r3, #2
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800117e:	230b      	movs	r3, #11
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	483b      	ldr	r0, [pc, #236]	; (800127c <MX_GPIO_Init+0x314>)
 800118e:	f001 f94d 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001192:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001196:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4834      	ldr	r0, [pc, #208]	; (800127c <MX_GPIO_Init+0x314>)
 80011ac:	f001 f93e 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80011b0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80011b4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	482e      	ldr	r0, [pc, #184]	; (8001280 <MX_GPIO_Init+0x318>)
 80011c8:	f001 f930 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80011cc:	f243 0381 	movw	r3, #12417	; 0x3081
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4826      	ldr	r0, [pc, #152]	; (8001280 <MX_GPIO_Init+0x318>)
 80011e6:	f001 f921 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80011ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4820      	ldr	r0, [pc, #128]	; (8001284 <MX_GPIO_Init+0x31c>)
 8001204:	f001 f912 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001208:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4819      	ldr	r0, [pc, #100]	; (8001284 <MX_GPIO_Init+0x31c>)
 8001220:	f001 f904 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001224:	2302      	movs	r3, #2
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001234:	2305      	movs	r3, #5
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4810      	ldr	r0, [pc, #64]	; (8001280 <MX_GPIO_Init+0x318>)
 8001240:	f001 f8f4 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001244:	2378      	movs	r3, #120	; 0x78
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001254:	2307      	movs	r3, #7
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_GPIO_Init+0x318>)
 8001260:	f001 f8e4 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001264:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126a:	2312      	movs	r3, #18
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	e00a      	b.n	8001288 <MX_GPIO_Init+0x320>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	48001000 	.word	0x48001000
 800127c:	48000400 	.word	0x48000400
 8001280:	48000c00 	.word	0x48000c00
 8001284:	48000800 	.word	0x48000800
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800128e:	2304      	movs	r3, #4
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <MX_GPIO_Init+0x360>)
 800129a:	f001 f8c7 	bl	800242c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2017      	movs	r0, #23
 80012a4:	f000 ff7f 	bl	80021a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a8:	2017      	movs	r0, #23
 80012aa:	f000 ff98 	bl	80021de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2028      	movs	r0, #40	; 0x28
 80012b4:	f000 ff77 	bl	80021a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b8:	2028      	movs	r0, #40	; 0x28
 80012ba:	f000 ff90 	bl	80021de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	48000400 	.word	0x48000400

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <Error_Handler+0x8>
	...

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_MspInit+0x44>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	4a0e      	ldr	r2, [pc, #56]	; (800131c <HAL_MspInit+0x44>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_MspInit+0x44>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_MspInit+0x44>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <HAL_MspInit+0x44>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6593      	str	r3, [r2, #88]	; 0x58
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_MspInit+0x44>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0ac      	sub	sp, #176	; 0xb0
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2288      	movs	r2, #136	; 0x88
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f004 ff97 	bl	8006274 <memset>
  if(DFSDM1_Init == 0)
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d142      	bne.n	80013d4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800134e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001352:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4618      	mov	r0, r3
 8001360:	f003 f9f0 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800136a:	f7ff ffaf 	bl	80012cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001378:	6613      	str	r3, [r2, #96]	; 0x60
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a15      	ldr	r2, [pc, #84]	; (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800138c:	f043 0310 	orr.w	r3, r3, #16
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800139e:	f44f 7320 	mov.w	r3, #640	; 0x280
 80013a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013b8:	2306      	movs	r3, #6
 80013ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80013c6:	f001 f831 	bl	800242c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a02      	ldr	r2, [pc, #8]	; (80013dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013d2:	6013      	str	r3, [r2, #0]
  }

}
 80013d4:	bf00      	nop
 80013d6:	37b0      	adds	r7, #176	; 0xb0
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000c74 	.word	0x20000c74
 80013e0:	40021000 	.word	0x40021000
 80013e4:	48001000 	.word	0x48001000

080013e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ac      	sub	sp, #176	; 0xb0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2288      	movs	r2, #136	; 0x88
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f004 ff33 	bl	8006274 <memset>
  if(hi2c->Instance==I2C2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a21      	ldr	r2, [pc, #132]	; (8001498 <HAL_I2C_MspInit+0xb0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d13b      	bne.n	8001490 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800141c:	2300      	movs	r3, #0
 800141e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4618      	mov	r0, r3
 8001426:	f003 f98d 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001430:	f7ff ff4c 	bl	80012cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_I2C_MspInit+0xb4>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	4a18      	ldr	r2, [pc, #96]	; (800149c <HAL_I2C_MspInit+0xb4>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_I2C_MspInit+0xb4>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800144c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001454:	2312      	movs	r3, #18
 8001456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145a:	2301      	movs	r3, #1
 800145c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001466:	2304      	movs	r3, #4
 8001468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001470:	4619      	mov	r1, r3
 8001472:	480b      	ldr	r0, [pc, #44]	; (80014a0 <HAL_I2C_MspInit+0xb8>)
 8001474:	f000 ffda 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_I2C_MspInit+0xb4>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_I2C_MspInit+0xb4>)
 800147e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001482:	6593      	str	r3, [r2, #88]	; 0x58
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_I2C_MspInit+0xb4>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	37b0      	adds	r7, #176	; 0xb0
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40005800 	.word	0x40005800
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000400 	.word	0x48000400

080014a4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_I2C_MspDeInit+0x3c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10f      	bne.n	80014d6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_I2C_MspDeInit+0x40>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_I2C_MspDeInit+0x40>)
 80014bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80014c0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80014c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c6:	4808      	ldr	r0, [pc, #32]	; (80014e8 <HAL_I2C_MspDeInit+0x44>)
 80014c8:	f001 f95a 	bl	8002780 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80014cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HAL_I2C_MspDeInit+0x44>)
 80014d2:	f001 f955 	bl	8002780 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40005800 	.word	0x40005800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000400 	.word	0x48000400

080014ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a17      	ldr	r2, [pc, #92]	; (8001568 <HAL_QSPI_MspInit+0x7c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d128      	bne.n	8001560 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_QSPI_MspInit+0x80>)
 8001510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001512:	4a16      	ldr	r2, [pc, #88]	; (800156c <HAL_QSPI_MspInit+0x80>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001518:	6513      	str	r3, [r2, #80]	; 0x50
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_QSPI_MspInit+0x80>)
 800151c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_QSPI_MspInit+0x80>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <HAL_QSPI_MspInit+0x80>)
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_QSPI_MspInit+0x80>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800153e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001542:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001550:	230a      	movs	r3, #10
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_QSPI_MspInit+0x84>)
 800155c:	f000 ff66 	bl	800242c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	a0001000 	.word	0xa0001000
 800156c:	40021000 	.word	0x40021000
 8001570:	48001000 	.word	0x48001000

08001574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_SPI_MspInit+0x7c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d128      	bne.n	80015e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_SPI_MspInit+0x80>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <HAL_SPI_MspInit+0x80>)
 800159c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a0:	6593      	str	r3, [r2, #88]	; 0x58
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_SPI_MspInit+0x80>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_SPI_MspInit+0x80>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_SPI_MspInit+0x80>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_SPI_MspInit+0x80>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80015c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015d8:	2306      	movs	r3, #6
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_SPI_MspInit+0x84>)
 80015e4:	f000 ff22 	bl	800242c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40003c00 	.word	0x40003c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48000800 	.word	0x48000800

080015fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0ae      	sub	sp, #184	; 0xb8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	2288      	movs	r2, #136	; 0x88
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f004 fe29 	bl	8006274 <memset>
  if(huart->Instance==USART1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a42      	ldr	r2, [pc, #264]	; (8001730 <HAL_UART_MspInit+0x134>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d13b      	bne.n	80016a4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800162c:	2301      	movs	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001630:	2300      	movs	r3, #0
 8001632:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4618      	mov	r0, r3
 800163a:	f003 f883 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001644:	f7ff fe42 	bl	80012cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001648:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_UART_MspInit+0x138>)
 800164a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164c:	4a39      	ldr	r2, [pc, #228]	; (8001734 <HAL_UART_MspInit+0x138>)
 800164e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001652:	6613      	str	r3, [r2, #96]	; 0x60
 8001654:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_UART_MspInit+0x138>)
 8001656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	4b34      	ldr	r3, [pc, #208]	; (8001734 <HAL_UART_MspInit+0x138>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	4a33      	ldr	r2, [pc, #204]	; (8001734 <HAL_UART_MspInit+0x138>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166c:	4b31      	ldr	r3, [pc, #196]	; (8001734 <HAL_UART_MspInit+0x138>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001678:	23c0      	movs	r3, #192	; 0xc0
 800167a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001690:	2307      	movs	r3, #7
 8001692:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800169a:	4619      	mov	r1, r3
 800169c:	4826      	ldr	r0, [pc, #152]	; (8001738 <HAL_UART_MspInit+0x13c>)
 800169e:	f000 fec5 	bl	800242c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016a2:	e040      	b.n	8001726 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a24      	ldr	r2, [pc, #144]	; (800173c <HAL_UART_MspInit+0x140>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d13b      	bne.n	8001726 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016ae:	2304      	movs	r3, #4
 80016b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 f842 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_UART_MspInit+0xce>
      Error_Handler();
 80016c6:	f7ff fe01 	bl	80012cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_UART_MspInit+0x138>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	4a19      	ldr	r2, [pc, #100]	; (8001734 <HAL_UART_MspInit+0x138>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d4:	6593      	str	r3, [r2, #88]	; 0x58
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x138>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_UART_MspInit+0x138>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <HAL_UART_MspInit+0x138>)
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_UART_MspInit+0x138>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80016fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001714:	2307      	movs	r3, #7
 8001716:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800171e:	4619      	mov	r1, r3
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <HAL_UART_MspInit+0x144>)
 8001722:	f000 fe83 	bl	800242c <HAL_GPIO_Init>
}
 8001726:	bf00      	nop
 8001728:	37b8      	adds	r7, #184	; 0xb8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40013800 	.word	0x40013800
 8001734:	40021000 	.word	0x40021000
 8001738:	48000400 	.word	0x48000400
 800173c:	40004800 	.word	0x40004800
 8001740:	48000c00 	.word	0x48000c00

08001744 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0ac      	sub	sp, #176	; 0xb0
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2288      	movs	r2, #136	; 0x88
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fd85 	bl	8006274 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001772:	d17c      	bne.n	800186e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001778:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800177a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800177e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001782:	2301      	movs	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800178a:	2318      	movs	r3, #24
 800178c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800178e:	2307      	movs	r3, #7
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001792:	2302      	movs	r3, #2
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001796:	2302      	movs	r3, #2
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800179a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 ffcd 	bl	8004744 <HAL_RCCEx_PeriphCLKConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80017b0:	f7ff fd8c 	bl	80012cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <HAL_PCD_MspInit+0x134>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	4a2f      	ldr	r2, [pc, #188]	; (8001878 <HAL_PCD_MspInit+0x134>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c0:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <HAL_PCD_MspInit+0x134>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80017cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ea:	f000 fe1f 	bl	800242c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80017ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001808:	230a      	movs	r3, #10
 800180a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f000 fe08 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_PCD_MspInit+0x134>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001820:	4a15      	ldr	r2, [pc, #84]	; (8001878 <HAL_PCD_MspInit+0x134>)
 8001822:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_PCD_MspInit+0x134>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_PCD_MspInit+0x134>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d114      	bne.n	800186a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_PCD_MspInit+0x134>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <HAL_PCD_MspInit+0x134>)
 8001846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184a:	6593      	str	r3, [r2, #88]	; 0x58
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_PCD_MspInit+0x134>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001858:	f002 f8a8 	bl	80039ac <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_PCD_MspInit+0x134>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	4a05      	ldr	r2, [pc, #20]	; (8001878 <HAL_PCD_MspInit+0x134>)
 8001862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001866:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001868:	e001      	b.n	800186e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800186a:	f002 f89f 	bl	80039ac <HAL_PWREx_EnableVddUSB>
}
 800186e:	bf00      	nop
 8001870:	37b0      	adds	r7, #176	; 0xb0
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <NMI_Handler+0x4>

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c8:	f000 fb4e 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80018d4:	2020      	movs	r0, #32
 80018d6:	f001 f85f 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80018da:	2040      	movs	r0, #64	; 0x40
 80018dc:	f001 f85c 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80018e0:	2080      	movs	r0, #128	; 0x80
 80018e2:	f001 f859 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80018e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018ea:	f001 f855 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80018f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018fa:	f001 f84d 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80018fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001902:	f001 f849 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001906:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800190a:	f001 f845 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800190e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001912:	f001 f841 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001916:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800191a:	f001 f83d 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001954:	f004 fc64 	bl	8006220 <__errno>
 8001958:	4603      	mov	r3, r0
 800195a:	220c      	movs	r2, #12
 800195c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20018000 	.word	0x20018000
 8001984:	00000400 	.word	0x00000400
 8001988:	20000c78 	.word	0x20000c78
 800198c:	20000d10 	.word	0x20000d10

08001990 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <SystemInit+0x20>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <SystemInit+0x20>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b8:	f7ff ffea 	bl	8001990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019be:	490d      	ldr	r1, [pc, #52]	; (80019f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <LoopForever+0xe>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d4:	4c0a      	ldr	r4, [pc, #40]	; (8001a00 <LoopForever+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e2:	f004 fc23 	bl	800622c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019e6:	f7fe ffa9 	bl	800093c <main>

080019ea <LoopForever>:

LoopForever:
    b LoopForever
 80019ea:	e7fe      	b.n	80019ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 80019f8:	08006ca8 	.word	0x08006ca8
  ldr r2, =_sbss
 80019fc:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8001a00:	20000d0c 	.word	0x20000d0c

08001a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC1_2_IRQHandler>
	...

08001a08 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <I2Cx_MspInit+0xa8>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a14:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <I2Cx_MspInit+0xa8>)
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <I2Cx_MspInit+0xa8>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001a28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a2c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001a2e:	2312      	movs	r3, #18
 8001a30:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	481b      	ldr	r0, [pc, #108]	; (8001ab4 <I2Cx_MspInit+0xac>)
 8001a46:	f000 fcf1 	bl	800242c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4818      	ldr	r0, [pc, #96]	; (8001ab4 <I2Cx_MspInit+0xac>)
 8001a52:	f000 fceb 	bl	800242c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <I2Cx_MspInit+0xa8>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <I2Cx_MspInit+0xa8>)
 8001a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a60:	6593      	str	r3, [r2, #88]	; 0x58
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <I2Cx_MspInit+0xa8>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <I2Cx_MspInit+0xa8>)
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <I2Cx_MspInit+0xa8>)
 8001a74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a78:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <I2Cx_MspInit+0xa8>)
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <I2Cx_MspInit+0xa8>)
 8001a80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a84:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	210f      	movs	r1, #15
 8001a8a:	2021      	movs	r0, #33	; 0x21
 8001a8c:	f000 fb8b 	bl	80021a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001a90:	2021      	movs	r0, #33	; 0x21
 8001a92:	f000 fba4 	bl	80021de <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	210f      	movs	r1, #15
 8001a9a:	2022      	movs	r0, #34	; 0x22
 8001a9c:	f000 fb83 	bl	80021a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001aa0:	2022      	movs	r0, #34	; 0x22
 8001aa2:	f000 fb9c 	bl	80021de <HAL_NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	48000400 	.word	0x48000400

08001ab8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <I2Cx_Init+0x54>)
 8001ac4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <I2Cx_Init+0x58>)
 8001aca:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff89 	bl	8001a08 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 ff71 	bl	80029de <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001afc:	2100      	movs	r1, #0
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f001 fd00 	bl	8003504 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40005800 	.word	0x40005800
 8001b10:	00702681 	.word	0x00702681

08001b14 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af04      	add	r7, sp, #16
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	4611      	mov	r1, r2
 8001b20:	461a      	mov	r2, r3
 8001b22:	4603      	mov	r3, r0
 8001b24:	72fb      	strb	r3, [r7, #11]
 8001b26:	460b      	mov	r3, r1
 8001b28:	813b      	strh	r3, [r7, #8]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	b299      	uxth	r1, r3
 8001b36:	88f8      	ldrh	r0, [r7, #6]
 8001b38:	893a      	ldrh	r2, [r7, #8]
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	4603      	mov	r3, r0
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f001 f91a 	bl	8002d84 <HAL_I2C_Mem_Read>
 8001b50:	4603      	mov	r3, r0
 8001b52:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f832 	bl	8001bc8 <I2Cx_Error>
  }
  return status;
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b08a      	sub	sp, #40	; 0x28
 8001b72:	af04      	add	r7, sp, #16
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	4608      	mov	r0, r1
 8001b78:	4611      	mov	r1, r2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	72fb      	strb	r3, [r7, #11]
 8001b80:	460b      	mov	r3, r1
 8001b82:	813b      	strh	r3, [r7, #8]
 8001b84:	4613      	mov	r3, r2
 8001b86:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b8c:	7afb      	ldrb	r3, [r7, #11]
 8001b8e:	b299      	uxth	r1, r3
 8001b90:	88f8      	ldrh	r0, [r7, #6]
 8001b92:	893a      	ldrh	r2, [r7, #8]
 8001b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b98:	9302      	str	r3, [sp, #8]
 8001b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 ffd9 	bl	8002b5c <HAL_I2C_Mem_Write>
 8001baa:	4603      	mov	r3, r0
 8001bac:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d004      	beq.n	8001bbe <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001bb4:	7afb      	ldrb	r3, [r7, #11]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f805 	bl	8001bc8 <I2Cx_Error>
  }
  return status;
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 ff91 	bl	8002afc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff6c 	bl	8001ab8 <I2Cx_Init>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <SENSOR_IO_Init+0x10>)
 8001bee:	f7ff ff63 	bl	8001ab8 <I2Cx_Init>
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000c7c 	.word	0x20000c7c

08001bfc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
 8001c06:	460b      	mov	r3, r1
 8001c08:	71bb      	strb	r3, [r7, #6]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001c0e:	79bb      	ldrb	r3, [r7, #6]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	79f9      	ldrb	r1, [r7, #7]
 8001c14:	2301      	movs	r3, #1
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	1d7b      	adds	r3, r7, #5
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <SENSOR_IO_Write+0x30>)
 8001c20:	f7ff ffa5 	bl	8001b6e <I2Cx_WriteMultiple>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000c7c 	.word	0x20000c7c

08001c30 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	4603      	mov	r3, r0
 8001c38:	460a      	mov	r2, r1
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001c44:	79bb      	ldrb	r3, [r7, #6]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	79f9      	ldrb	r1, [r7, #7]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	f107 030f 	add.w	r3, r7, #15
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2301      	movs	r3, #1
 8001c56:	4804      	ldr	r0, [pc, #16]	; (8001c68 <SENSOR_IO_Read+0x38>)
 8001c58:	f7ff ff5c 	bl	8001b14 <I2Cx_ReadMultiple>

  return read_value;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000c7c 	.word	0x20000c7c

08001c6c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	603a      	str	r2, [r7, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	71bb      	strb	r3, [r7, #6]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	79f9      	ldrb	r1, [r7, #7]
 8001c88:	88bb      	ldrh	r3, [r7, #4]
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <SENSOR_IO_ReadMultiple+0x38>)
 8001c94:	f7ff ff3e 	bl	8001b14 <I2Cx_ReadMultiple>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	b29b      	uxth	r3, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000c7c 	.word	0x20000c7c

08001ca8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <BSP_HSENSOR_Init+0x38>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	20be      	movs	r0, #190	; 0xbe
 8001cb4:	4798      	blx	r3
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2bbc      	cmp	r3, #188	; 0xbc
 8001cba:	d002      	beq.n	8001cc2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	e009      	b.n	8001cd6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <BSP_HSENSOR_Init+0x3c>)
 8001cc4:	4a06      	ldr	r2, [pc, #24]	; (8001ce0 <BSP_HSENSOR_Init+0x38>)
 8001cc6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <BSP_HSENSOR_Init+0x3c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	20be      	movs	r0, #190	; 0xbe
 8001cd0:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001cd6:	687b      	ldr	r3, [r7, #4]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000430 	.word	0x20000430
 8001ce4:	20000cd0 	.word	0x20000cd0

08001ce8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	20be      	movs	r0, #190	; 0xbe
 8001cf4:	4798      	blx	r3
 8001cf6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000cd0 	.word	0x20000cd0

08001d04 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2120      	movs	r1, #32
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff8b 	bl	8001c30 <SENSOR_IO_Read>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	f023 0303 	bic.w	r3, r3, #3
 8001d34:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d44:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff54 	bl	8001bfc <SENSOR_IO_Write>
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001d6a:	f7ff ff3d 	bl	8001be8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	210f      	movs	r1, #15
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5b 	bl	8001c30 <SENSOR_IO_Read>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	b2d8      	uxtb	r0, r3
 8001d96:	f107 020c 	add.w	r2, r7, #12
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	21b0      	movs	r1, #176	; 0xb0
 8001d9e:	f7ff ff65 	bl	8001c6c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001da2:	7b3b      	ldrb	r3, [r7, #12]
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001daa:	7b7b      	ldrb	r3, [r7, #13]
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	b2d8      	uxtb	r0, r3
 8001db6:	f107 020c 	add.w	r2, r7, #12
 8001dba:	2302      	movs	r3, #2
 8001dbc:	21b6      	movs	r1, #182	; 0xb6
 8001dbe:	f7ff ff55 	bl	8001c6c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001dc2:	7b7b      	ldrb	r3, [r7, #13]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	7b3b      	ldrb	r3, [r7, #12]
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	b2d8      	uxtb	r0, r3
 8001dd4:	f107 020c 	add.w	r2, r7, #12
 8001dd8:	2302      	movs	r3, #2
 8001dda:	21ba      	movs	r1, #186	; 0xba
 8001ddc:	f7ff ff46 	bl	8001c6c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001de0:	7b7b      	ldrb	r3, [r7, #13]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	7b3b      	ldrb	r3, [r7, #12]
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	4313      	orrs	r3, r2
 8001dec:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	b2d8      	uxtb	r0, r3
 8001df2:	f107 020c 	add.w	r2, r7, #12
 8001df6:	2302      	movs	r3, #2
 8001df8:	21a8      	movs	r1, #168	; 0xa8
 8001dfa:	f7ff ff37 	bl	8001c6c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001dfe:	7b7b      	ldrb	r3, [r7, #13]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b21a      	sxth	r2, r3
 8001e04:	7b3b      	ldrb	r3, [r7, #12]
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001e0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e10:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e22:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e30:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e34:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001e38:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001e6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e72:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001eb8 <HTS221_H_ReadHumidity+0x130>
 8001e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	dd01      	ble.n	8001e84 <HTS221_H_ReadHumidity+0xfc>
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HTS221_H_ReadHumidity+0x134>)
 8001e82:	e00a      	b.n	8001e9a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001e84:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e90:	d502      	bpl.n	8001e98 <HTS221_H_ReadHumidity+0x110>
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	e000      	b.n	8001e9a <HTS221_H_ReadHumidity+0x112>
 8001e98:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001e9a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001e9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ea4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ea8:	eef0 7a66 	vmov.f32	s15, s13
}
 8001eac:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	447a0000 	.word	0x447a0000
 8001ebc:	447a0000 	.word	0x447a0000

08001ec0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eca:	2003      	movs	r0, #3
 8001ecc:	f000 f960 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f000 f80d 	bl	8001ef0 <HAL_InitTick>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	e001      	b.n	8001ee6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee2:	f7ff f9f9 	bl	80012d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_InitTick+0x6c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d023      	beq.n	8001f4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_InitTick+0x70>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HAL_InitTick+0x6c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f96d 	bl	80021fa <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10f      	bne.n	8001f46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b0f      	cmp	r3, #15
 8001f2a:	d809      	bhi.n	8001f40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	f000 f937 	bl	80021a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_InitTick+0x74>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e007      	b.n	8001f50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e004      	b.n	8001f50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e001      	b.n	8001f50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000440 	.word	0x20000440
 8001f60:	2000042c 	.word	0x2000042c
 8001f64:	2000043c 	.word	0x2000043c

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000440 	.word	0x20000440
 8001f8c:	20000cd4 	.word	0x20000cd4

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000cd4 	.word	0x20000cd4

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000440 	.word	0x20000440

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f7ff ff8e 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff29 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff3e 	bl	8002038 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff8e 	bl	80020e4 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5d 	bl	8002090 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff31 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffa2 	bl	800214c <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0ac      	b.n	8002380 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f8b2 	bl	8002394 <DFSDM_GetChannelFromInstance>
 8002230:	4603      	mov	r3, r0
 8002232:	4a55      	ldr	r2, [pc, #340]	; (8002388 <HAL_DFSDM_ChannelInit+0x174>)
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e09f      	b.n	8002380 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff f86d 	bl	8001320 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002246:	4b51      	ldr	r3, [pc, #324]	; (800238c <HAL_DFSDM_ChannelInit+0x178>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	4a4f      	ldr	r2, [pc, #316]	; (800238c <HAL_DFSDM_ChannelInit+0x178>)
 800224e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002250:	4b4e      	ldr	r3, [pc, #312]	; (800238c <HAL_DFSDM_ChannelInit+0x178>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d125      	bne.n	80022a4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002258:	4b4d      	ldr	r3, [pc, #308]	; (8002390 <HAL_DFSDM_ChannelInit+0x17c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <HAL_DFSDM_ChannelInit+0x17c>)
 800225e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002262:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002264:	4b4a      	ldr	r3, [pc, #296]	; (8002390 <HAL_DFSDM_ChannelInit+0x17c>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4948      	ldr	r1, [pc, #288]	; (8002390 <HAL_DFSDM_ChannelInit+0x17c>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002272:	4b47      	ldr	r3, [pc, #284]	; (8002390 <HAL_DFSDM_ChannelInit+0x17c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a46      	ldr	r2, [pc, #280]	; (8002390 <HAL_DFSDM_ChannelInit+0x17c>)
 8002278:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800227c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	791b      	ldrb	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d108      	bne.n	8002298 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002286:	4b42      	ldr	r3, [pc, #264]	; (8002390 <HAL_DFSDM_ChannelInit+0x17c>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	3b01      	subs	r3, #1
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	493f      	ldr	r1, [pc, #252]	; (8002390 <HAL_DFSDM_ChannelInit+0x17c>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002298:	4b3d      	ldr	r3, [pc, #244]	; (8002390 <HAL_DFSDM_ChannelInit+0x17c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a3c      	ldr	r2, [pc, #240]	; (8002390 <HAL_DFSDM_ChannelInit+0x17c>)
 800229e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022a2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80022b2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022c2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022c8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 020f 	bic.w	r2, r2, #15
 80022e0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002308:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6899      	ldr	r1, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	3b01      	subs	r3, #1
 800231a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f002 0207 	and.w	r2, r2, #7
 8002334:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002360:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f810 	bl	8002394 <DFSDM_GetChannelFromInstance>
 8002374:	4602      	mov	r2, r0
 8002376:	4904      	ldr	r1, [pc, #16]	; (8002388 <HAL_DFSDM_ChannelInit+0x174>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000cdc 	.word	0x20000cdc
 800238c:	20000cd8 	.word	0x20000cd8
 8002390:	40016000 	.word	0x40016000

08002394 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <DFSDM_GetChannelFromInstance+0x7c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d102      	bne.n	80023aa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e02b      	b.n	8002402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a19      	ldr	r2, [pc, #100]	; (8002414 <DFSDM_GetChannelFromInstance+0x80>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d102      	bne.n	80023b8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80023b2:	2301      	movs	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e024      	b.n	8002402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a17      	ldr	r2, [pc, #92]	; (8002418 <DFSDM_GetChannelFromInstance+0x84>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d102      	bne.n	80023c6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80023c0:	2302      	movs	r3, #2
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e01d      	b.n	8002402 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <DFSDM_GetChannelFromInstance+0x88>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d102      	bne.n	80023d4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80023ce:	2304      	movs	r3, #4
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	e016      	b.n	8002402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <DFSDM_GetChannelFromInstance+0x8c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d102      	bne.n	80023e2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80023dc:	2305      	movs	r3, #5
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e00f      	b.n	8002402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <DFSDM_GetChannelFromInstance+0x90>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d102      	bne.n	80023f0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80023ea:	2306      	movs	r3, #6
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e008      	b.n	8002402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <DFSDM_GetChannelFromInstance+0x94>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d102      	bne.n	80023fe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80023f8:	2307      	movs	r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	e001      	b.n	8002402 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80023fe:	2303      	movs	r3, #3
 8002400:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40016000 	.word	0x40016000
 8002414:	40016020 	.word	0x40016020
 8002418:	40016040 	.word	0x40016040
 800241c:	40016080 	.word	0x40016080
 8002420:	400160a0 	.word	0x400160a0
 8002424:	400160c0 	.word	0x400160c0
 8002428:	400160e0 	.word	0x400160e0

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243a:	e17f      	b.n	800273c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8171 	beq.w	8002736 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d005      	beq.n	800246c <HAL_GPIO_Init+0x40>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d130      	bne.n	80024ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024a2:	2201      	movs	r2, #1
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 0201 	and.w	r2, r3, #1
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d118      	bne.n	800250c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	08db      	lsrs	r3, r3, #3
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b03      	cmp	r3, #3
 8002516:	d017      	beq.n	8002548 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d123      	bne.n	800259c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	6939      	ldr	r1, [r7, #16]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80ac 	beq.w	8002736 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_GPIO_Init+0x330>)
 80025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e2:	4a5e      	ldr	r2, [pc, #376]	; (800275c <HAL_GPIO_Init+0x330>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6613      	str	r3, [r2, #96]	; 0x60
 80025ea:	4b5c      	ldr	r3, [pc, #368]	; (800275c <HAL_GPIO_Init+0x330>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025f6:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <HAL_GPIO_Init+0x334>)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002620:	d025      	beq.n	800266e <HAL_GPIO_Init+0x242>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4f      	ldr	r2, [pc, #316]	; (8002764 <HAL_GPIO_Init+0x338>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01f      	beq.n	800266a <HAL_GPIO_Init+0x23e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4e      	ldr	r2, [pc, #312]	; (8002768 <HAL_GPIO_Init+0x33c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x23a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4d      	ldr	r2, [pc, #308]	; (800276c <HAL_GPIO_Init+0x340>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x236>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <HAL_GPIO_Init+0x344>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x232>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4b      	ldr	r2, [pc, #300]	; (8002774 <HAL_GPIO_Init+0x348>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x22e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4a      	ldr	r2, [pc, #296]	; (8002778 <HAL_GPIO_Init+0x34c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x22a>
 8002652:	2306      	movs	r3, #6
 8002654:	e00c      	b.n	8002670 <HAL_GPIO_Init+0x244>
 8002656:	2307      	movs	r3, #7
 8002658:	e00a      	b.n	8002670 <HAL_GPIO_Init+0x244>
 800265a:	2305      	movs	r3, #5
 800265c:	e008      	b.n	8002670 <HAL_GPIO_Init+0x244>
 800265e:	2304      	movs	r3, #4
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x244>
 8002662:	2303      	movs	r3, #3
 8002664:	e004      	b.n	8002670 <HAL_GPIO_Init+0x244>
 8002666:	2302      	movs	r3, #2
 8002668:	e002      	b.n	8002670 <HAL_GPIO_Init+0x244>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x244>
 800266e:	2300      	movs	r3, #0
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	f002 0203 	and.w	r2, r2, #3
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	4093      	lsls	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002680:	4937      	ldr	r1, [pc, #220]	; (8002760 <HAL_GPIO_Init+0x334>)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800268e:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_GPIO_Init+0x350>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026b2:	4a32      	ldr	r2, [pc, #200]	; (800277c <HAL_GPIO_Init+0x350>)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026b8:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_GPIO_Init+0x350>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026dc:	4a27      	ldr	r2, [pc, #156]	; (800277c <HAL_GPIO_Init+0x350>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_GPIO_Init+0x350>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <HAL_GPIO_Init+0x350>)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_GPIO_Init+0x350>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43db      	mvns	r3, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002730:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_GPIO_Init+0x350>)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3301      	adds	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	f47f ae78 	bne.w	800243c <HAL_GPIO_Init+0x10>
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	40010000 	.word	0x40010000
 8002764:	48000400 	.word	0x48000400
 8002768:	48000800 	.word	0x48000800
 800276c:	48000c00 	.word	0x48000c00
 8002770:	48001000 	.word	0x48001000
 8002774:	48001400 	.word	0x48001400
 8002778:	48001800 	.word	0x48001800
 800277c:	40010400 	.word	0x40010400

08002780 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800278e:	e0cd      	b.n	800292c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002790:	2201      	movs	r2, #1
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80c0 	beq.w	8002926 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027a6:	4a68      	ldr	r2, [pc, #416]	; (8002948 <HAL_GPIO_DeInit+0x1c8>)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	220f      	movs	r2, #15
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ce:	d025      	beq.n	800281c <HAL_GPIO_DeInit+0x9c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a5e      	ldr	r2, [pc, #376]	; (800294c <HAL_GPIO_DeInit+0x1cc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d01f      	beq.n	8002818 <HAL_GPIO_DeInit+0x98>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a5d      	ldr	r2, [pc, #372]	; (8002950 <HAL_GPIO_DeInit+0x1d0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d019      	beq.n	8002814 <HAL_GPIO_DeInit+0x94>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a5c      	ldr	r2, [pc, #368]	; (8002954 <HAL_GPIO_DeInit+0x1d4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d013      	beq.n	8002810 <HAL_GPIO_DeInit+0x90>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a5b      	ldr	r2, [pc, #364]	; (8002958 <HAL_GPIO_DeInit+0x1d8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00d      	beq.n	800280c <HAL_GPIO_DeInit+0x8c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a5a      	ldr	r2, [pc, #360]	; (800295c <HAL_GPIO_DeInit+0x1dc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <HAL_GPIO_DeInit+0x88>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a59      	ldr	r2, [pc, #356]	; (8002960 <HAL_GPIO_DeInit+0x1e0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_GPIO_DeInit+0x84>
 8002800:	2306      	movs	r3, #6
 8002802:	e00c      	b.n	800281e <HAL_GPIO_DeInit+0x9e>
 8002804:	2307      	movs	r3, #7
 8002806:	e00a      	b.n	800281e <HAL_GPIO_DeInit+0x9e>
 8002808:	2305      	movs	r3, #5
 800280a:	e008      	b.n	800281e <HAL_GPIO_DeInit+0x9e>
 800280c:	2304      	movs	r3, #4
 800280e:	e006      	b.n	800281e <HAL_GPIO_DeInit+0x9e>
 8002810:	2303      	movs	r3, #3
 8002812:	e004      	b.n	800281e <HAL_GPIO_DeInit+0x9e>
 8002814:	2302      	movs	r3, #2
 8002816:	e002      	b.n	800281e <HAL_GPIO_DeInit+0x9e>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <HAL_GPIO_DeInit+0x9e>
 800281c:	2300      	movs	r3, #0
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	f002 0203 	and.w	r2, r2, #3
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	4093      	lsls	r3, r2
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	429a      	cmp	r2, r3
 800282c:	d132      	bne.n	8002894 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800282e:	4b4d      	ldr	r3, [pc, #308]	; (8002964 <HAL_GPIO_DeInit+0x1e4>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	494b      	ldr	r1, [pc, #300]	; (8002964 <HAL_GPIO_DeInit+0x1e4>)
 8002838:	4013      	ands	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800283c:	4b49      	ldr	r3, [pc, #292]	; (8002964 <HAL_GPIO_DeInit+0x1e4>)
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	4947      	ldr	r1, [pc, #284]	; (8002964 <HAL_GPIO_DeInit+0x1e4>)
 8002846:	4013      	ands	r3, r2
 8002848:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800284a:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_GPIO_DeInit+0x1e4>)
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	4944      	ldr	r1, [pc, #272]	; (8002964 <HAL_GPIO_DeInit+0x1e4>)
 8002854:	4013      	ands	r3, r2
 8002856:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <HAL_GPIO_DeInit+0x1e4>)
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	4940      	ldr	r1, [pc, #256]	; (8002964 <HAL_GPIO_DeInit+0x1e4>)
 8002862:	4013      	ands	r3, r2
 8002864:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	220f      	movs	r2, #15
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002876:	4a34      	ldr	r2, [pc, #208]	; (8002948 <HAL_GPIO_DeInit+0x1c8>)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	3302      	adds	r3, #2
 800287e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43da      	mvns	r2, r3
 8002886:	4830      	ldr	r0, [pc, #192]	; (8002948 <HAL_GPIO_DeInit+0x1c8>)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	400a      	ands	r2, r1
 800288e:	3302      	adds	r3, #2
 8002890:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2103      	movs	r1, #3
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	08d2      	lsrs	r2, r2, #3
 80028c8:	4019      	ands	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2103      	movs	r1, #3
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	401a      	ands	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	2101      	movs	r1, #1
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2103      	movs	r1, #3
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	401a      	ands	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002916:	2101      	movs	r1, #1
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	401a      	ands	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3301      	adds	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f af2b 	bne.w	8002790 <HAL_GPIO_DeInit+0x10>
  }
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40010000 	.word	0x40010000
 800294c:	48000400 	.word	0x48000400
 8002950:	48000800 	.word	0x48000800
 8002954:	48000c00 	.word	0x48000c00
 8002958:	48001000 	.word	0x48001000
 800295c:	48001400 	.word	0x48001400
 8002960:	48001800 	.word	0x48001800
 8002964:	40010400 	.word	0x40010400

08002968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002984:	e002      	b.n	800298c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f806 	bl	80029c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40010400 	.word	0x40010400

080029c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e081      	b.n	8002af4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7fe fcef 	bl	80013e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2224      	movs	r2, #36	; 0x24
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	e006      	b.n	8002a66 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d104      	bne.n	8002a78 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a76:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69d9      	ldr	r1, [r3, #28]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1a      	ldr	r2, [r3, #32]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e021      	b.n	8002b52 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe fcbc 	bl	80014a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	813b      	strh	r3, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	f040 80f9 	bne.w	8002d76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_I2C_Mem_Write+0x34>
 8002b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0ed      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_I2C_Mem_Write+0x4e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0e6      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bb2:	f7ff f9ed 	bl	8001f90 <HAL_GetTick>
 8002bb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2319      	movs	r3, #25
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fac3 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0d1      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2221      	movs	r2, #33	; 0x21
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bfc:	88f8      	ldrh	r0, [r7, #6]
 8002bfe:	893a      	ldrh	r2, [r7, #8]
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f9d3 	bl	8002fb8 <I2C_RequestMemoryWrite>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0a9      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2bff      	cmp	r3, #255	; 0xff
 8002c2c:	d90e      	bls.n	8002c4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	8979      	ldrh	r1, [r7, #10]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fc2b 	bl	80034a0 <I2C_TransferConfig>
 8002c4a:	e00f      	b.n	8002c6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	8979      	ldrh	r1, [r7, #10]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fc1a 	bl	80034a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 faad 	bl	80031d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e07b      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d034      	beq.n	8002d24 <HAL_I2C_Mem_Write+0x1c8>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d130      	bne.n	8002d24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fa3f 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e04d      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2bff      	cmp	r3, #255	; 0xff
 8002ce4:	d90e      	bls.n	8002d04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	22ff      	movs	r2, #255	; 0xff
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	8979      	ldrh	r1, [r7, #10]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fbcf 	bl	80034a0 <I2C_TransferConfig>
 8002d02:	e00f      	b.n	8002d24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	8979      	ldrh	r1, [r7, #10]
 8002d16:	2300      	movs	r3, #0
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fbbe 	bl	80034a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d19e      	bne.n	8002c6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fa8c 	bl	8003250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e01a      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2220      	movs	r2, #32
 8002d48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_I2C_Mem_Write+0x224>)
 8002d56:	400b      	ands	r3, r1
 8002d58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	fe00e800 	.word	0xfe00e800

08002d84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	817b      	strh	r3, [r7, #10]
 8002d96:	460b      	mov	r3, r1
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	f040 80fd 	bne.w	8002fa6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_I2C_Mem_Read+0x34>
 8002db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0f1      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Mem_Read+0x4e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e0ea      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dda:	f7ff f8d9 	bl	8001f90 <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2319      	movs	r3, #25
 8002de6:	2201      	movs	r2, #1
 8002de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f9af 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0d5      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2222      	movs	r2, #34	; 0x22
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2240      	movs	r2, #64	; 0x40
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e24:	88f8      	ldrh	r0, [r7, #6]
 8002e26:	893a      	ldrh	r2, [r7, #8]
 8002e28:	8979      	ldrh	r1, [r7, #10]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	4603      	mov	r3, r0
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f913 	bl	8003060 <I2C_RequestMemoryRead>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0ad      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2bff      	cmp	r3, #255	; 0xff
 8002e54:	d90e      	bls.n	8002e74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	8979      	ldrh	r1, [r7, #10]
 8002e64:	4b52      	ldr	r3, [pc, #328]	; (8002fb0 <HAL_I2C_Mem_Read+0x22c>)
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fb17 	bl	80034a0 <I2C_TransferConfig>
 8002e72:	e00f      	b.n	8002e94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	8979      	ldrh	r1, [r7, #10]
 8002e86:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_I2C_Mem_Read+0x22c>)
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fb06 	bl	80034a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f956 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e07c      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d034      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x1d0>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d130      	bne.n	8002f54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f927 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e04d      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2bff      	cmp	r3, #255	; 0xff
 8002f14:	d90e      	bls.n	8002f34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	22ff      	movs	r2, #255	; 0xff
 8002f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	8979      	ldrh	r1, [r7, #10]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fab7 	bl	80034a0 <I2C_TransferConfig>
 8002f32:	e00f      	b.n	8002f54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 faa6 	bl	80034a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d19a      	bne.n	8002e94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f974 	bl	8003250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e01a      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2220      	movs	r2, #32
 8002f78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_I2C_Mem_Read+0x230>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	80002400 	.word	0x80002400
 8002fb4:	fe00e800 	.word	0xfe00e800

08002fb8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	817b      	strh	r3, [r7, #10]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	813b      	strh	r3, [r7, #8]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	8979      	ldrh	r1, [r7, #10]
 8002fd8:	4b20      	ldr	r3, [pc, #128]	; (800305c <I2C_RequestMemoryWrite+0xa4>)
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fa5d 	bl	80034a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	69b9      	ldr	r1, [r7, #24]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f8f0 	bl	80031d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e02c      	b.n	8003054 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d105      	bne.n	800300c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003000:	893b      	ldrh	r3, [r7, #8]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	629a      	str	r2, [r3, #40]	; 0x28
 800300a:	e015      	b.n	8003038 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	b29b      	uxth	r3, r3
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	69b9      	ldr	r1, [r7, #24]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f8d6 	bl	80031d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e012      	b.n	8003054 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800302e:	893b      	ldrh	r3, [r7, #8]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2200      	movs	r2, #0
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f884 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	80002000 	.word	0x80002000

08003060 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4603      	mov	r3, r0
 8003070:	817b      	strh	r3, [r7, #10]
 8003072:	460b      	mov	r3, r1
 8003074:	813b      	strh	r3, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	8979      	ldrh	r1, [r7, #10]
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <I2C_RequestMemoryRead+0xa4>)
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2300      	movs	r3, #0
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fa0a 	bl	80034a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f89d 	bl	80031d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e02c      	b.n	80030fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030a6:	893b      	ldrh	r3, [r7, #8]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
 80030b0:	e015      	b.n	80030de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030b2:	893b      	ldrh	r3, [r7, #8]
 80030b4:	0a1b      	lsrs	r3, r3, #8
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	69b9      	ldr	r1, [r7, #24]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f883 	bl	80031d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e012      	b.n	80030fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2140      	movs	r1, #64	; 0x40
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f831 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	80002000 	.word	0x80002000

08003108 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b02      	cmp	r3, #2
 800311c:	d103      	bne.n	8003126 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d007      	beq.n	8003144 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	619a      	str	r2, [r3, #24]
  }
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003160:	e022      	b.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d01e      	beq.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fe ff11 	bl	8001f90 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d113      	bne.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e00f      	b.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d0cd      	beq.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031dc:	e02c      	b.n	8003238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f870 	bl	80032c8 <I2C_IsErrorOccurred>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e02a      	b.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d01e      	beq.n	8003238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7fe fec9 	bl	8001f90 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d113      	bne.n	8003238 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e007      	b.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b02      	cmp	r3, #2
 8003244:	d1cb      	bne.n	80031de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800325c:	e028      	b.n	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f830 	bl	80032c8 <I2C_IsErrorOccurred>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e026      	b.n	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003272:	f7fe fe8d 	bl	8001f90 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d113      	bne.n	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e007      	b.n	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d1cf      	bne.n	800325e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d075      	beq.n	80033e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2210      	movs	r2, #16
 80032fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032fc:	e056      	b.n	80033ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d052      	beq.n	80033ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7fe fe43 	bl	8001f90 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <I2C_IsErrorOccurred+0x54>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d147      	bne.n	80033ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003326:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800332e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800333a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333e:	d12e      	bne.n	800339e <I2C_IsErrorOccurred+0xd6>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003346:	d02a      	beq.n	800339e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	2b20      	cmp	r3, #32
 800334c:	d027      	beq.n	800339e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800335c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800335e:	f7fe fe17 	bl	8001f90 <HAL_GetTick>
 8003362:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003364:	e01b      	b.n	800339e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003366:	f7fe fe13 	bl	8001f90 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b19      	cmp	r3, #25
 8003372:	d914      	bls.n	800339e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d1dc      	bne.n	8003366 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d003      	beq.n	80033c2 <I2C_IsErrorOccurred+0xfa>
 80033ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d09d      	beq.n	80032fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2220      	movs	r2, #32
 80033d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003402:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	f043 0308 	orr.w	r3, r3, #8
 800341a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003424:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003446:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800344e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01c      	beq.n	8003490 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff fe56 	bl	8003108 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <I2C_IsErrorOccurred+0x1d4>)
 8003468:	400b      	ands	r3, r1
 800346a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003494:	4618      	mov	r0, r3
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	fe00e800 	.word	0xfe00e800

080034a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	460b      	mov	r3, r1
 80034ac:	817b      	strh	r3, [r7, #10]
 80034ae:	4613      	mov	r3, r2
 80034b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034b2:	897b      	ldrh	r3, [r7, #10]
 80034b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034b8:	7a7b      	ldrb	r3, [r7, #9]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	0d5b      	lsrs	r3, r3, #21
 80034da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <I2C_TransferConfig+0x60>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	43db      	mvns	r3, r3
 80034e4:	ea02 0103 	and.w	r1, r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	03ff63ff 	.word	0x03ff63ff

08003504 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b20      	cmp	r3, #32
 8003518:	d138      	bne.n	800358c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003524:	2302      	movs	r3, #2
 8003526:	e032      	b.n	800358e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003556:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	e000      	b.n	800358e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d139      	bne.n	8003624 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e033      	b.n	8003626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2224      	movs	r2, #36	; 0x24
 80035ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003634:	b08f      	sub	sp, #60	; 0x3c
 8003636:	af0a      	add	r7, sp, #40	; 0x28
 8003638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e116      	b.n	8003872 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe f870 	bl	8001744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2203      	movs	r2, #3
 8003668:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f002 fb43 	bl	8005d0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	687e      	ldr	r6, [r7, #4]
 8003690:	466d      	mov	r5, sp
 8003692:	f106 0410 	add.w	r4, r6, #16
 8003696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800369a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800369c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800369e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80036a6:	1d33      	adds	r3, r6, #4
 80036a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	f002 fb03 	bl	8005cb6 <USB_CoreInit>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0d7      	b.n	8003872 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f002 fb31 	bl	8005d30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	e04a      	b.n	800376a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	333d      	adds	r3, #61	; 0x3d
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	333c      	adds	r3, #60	; 0x3c
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036fc:	7bfa      	ldrb	r2, [r7, #15]
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	b298      	uxth	r0, r3
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	3344      	adds	r3, #68	; 0x44
 8003710:	4602      	mov	r2, r0
 8003712:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3340      	adds	r3, #64	; 0x40
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3348      	adds	r3, #72	; 0x48
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334c      	adds	r3, #76	; 0x4c
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3354      	adds	r3, #84	; 0x54
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	3301      	adds	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d3af      	bcc.n	80036d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003774:	2300      	movs	r3, #0
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	e044      	b.n	8003804 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800377a:	7bfa      	ldrb	r2, [r7, #15]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	3301      	adds	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d3b5      	bcc.n	800377a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	687e      	ldr	r6, [r7, #4]
 8003816:	466d      	mov	r5, sp
 8003818:	f106 0410 	add.w	r4, r6, #16
 800381c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003828:	e885 0003 	stmia.w	r5, {r0, r1}
 800382c:	1d33      	adds	r3, r6, #4
 800382e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003830:	6838      	ldr	r0, [r7, #0]
 8003832:	f002 fac9 	bl	8005dc8 <USB_DevInit>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e014      	b.n	8003872 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	2b01      	cmp	r3, #1
 800385e:	d102      	bne.n	8003866 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f80a 	bl	800387a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f002 fc75 	bl	800615a <USB_DevDisconnect>

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800387a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	f043 0303 	orr.w	r3, r3, #3
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40007000 	.word	0x40007000

080038e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <HAL_PWREx_GetVoltageRange+0x18>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40007000 	.word	0x40007000

08003900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390e:	d130      	bne.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003910:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d038      	beq.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003926:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800392c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800392e:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2232      	movs	r2, #50	; 0x32
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0c9b      	lsrs	r3, r3, #18
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003944:	e002      	b.n	800394c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3b01      	subs	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003958:	d102      	bne.n	8003960 <HAL_PWREx_ControlVoltageScaling+0x60>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f2      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396c:	d110      	bne.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e00f      	b.n	8003992 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800397a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397e:	d007      	beq.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003988:	4a05      	ldr	r2, [pc, #20]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40007000 	.word	0x40007000
 80039a4:	2000042c 	.word	0x2000042c
 80039a8:	431bde83 	.word	0x431bde83

080039ac <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80039b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ba:	6053      	str	r3, [r2, #4]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40007000 	.word	0x40007000

080039cc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7fe fadc 	bl	8001f90 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e063      	b.n	8003aac <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fd fd77 	bl	80014ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80039fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f858 	bl	8003ab8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	021a      	lsls	r2, r3, #8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f850 	bl	8003ad4 <QSPI_WaitFlagStateUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003a38:	7afb      	ldrb	r3, [r7, #11]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d131      	bne.n	8003aa2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a48:	f023 0310 	bic.w	r3, r3, #16
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6852      	ldr	r2, [r2, #4]
 8003a50:	0611      	lsls	r1, r2, #24
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68d2      	ldr	r2, [r2, #12]
 8003a56:	4311      	orrs	r1, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <HAL_QSPI_Init+0xe8>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6912      	ldr	r2, [r2, #16]
 8003a6e:	0411      	lsls	r1, r2, #16
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6952      	ldr	r2, [r2, #20]
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6992      	ldr	r2, [r2, #24]
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	ffe0f8fe 	.word	0xffe0f8fe

08003ab8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ae4:	e01a      	b.n	8003b1c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d016      	beq.n	8003b1c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	f7fe fa4f 	bl	8001f90 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2204      	movs	r2, #4
 8003b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e00e      	b.n	8003b3a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bf14      	ite	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	2300      	moveq	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1d6      	bne.n	8003ae6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e3ca      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b56:	4b97      	ldr	r3, [pc, #604]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b60:	4b94      	ldr	r3, [pc, #592]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 80e4 	beq.w	8003d40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <HAL_RCC_OscConfig+0x4a>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b0c      	cmp	r3, #12
 8003b82:	f040 808b 	bne.w	8003c9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 8087 	bne.w	8003c9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b8e:	4b89      	ldr	r3, [pc, #548]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x62>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e3a2      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1a      	ldr	r2, [r3, #32]
 8003baa:	4b82      	ldr	r3, [pc, #520]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x7c>
 8003bb6:	4b7f      	ldr	r3, [pc, #508]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bbe:	e005      	b.n	8003bcc <HAL_RCC_OscConfig+0x88>
 8003bc0:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d223      	bcs.n	8003c18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fd55 	bl	8004684 <RCC_SetFlashLatencyFromMSIRange>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e383      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003be4:	4b73      	ldr	r3, [pc, #460]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a72      	ldr	r2, [pc, #456]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bea:	f043 0308 	orr.w	r3, r3, #8
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b70      	ldr	r3, [pc, #448]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	496d      	ldr	r1, [pc, #436]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c02:	4b6c      	ldr	r3, [pc, #432]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	4968      	ldr	r1, [pc, #416]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
 8003c16:	e025      	b.n	8003c64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c18:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a65      	ldr	r2, [pc, #404]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c1e:	f043 0308 	orr.w	r3, r3, #8
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4960      	ldr	r1, [pc, #384]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c36:	4b5f      	ldr	r3, [pc, #380]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	495b      	ldr	r1, [pc, #364]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fd15 	bl	8004684 <RCC_SetFlashLatencyFromMSIRange>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e343      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c64:	f000 fc4a 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b52      	ldr	r3, [pc, #328]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	4950      	ldr	r1, [pc, #320]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c80:	4a4e      	ldr	r2, [pc, #312]	; (8003dbc <HAL_RCC_OscConfig+0x278>)
 8003c82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c84:	4b4e      	ldr	r3, [pc, #312]	; (8003dc0 <HAL_RCC_OscConfig+0x27c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe f931 	bl	8001ef0 <HAL_InitTick>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d052      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	e327      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d032      	beq.n	8003d0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ca4:	4b43      	ldr	r3, [pc, #268]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a42      	ldr	r2, [pc, #264]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f96e 	bl	8001f90 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cb8:	f7fe f96a 	bl	8001f90 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e310      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cca:	4b3a      	ldr	r3, [pc, #232]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a36      	ldr	r2, [pc, #216]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	f043 0308 	orr.w	r3, r3, #8
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	4931      	ldr	r1, [pc, #196]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf4:	4b2f      	ldr	r3, [pc, #188]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	492c      	ldr	r1, [pc, #176]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
 8003d08:	e01a      	b.n	8003d40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d0a:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a29      	ldr	r2, [pc, #164]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d16:	f7fe f93b 	bl	8001f90 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d1e:	f7fe f937 	bl	8001f90 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e2dd      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d30:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <HAL_RCC_OscConfig+0x1da>
 8003d3c:	e000      	b.n	8003d40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d074      	beq.n	8003e36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d005      	beq.n	8003d5e <HAL_RCC_OscConfig+0x21a>
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b0c      	cmp	r3, #12
 8003d56:	d10e      	bne.n	8003d76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d10b      	bne.n	8003d76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d064      	beq.n	8003e34 <HAL_RCC_OscConfig+0x2f0>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d160      	bne.n	8003e34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e2ba      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x24a>
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0b      	ldr	r2, [pc, #44]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	e026      	b.n	8003ddc <HAL_RCC_OscConfig+0x298>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d96:	d115      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x280>
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a02      	ldr	r2, [pc, #8]	; (8003db4 <HAL_RCC_OscConfig+0x270>)
 8003daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	e014      	b.n	8003ddc <HAL_RCC_OscConfig+0x298>
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	08006c1c 	.word	0x08006c1c
 8003dbc:	2000042c 	.word	0x2000042c
 8003dc0:	2000043c 	.word	0x2000043c
 8003dc4:	4ba0      	ldr	r3, [pc, #640]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a9f      	ldr	r2, [pc, #636]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b9d      	ldr	r3, [pc, #628]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a9c      	ldr	r2, [pc, #624]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe f8d4 	bl	8001f90 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe f8d0 	bl	8001f90 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e276      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfe:	4b92      	ldr	r3, [pc, #584]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x2a8>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe f8c0 	bl	8001f90 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe f8bc 	bl	8001f90 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e262      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e26:	4b88      	ldr	r3, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x2d0>
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d060      	beq.n	8003f04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_OscConfig+0x310>
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b0c      	cmp	r3, #12
 8003e4c:	d119      	bne.n	8003e82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d116      	bne.n	8003e82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e54:	4b7c      	ldr	r3, [pc, #496]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_OscConfig+0x328>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e23f      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6c:	4b76      	ldr	r3, [pc, #472]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	4973      	ldr	r1, [pc, #460]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e80:	e040      	b.n	8003f04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d023      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e8a:	4b6f      	ldr	r3, [pc, #444]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a6e      	ldr	r2, [pc, #440]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fe f87b 	bl	8001f90 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9e:	f7fe f877 	bl	8001f90 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e21d      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb0:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebc:	4b62      	ldr	r3, [pc, #392]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	495f      	ldr	r1, [pc, #380]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
 8003ed0:	e018      	b.n	8003f04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed2:	4b5d      	ldr	r3, [pc, #372]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a5c      	ldr	r2, [pc, #368]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fe f857 	bl	8001f90 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee6:	f7fe f853 	bl	8001f90 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e1f9      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef8:	4b53      	ldr	r3, [pc, #332]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d03c      	beq.n	8003f8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01c      	beq.n	8003f52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f18:	4b4b      	ldr	r3, [pc, #300]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1e:	4a4a      	ldr	r2, [pc, #296]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fe f832 	bl	8001f90 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fe f82e 	bl	8001f90 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e1d4      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f42:	4b41      	ldr	r3, [pc, #260]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ef      	beq.n	8003f30 <HAL_RCC_OscConfig+0x3ec>
 8003f50:	e01b      	b.n	8003f8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f58:	4a3b      	ldr	r2, [pc, #236]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fe f815 	bl	8001f90 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6a:	f7fe f811 	bl	8001f90 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e1b7      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f7c:	4b32      	ldr	r3, [pc, #200]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1ef      	bne.n	8003f6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80a6 	beq.w	80040e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10d      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb4:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc4:	4b21      	ldr	r3, [pc, #132]	; (800404c <HAL_RCC_OscConfig+0x508>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d118      	bne.n	8004002 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd0:	4b1e      	ldr	r3, [pc, #120]	; (800404c <HAL_RCC_OscConfig+0x508>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	; (800404c <HAL_RCC_OscConfig+0x508>)
 8003fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fdc:	f7fd ffd8 	bl	8001f90 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe4:	f7fd ffd4 	bl	8001f90 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e17a      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_RCC_OscConfig+0x508>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d108      	bne.n	800401c <HAL_RCC_OscConfig+0x4d8>
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004010:	4a0d      	ldr	r2, [pc, #52]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800401a:	e029      	b.n	8004070 <HAL_RCC_OscConfig+0x52c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b05      	cmp	r3, #5
 8004022:	d115      	bne.n	8004050 <HAL_RCC_OscConfig+0x50c>
 8004024:	4b08      	ldr	r3, [pc, #32]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	4a07      	ldr	r2, [pc, #28]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	4a03      	ldr	r2, [pc, #12]	; (8004048 <HAL_RCC_OscConfig+0x504>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004044:	e014      	b.n	8004070 <HAL_RCC_OscConfig+0x52c>
 8004046:	bf00      	nop
 8004048:	40021000 	.word	0x40021000
 800404c:	40007000 	.word	0x40007000
 8004050:	4b9c      	ldr	r3, [pc, #624]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	4a9b      	ldr	r2, [pc, #620]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004060:	4b98      	ldr	r3, [pc, #608]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	4a97      	ldr	r2, [pc, #604]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d016      	beq.n	80040a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fd ff8a 	bl	8001f90 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407e:	e00a      	b.n	8004096 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fd ff86 	bl	8001f90 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e12a      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004096:	4b8b      	ldr	r3, [pc, #556]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0ed      	beq.n	8004080 <HAL_RCC_OscConfig+0x53c>
 80040a4:	e015      	b.n	80040d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a6:	f7fd ff73 	bl	8001f90 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fd ff6f 	bl	8001f90 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e113      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040c4:	4b7f      	ldr	r3, [pc, #508]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ed      	bne.n	80040ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d2:	7ffb      	ldrb	r3, [r7, #31]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d8:	4b7a      	ldr	r3, [pc, #488]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	4a79      	ldr	r2, [pc, #484]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 80040de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80fe 	beq.w	80042ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	f040 80d0 	bne.w	8004298 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040f8:	4b72      	ldr	r3, [pc, #456]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f003 0203 	and.w	r2, r3, #3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	429a      	cmp	r2, r3
 800410a:	d130      	bne.n	800416e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	3b01      	subs	r3, #1
 8004118:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d127      	bne.n	800416e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d11f      	bne.n	800416e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004138:	2a07      	cmp	r2, #7
 800413a:	bf14      	ite	ne
 800413c:	2201      	movne	r2, #1
 800413e:	2200      	moveq	r2, #0
 8004140:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004142:	4293      	cmp	r3, r2
 8004144:	d113      	bne.n	800416e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	3b01      	subs	r3, #1
 8004154:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d109      	bne.n	800416e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	3b01      	subs	r3, #1
 8004168:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d06e      	beq.n	800424c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d069      	beq.n	8004248 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004174:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004180:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0ad      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004190:	4b4c      	ldr	r3, [pc, #304]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a4b      	ldr	r2, [pc, #300]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800419a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800419c:	f7fd fef8 	bl	8001f90 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fd fef4 	bl	8001f90 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e09a      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b6:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041c2:	4b40      	ldr	r3, [pc, #256]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	4b40      	ldr	r3, [pc, #256]	; (80042c8 <HAL_RCC_OscConfig+0x784>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041d2:	3a01      	subs	r2, #1
 80041d4:	0112      	lsls	r2, r2, #4
 80041d6:	4311      	orrs	r1, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041dc:	0212      	lsls	r2, r2, #8
 80041de:	4311      	orrs	r1, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041e4:	0852      	lsrs	r2, r2, #1
 80041e6:	3a01      	subs	r2, #1
 80041e8:	0552      	lsls	r2, r2, #21
 80041ea:	4311      	orrs	r1, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041f0:	0852      	lsrs	r2, r2, #1
 80041f2:	3a01      	subs	r2, #1
 80041f4:	0652      	lsls	r2, r2, #25
 80041f6:	4311      	orrs	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041fc:	0912      	lsrs	r2, r2, #4
 80041fe:	0452      	lsls	r2, r2, #17
 8004200:	430a      	orrs	r2, r1
 8004202:	4930      	ldr	r1, [pc, #192]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004204:	4313      	orrs	r3, r2
 8004206:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004208:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 800420e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004212:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004214:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004220:	f7fd feb6 	bl	8001f90 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004228:	f7fd feb2 	bl	8001f90 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e058      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423a:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004246:	e050      	b.n	80042ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e04f      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d148      	bne.n	80042ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a19      	ldr	r2, [pc, #100]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 800425e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004262:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004264:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4a16      	ldr	r2, [pc, #88]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 800426a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800426e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004270:	f7fd fe8e 	bl	8001f90 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004278:	f7fd fe8a 	bl	8001f90 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e030      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428a:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x734>
 8004296:	e028      	b.n	80042ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b0c      	cmp	r3, #12
 800429c:	d023      	beq.n	80042e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <HAL_RCC_OscConfig+0x780>)
 80042a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd fe71 	bl	8001f90 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b0:	e00c      	b.n	80042cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fd fe6d 	bl	8001f90 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d905      	bls.n	80042cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e013      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
 80042c4:	40021000 	.word	0x40021000
 80042c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCC_OscConfig+0x7b0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ec      	bne.n	80042b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_RCC_OscConfig+0x7b0>)
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	4905      	ldr	r1, [pc, #20]	; (80042f4 <HAL_RCC_OscConfig+0x7b0>)
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_OscConfig+0x7b4>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	60cb      	str	r3, [r1, #12]
 80042e4:	e001      	b.n	80042ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000
 80042f8:	feeefffc 	.word	0xfeeefffc

080042fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0e7      	b.n	80044e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b75      	ldr	r3, [pc, #468]	; (80044e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d910      	bls.n	8004340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b72      	ldr	r3, [pc, #456]	; (80044e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 0207 	bic.w	r2, r3, #7
 8004326:	4970      	ldr	r1, [pc, #448]	; (80044e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b6e      	ldr	r3, [pc, #440]	; (80044e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0cf      	b.n	80044e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d010      	beq.n	800436e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	4b66      	ldr	r3, [pc, #408]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004358:	429a      	cmp	r2, r3
 800435a:	d908      	bls.n	800436e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800435c:	4b63      	ldr	r3, [pc, #396]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4960      	ldr	r1, [pc, #384]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04c      	beq.n	8004414 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d107      	bne.n	8004392 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004382:	4b5a      	ldr	r3, [pc, #360]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d121      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0a6      	b.n	80044e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800439a:	4b54      	ldr	r3, [pc, #336]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d115      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e09a      	b.n	80044e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043b2:	4b4e      	ldr	r3, [pc, #312]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e08e      	b.n	80044e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c2:	4b4a      	ldr	r3, [pc, #296]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e086      	b.n	80044e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043d2:	4b46      	ldr	r3, [pc, #280]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4943      	ldr	r1, [pc, #268]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e4:	f7fd fdd4 	bl	8001f90 <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ec:	f7fd fdd0 	bl	8001f90 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e06e      	b.n	80044e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	4b3a      	ldr	r3, [pc, #232]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 020c 	and.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	429a      	cmp	r2, r3
 8004412:	d1eb      	bne.n	80043ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d010      	beq.n	8004442 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	4b31      	ldr	r3, [pc, #196]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442c:	429a      	cmp	r2, r3
 800442e:	d208      	bcs.n	8004442 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004430:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	492b      	ldr	r1, [pc, #172]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 800443e:	4313      	orrs	r3, r2
 8004440:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004442:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d210      	bcs.n	8004472 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 0207 	bic.w	r2, r3, #7
 8004458:	4923      	ldr	r1, [pc, #140]	; (80044e8 <HAL_RCC_ClockConfig+0x1ec>)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004460:	4b21      	ldr	r3, [pc, #132]	; (80044e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d001      	beq.n	8004472 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e036      	b.n	80044e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800447e:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	4918      	ldr	r1, [pc, #96]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 800448c:	4313      	orrs	r3, r2
 800448e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800449c:	4b13      	ldr	r3, [pc, #76]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4910      	ldr	r1, [pc, #64]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044b0:	f000 f824 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_RCC_ClockConfig+0x1f0>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	490b      	ldr	r1, [pc, #44]	; (80044f0 <HAL_RCC_ClockConfig+0x1f4>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
 80044cc:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <HAL_RCC_ClockConfig+0x1f8>)
 80044ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044d0:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <HAL_RCC_ClockConfig+0x1fc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fd fd0b 	bl	8001ef0 <HAL_InitTick>
 80044da:	4603      	mov	r3, r0
 80044dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80044de:	7afb      	ldrb	r3, [r7, #11]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40022000 	.word	0x40022000
 80044ec:	40021000 	.word	0x40021000
 80044f0:	08006c1c 	.word	0x08006c1c
 80044f4:	2000042c 	.word	0x2000042c
 80044f8:	2000043c 	.word	0x2000043c

080044fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	; 0x24
 8004500:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	2300      	movs	r3, #0
 8004508:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450a:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <HAL_RCC_GetSysClockFreq+0x108>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004514:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_RCC_GetSysClockFreq+0x108>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_GetSysClockFreq+0x34>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d121      	bne.n	800456e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d11e      	bne.n	800456e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004530:	4b34      	ldr	r3, [pc, #208]	; (8004604 <HAL_RCC_GetSysClockFreq+0x108>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d107      	bne.n	800454c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800453c:	4b31      	ldr	r3, [pc, #196]	; (8004604 <HAL_RCC_GetSysClockFreq+0x108>)
 800453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	e005      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800454c:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <HAL_RCC_GetSysClockFreq+0x108>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004558:	4a2b      	ldr	r2, [pc, #172]	; (8004608 <HAL_RCC_GetSysClockFreq+0x10c>)
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004560:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800456c:	e00a      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d102      	bne.n	800457a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_RCC_GetSysClockFreq+0x110>)
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e004      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d101      	bne.n	8004584 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004580:	4b23      	ldr	r3, [pc, #140]	; (8004610 <HAL_RCC_GetSysClockFreq+0x114>)
 8004582:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d134      	bne.n	80045f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800458a:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <HAL_RCC_GetSysClockFreq+0x108>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d003      	beq.n	80045a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d003      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0xac>
 80045a0:	e005      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045a2:	4b1a      	ldr	r3, [pc, #104]	; (800460c <HAL_RCC_GetSysClockFreq+0x110>)
 80045a4:	617b      	str	r3, [r7, #20]
      break;
 80045a6:	e005      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_GetSysClockFreq+0x114>)
 80045aa:	617b      	str	r3, [r7, #20]
      break;
 80045ac:	e002      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	617b      	str	r3, [r7, #20]
      break;
 80045b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045b4:	4b13      	ldr	r3, [pc, #76]	; (8004604 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	091b      	lsrs	r3, r3, #4
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	3301      	adds	r3, #1
 80045c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	fb03 f202 	mul.w	r2, r3, r2
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_RCC_GetSysClockFreq+0x108>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	0e5b      	lsrs	r3, r3, #25
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	3301      	adds	r3, #1
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045f4:	69bb      	ldr	r3, [r7, #24]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3724      	adds	r7, #36	; 0x24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	08006c34 	.word	0x08006c34
 800460c:	00f42400 	.word	0x00f42400
 8004610:	007a1200 	.word	0x007a1200

08004614 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <HAL_RCC_GetHCLKFreq+0x14>)
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	2000042c 	.word	0x2000042c

0800462c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004630:	f7ff fff0 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	4904      	ldr	r1, [pc, #16]	; (8004654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800464c:	4618      	mov	r0, r3
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40021000 	.word	0x40021000
 8004654:	08006c2c 	.word	0x08006c2c

08004658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800465c:	f7ff ffda 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 8004660:	4602      	mov	r2, r0
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	0adb      	lsrs	r3, r3, #11
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	4904      	ldr	r1, [pc, #16]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800466e:	5ccb      	ldrb	r3, [r1, r3]
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40021000 	.word	0x40021000
 8004680:	08006c2c 	.word	0x08006c2c

08004684 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004690:	4b2a      	ldr	r3, [pc, #168]	; (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800469c:	f7ff f922 	bl	80038e4 <HAL_PWREx_GetVoltageRange>
 80046a0:	6178      	str	r0, [r7, #20]
 80046a2:	e014      	b.n	80046ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046a4:	4b25      	ldr	r3, [pc, #148]	; (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	4a24      	ldr	r2, [pc, #144]	; (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ae:	6593      	str	r3, [r2, #88]	; 0x58
 80046b0:	4b22      	ldr	r3, [pc, #136]	; (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046bc:	f7ff f912 	bl	80038e4 <HAL_PWREx_GetVoltageRange>
 80046c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	4a1d      	ldr	r2, [pc, #116]	; (800473c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d4:	d10b      	bne.n	80046ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b80      	cmp	r3, #128	; 0x80
 80046da:	d919      	bls.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2ba0      	cmp	r3, #160	; 0xa0
 80046e0:	d902      	bls.n	80046e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046e2:	2302      	movs	r3, #2
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	e013      	b.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046e8:	2301      	movs	r3, #1
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	e010      	b.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d902      	bls.n	80046fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046f4:	2303      	movs	r3, #3
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	e00a      	b.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b80      	cmp	r3, #128	; 0x80
 80046fe:	d102      	bne.n	8004706 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004700:	2302      	movs	r3, #2
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	e004      	b.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b70      	cmp	r3, #112	; 0x70
 800470a:	d101      	bne.n	8004710 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800470c:	2301      	movs	r3, #1
 800470e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 0207 	bic.w	r2, r3, #7
 8004718:	4909      	ldr	r1, [pc, #36]	; (8004740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	40022000 	.word	0x40022000

08004744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800474c:	2300      	movs	r3, #0
 800474e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004750:	2300      	movs	r3, #0
 8004752:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475c:	2b00      	cmp	r3, #0
 800475e:	d041      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004764:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004768:	d02a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800476a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800476e:	d824      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004774:	d008      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800477a:	d81e      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004784:	d010      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004786:	e018      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004788:	4b86      	ldr	r3, [pc, #536]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a85      	ldr	r2, [pc, #532]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004792:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004794:	e015      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f000 facb 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047a6:	e00c      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3320      	adds	r3, #32
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fbb6 	bl	8004f20 <RCCEx_PLLSAI2_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047b8:	e003      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	74fb      	strb	r3, [r7, #19]
      break;
 80047be:	e000      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047c8:	4b76      	ldr	r3, [pc, #472]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d6:	4973      	ldr	r1, [pc, #460]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047de:	e001      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d041      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047f8:	d02a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80047fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047fe:	d824      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004804:	d008      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800480a:	d81e      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004814:	d010      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004816:	e018      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004818:	4b62      	ldr	r3, [pc, #392]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a61      	ldr	r2, [pc, #388]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004824:	e015      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fa83 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004836:	e00c      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3320      	adds	r3, #32
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fb6e 	bl	8004f20 <RCCEx_PLLSAI2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004848:	e003      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	74fb      	strb	r3, [r7, #19]
      break;
 800484e:	e000      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004858:	4b52      	ldr	r3, [pc, #328]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004866:	494f      	ldr	r1, [pc, #316]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800486e:	e001      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a0 	beq.w	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004886:	4b47      	ldr	r3, [pc, #284]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004896:	2300      	movs	r3, #0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00d      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489c:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	4a40      	ldr	r2, [pc, #256]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6593      	str	r3, [r2, #88]	; 0x58
 80048a8:	4b3e      	ldr	r3, [pc, #248]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b4:	2301      	movs	r3, #1
 80048b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b8:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3a      	ldr	r2, [pc, #232]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048c4:	f7fd fb64 	bl	8001f90 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048ca:	e009      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048cc:	f7fd fb60 	bl	8001f90 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d902      	bls.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	74fb      	strb	r3, [r7, #19]
        break;
 80048de:	e005      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048e0:	4b31      	ldr	r3, [pc, #196]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ef      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d15c      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048f2:	4b2c      	ldr	r3, [pc, #176]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01f      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	429a      	cmp	r2, r3
 800490e:	d019      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800491c:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800492c:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800493c:	4a19      	ldr	r2, [pc, #100]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fd fb1f 	bl	8001f90 <HAL_GetTick>
 8004952:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004954:	e00b      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fd fb1b 	bl	8001f90 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d902      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	74fb      	strb	r3, [r7, #19]
            break;
 800496c:	e006      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ec      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10c      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004982:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004992:	4904      	ldr	r1, [pc, #16]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800499a:	e009      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
 80049a0:	e006      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80049a2:	bf00      	nop
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b0:	7c7b      	ldrb	r3, [r7, #17]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d105      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b6:	4b9e      	ldr	r3, [pc, #632]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	4a9d      	ldr	r2, [pc, #628]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ce:	4b98      	ldr	r3, [pc, #608]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	f023 0203 	bic.w	r2, r3, #3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	4994      	ldr	r1, [pc, #592]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049f0:	4b8f      	ldr	r3, [pc, #572]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 020c 	bic.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	498c      	ldr	r1, [pc, #560]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a12:	4b87      	ldr	r3, [pc, #540]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	4983      	ldr	r1, [pc, #524]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a34:	4b7e      	ldr	r3, [pc, #504]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	497b      	ldr	r1, [pc, #492]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a56:	4b76      	ldr	r3, [pc, #472]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a64:	4972      	ldr	r1, [pc, #456]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a78:	4b6d      	ldr	r3, [pc, #436]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a86:	496a      	ldr	r1, [pc, #424]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a9a:	4b65      	ldr	r3, [pc, #404]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	4961      	ldr	r1, [pc, #388]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004abc:	4b5c      	ldr	r3, [pc, #368]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aca:	4959      	ldr	r1, [pc, #356]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ade:	4b54      	ldr	r3, [pc, #336]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aec:	4950      	ldr	r1, [pc, #320]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b00:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	4948      	ldr	r1, [pc, #288]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b22:	4b43      	ldr	r3, [pc, #268]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b30:	493f      	ldr	r1, [pc, #252]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d028      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b44:	4b3a      	ldr	r3, [pc, #232]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b52:	4937      	ldr	r1, [pc, #220]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b62:	d106      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b64:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a31      	ldr	r2, [pc, #196]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6e:	60d3      	str	r3, [r2, #12]
 8004b70:	e011      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b7a:	d10c      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	2101      	movs	r1, #1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f8d8 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d028      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ba2:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	491f      	ldr	r1, [pc, #124]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc0:	d106      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc2:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bcc:	60d3      	str	r3, [r2, #12]
 8004bce:	e011      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	2101      	movs	r1, #1
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f8a9 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bea:	7cfb      	ldrb	r3, [r7, #19]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d02b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0e:	4908      	ldr	r1, [pc, #32]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c1e:	d109      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c20:	4b03      	ldr	r3, [pc, #12]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a02      	ldr	r2, [pc, #8]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c2a:	60d3      	str	r3, [r2, #12]
 8004c2c:	e014      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f877 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02f      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c64:	4b2b      	ldr	r3, [pc, #172]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c72:	4928      	ldr	r1, [pc, #160]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c82:	d10d      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	2102      	movs	r1, #2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f854 	bl	8004d38 <RCCEx_PLLSAI1_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d014      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	74bb      	strb	r3, [r7, #18]
 8004c9e:	e011      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3320      	adds	r3, #32
 8004cae:	2102      	movs	r1, #2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f935 	bl	8004f20 <RCCEx_PLLSAI2_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cba:	7cfb      	ldrb	r3, [r7, #19]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cd0:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cde:	490d      	ldr	r1, [pc, #52]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cf2:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d02:	4904      	ldr	r1, [pc, #16]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000

08004d18 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004d22:	f043 0304 	orr.w	r3, r3, #4
 8004d26:	6013      	str	r3, [r2, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000

08004d38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d46:	4b75      	ldr	r3, [pc, #468]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d018      	beq.n	8004d84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d52:	4b72      	ldr	r3, [pc, #456]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0203 	and.w	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d10d      	bne.n	8004d7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
       ||
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d6a:	4b6c      	ldr	r3, [pc, #432]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
       ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d047      	beq.n	8004e0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
 8004d82:	e044      	b.n	8004e0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d018      	beq.n	8004dbe <RCCEx_PLLSAI1_Config+0x86>
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d825      	bhi.n	8004ddc <RCCEx_PLLSAI1_Config+0xa4>
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d002      	beq.n	8004d9a <RCCEx_PLLSAI1_Config+0x62>
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d009      	beq.n	8004dac <RCCEx_PLLSAI1_Config+0x74>
 8004d98:	e020      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d9a:	4b60      	ldr	r3, [pc, #384]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d11d      	bne.n	8004de2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004daa:	e01a      	b.n	8004de2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dac:	4b5b      	ldr	r3, [pc, #364]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d116      	bne.n	8004de6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dbc:	e013      	b.n	8004de6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dbe:	4b57      	ldr	r3, [pc, #348]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10f      	bne.n	8004dea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dca:	4b54      	ldr	r3, [pc, #336]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dda:	e006      	b.n	8004dea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
      break;
 8004de0:	e004      	b.n	8004dec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004de2:	bf00      	nop
 8004de4:	e002      	b.n	8004dec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004de6:	bf00      	nop
 8004de8:	e000      	b.n	8004dec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dea:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10d      	bne.n	8004e0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004df2:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6819      	ldr	r1, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	430b      	orrs	r3, r1
 8004e08:	4944      	ldr	r1, [pc, #272]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d17d      	bne.n	8004f10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e14:	4b41      	ldr	r3, [pc, #260]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a40      	ldr	r2, [pc, #256]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e20:	f7fd f8b6 	bl	8001f90 <HAL_GetTick>
 8004e24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e26:	e009      	b.n	8004e3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e28:	f7fd f8b2 	bl	8001f90 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d902      	bls.n	8004e3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	73fb      	strb	r3, [r7, #15]
        break;
 8004e3a:	e005      	b.n	8004e48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e3c:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ef      	bne.n	8004e28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d160      	bne.n	8004f10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d111      	bne.n	8004e78 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e54:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6892      	ldr	r2, [r2, #8]
 8004e64:	0211      	lsls	r1, r2, #8
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68d2      	ldr	r2, [r2, #12]
 8004e6a:	0912      	lsrs	r2, r2, #4
 8004e6c:	0452      	lsls	r2, r2, #17
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	492a      	ldr	r1, [pc, #168]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	610b      	str	r3, [r1, #16]
 8004e76:	e027      	b.n	8004ec8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d112      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e7e:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6892      	ldr	r2, [r2, #8]
 8004e8e:	0211      	lsls	r1, r2, #8
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6912      	ldr	r2, [r2, #16]
 8004e94:	0852      	lsrs	r2, r2, #1
 8004e96:	3a01      	subs	r2, #1
 8004e98:	0552      	lsls	r2, r2, #21
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	491f      	ldr	r1, [pc, #124]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	610b      	str	r3, [r1, #16]
 8004ea2:	e011      	b.n	8004ec8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6892      	ldr	r2, [r2, #8]
 8004eb4:	0211      	lsls	r1, r2, #8
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6952      	ldr	r2, [r2, #20]
 8004eba:	0852      	lsrs	r2, r2, #1
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	0652      	lsls	r2, r2, #25
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	4916      	ldr	r1, [pc, #88]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ec8:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ed2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fd f85c 	bl	8001f90 <HAL_GetTick>
 8004ed8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eda:	e009      	b.n	8004ef0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004edc:	f7fd f858 	bl	8001f90 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d902      	bls.n	8004ef0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	73fb      	strb	r3, [r7, #15]
          break;
 8004eee:	e005      	b.n	8004efc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ef      	beq.n	8004edc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	4904      	ldr	r1, [pc, #16]	; (8004f1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000

08004f20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f2e:	4b6a      	ldr	r3, [pc, #424]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d018      	beq.n	8004f6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f3a:	4b67      	ldr	r3, [pc, #412]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0203 	and.w	r2, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d10d      	bne.n	8004f66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f52:	4b61      	ldr	r3, [pc, #388]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
       ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d047      	beq.n	8004ff6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	73fb      	strb	r3, [r7, #15]
 8004f6a:	e044      	b.n	8004ff6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d018      	beq.n	8004fa6 <RCCEx_PLLSAI2_Config+0x86>
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d825      	bhi.n	8004fc4 <RCCEx_PLLSAI2_Config+0xa4>
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d002      	beq.n	8004f82 <RCCEx_PLLSAI2_Config+0x62>
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d009      	beq.n	8004f94 <RCCEx_PLLSAI2_Config+0x74>
 8004f80:	e020      	b.n	8004fc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f82:	4b55      	ldr	r3, [pc, #340]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d11d      	bne.n	8004fca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f92:	e01a      	b.n	8004fca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f94:	4b50      	ldr	r3, [pc, #320]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d116      	bne.n	8004fce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa4:	e013      	b.n	8004fce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fa6:	4b4c      	ldr	r3, [pc, #304]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fb2:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fc2:	e006      	b.n	8004fd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc8:	e004      	b.n	8004fd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fca:	bf00      	nop
 8004fcc:	e002      	b.n	8004fd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10d      	bne.n	8004ff6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fda:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	4939      	ldr	r1, [pc, #228]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d167      	bne.n	80050cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ffc:	4b36      	ldr	r3, [pc, #216]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a35      	ldr	r2, [pc, #212]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005008:	f7fc ffc2 	bl	8001f90 <HAL_GetTick>
 800500c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800500e:	e009      	b.n	8005024 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005010:	f7fc ffbe 	bl	8001f90 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d902      	bls.n	8005024 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	73fb      	strb	r3, [r7, #15]
        break;
 8005022:	e005      	b.n	8005030 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005024:	4b2c      	ldr	r3, [pc, #176]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1ef      	bne.n	8005010 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d14a      	bne.n	80050cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d111      	bne.n	8005060 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800503c:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6892      	ldr	r2, [r2, #8]
 800504c:	0211      	lsls	r1, r2, #8
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	68d2      	ldr	r2, [r2, #12]
 8005052:	0912      	lsrs	r2, r2, #4
 8005054:	0452      	lsls	r2, r2, #17
 8005056:	430a      	orrs	r2, r1
 8005058:	491f      	ldr	r1, [pc, #124]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800505a:	4313      	orrs	r3, r2
 800505c:	614b      	str	r3, [r1, #20]
 800505e:	e011      	b.n	8005084 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6892      	ldr	r2, [r2, #8]
 8005070:	0211      	lsls	r1, r2, #8
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6912      	ldr	r2, [r2, #16]
 8005076:	0852      	lsrs	r2, r2, #1
 8005078:	3a01      	subs	r2, #1
 800507a:	0652      	lsls	r2, r2, #25
 800507c:	430a      	orrs	r2, r1
 800507e:	4916      	ldr	r1, [pc, #88]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005080:	4313      	orrs	r3, r2
 8005082:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005084:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800508a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fc ff7e 	bl	8001f90 <HAL_GetTick>
 8005094:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005096:	e009      	b.n	80050ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005098:	f7fc ff7a 	bl	8001f90 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d902      	bls.n	80050ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	73fb      	strb	r3, [r7, #15]
          break;
 80050aa:	e005      	b.n	80050b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ef      	beq.n	8005098 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	4904      	ldr	r1, [pc, #16]	; (80050d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000

080050dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e095      	b.n	800521a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d108      	bne.n	8005108 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fe:	d009      	beq.n	8005114 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	61da      	str	r2, [r3, #28]
 8005106:	e005      	b.n	8005114 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fc fa20 	bl	8001574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005154:	d902      	bls.n	800515c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	e002      	b.n	8005162 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800515c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005160:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800516a:	d007      	beq.n	800517c <HAL_SPI_Init+0xa0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005174:	d002      	beq.n	800517c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	ea42 0103 	orr.w	r1, r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	0c1b      	lsrs	r3, r3, #16
 80051d8:	f003 0204 	and.w	r2, r3, #4
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051f8:	ea42 0103 	orr.w	r1, r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e040      	b.n	80052b6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005238:	2b00      	cmp	r3, #0
 800523a:	d106      	bne.n	800524a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fc f9d9 	bl	80015fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0201 	bic.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f8c1 	bl	80053e8 <UART_SetConfig>
 8005266:	4603      	mov	r3, r0
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e022      	b.n	80052b6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fb6d 	bl	8005958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800528c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800529c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fbf4 	bl	8005a9c <UART_CheckIdleState>
 80052b4:	4603      	mov	r3, r0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b08a      	sub	sp, #40	; 0x28
 80052c2:	af02      	add	r7, sp, #8
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	f040 8082 	bne.w	80053dc <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_UART_Transmit+0x26>
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e07a      	b.n	80053de <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Transmit+0x38>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e073      	b.n	80053de <HAL_UART_Transmit+0x120>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2221      	movs	r2, #33	; 0x21
 800530a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800530c:	f7fc fe40 	bl	8001f90 <HAL_GetTick>
 8005310:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	88fa      	ldrh	r2, [r7, #6]
 8005316:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532a:	d108      	bne.n	800533e <HAL_UART_Transmit+0x80>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	e003      	b.n	8005346 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800534e:	e02d      	b.n	80053ac <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2200      	movs	r2, #0
 8005358:	2180      	movs	r1, #128	; 0x80
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fbe7 	bl	8005b2e <UART_WaitOnFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e039      	b.n	80053de <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10b      	bne.n	8005388 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800537c:	b292      	uxth	r2, r2
 800537e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	3302      	adds	r3, #2
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	e008      	b.n	800539a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	b292      	uxth	r2, r2
 8005392:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	3301      	adds	r3, #1
 8005398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1cb      	bne.n	8005350 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2200      	movs	r2, #0
 80053c0:	2140      	movs	r1, #64	; 0x40
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fbb3 	bl	8005b2e <UART_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e005      	b.n	80053de <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e000      	b.n	80053de <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053ec:	b08a      	sub	sp, #40	; 0x28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	431a      	orrs	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	431a      	orrs	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4313      	orrs	r3, r2
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4ba4      	ldr	r3, [pc, #656]	; (80056a8 <UART_SetConfig+0x2c0>)
 8005418:	4013      	ands	r3, r2
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005420:	430b      	orrs	r3, r1
 8005422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a99      	ldr	r2, [pc, #612]	; (80056ac <UART_SetConfig+0x2c4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005450:	4313      	orrs	r3, r2
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005464:	430a      	orrs	r2, r1
 8005466:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a90      	ldr	r2, [pc, #576]	; (80056b0 <UART_SetConfig+0x2c8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d126      	bne.n	80054c0 <UART_SetConfig+0xd8>
 8005472:	4b90      	ldr	r3, [pc, #576]	; (80056b4 <UART_SetConfig+0x2cc>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	2b03      	cmp	r3, #3
 800547e:	d81b      	bhi.n	80054b8 <UART_SetConfig+0xd0>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0xa0>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	08005499 	.word	0x08005499
 800548c:	080054a9 	.word	0x080054a9
 8005490:	080054a1 	.word	0x080054a1
 8005494:	080054b1 	.word	0x080054b1
 8005498:	2301      	movs	r3, #1
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549e:	e116      	b.n	80056ce <UART_SetConfig+0x2e6>
 80054a0:	2302      	movs	r3, #2
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a6:	e112      	b.n	80056ce <UART_SetConfig+0x2e6>
 80054a8:	2304      	movs	r3, #4
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ae:	e10e      	b.n	80056ce <UART_SetConfig+0x2e6>
 80054b0:	2308      	movs	r3, #8
 80054b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b6:	e10a      	b.n	80056ce <UART_SetConfig+0x2e6>
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054be:	e106      	b.n	80056ce <UART_SetConfig+0x2e6>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a7c      	ldr	r2, [pc, #496]	; (80056b8 <UART_SetConfig+0x2d0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d138      	bne.n	800553c <UART_SetConfig+0x154>
 80054ca:	4b7a      	ldr	r3, [pc, #488]	; (80056b4 <UART_SetConfig+0x2cc>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f003 030c 	and.w	r3, r3, #12
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d82d      	bhi.n	8005534 <UART_SetConfig+0x14c>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0xf8>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005515 	.word	0x08005515
 80054e4:	08005535 	.word	0x08005535
 80054e8:	08005535 	.word	0x08005535
 80054ec:	08005535 	.word	0x08005535
 80054f0:	08005525 	.word	0x08005525
 80054f4:	08005535 	.word	0x08005535
 80054f8:	08005535 	.word	0x08005535
 80054fc:	08005535 	.word	0x08005535
 8005500:	0800551d 	.word	0x0800551d
 8005504:	08005535 	.word	0x08005535
 8005508:	08005535 	.word	0x08005535
 800550c:	08005535 	.word	0x08005535
 8005510:	0800552d 	.word	0x0800552d
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551a:	e0d8      	b.n	80056ce <UART_SetConfig+0x2e6>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005522:	e0d4      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552a:	e0d0      	b.n	80056ce <UART_SetConfig+0x2e6>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005532:	e0cc      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553a:	e0c8      	b.n	80056ce <UART_SetConfig+0x2e6>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a5e      	ldr	r2, [pc, #376]	; (80056bc <UART_SetConfig+0x2d4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d125      	bne.n	8005592 <UART_SetConfig+0x1aa>
 8005546:	4b5b      	ldr	r3, [pc, #364]	; (80056b4 <UART_SetConfig+0x2cc>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005550:	2b30      	cmp	r3, #48	; 0x30
 8005552:	d016      	beq.n	8005582 <UART_SetConfig+0x19a>
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d818      	bhi.n	800558a <UART_SetConfig+0x1a2>
 8005558:	2b20      	cmp	r3, #32
 800555a:	d00a      	beq.n	8005572 <UART_SetConfig+0x18a>
 800555c:	2b20      	cmp	r3, #32
 800555e:	d814      	bhi.n	800558a <UART_SetConfig+0x1a2>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <UART_SetConfig+0x182>
 8005564:	2b10      	cmp	r3, #16
 8005566:	d008      	beq.n	800557a <UART_SetConfig+0x192>
 8005568:	e00f      	b.n	800558a <UART_SetConfig+0x1a2>
 800556a:	2300      	movs	r3, #0
 800556c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005570:	e0ad      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005572:	2302      	movs	r3, #2
 8005574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005578:	e0a9      	b.n	80056ce <UART_SetConfig+0x2e6>
 800557a:	2304      	movs	r3, #4
 800557c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005580:	e0a5      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005582:	2308      	movs	r3, #8
 8005584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005588:	e0a1      	b.n	80056ce <UART_SetConfig+0x2e6>
 800558a:	2310      	movs	r3, #16
 800558c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005590:	e09d      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a4a      	ldr	r2, [pc, #296]	; (80056c0 <UART_SetConfig+0x2d8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d125      	bne.n	80055e8 <UART_SetConfig+0x200>
 800559c:	4b45      	ldr	r3, [pc, #276]	; (80056b4 <UART_SetConfig+0x2cc>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055a6:	2bc0      	cmp	r3, #192	; 0xc0
 80055a8:	d016      	beq.n	80055d8 <UART_SetConfig+0x1f0>
 80055aa:	2bc0      	cmp	r3, #192	; 0xc0
 80055ac:	d818      	bhi.n	80055e0 <UART_SetConfig+0x1f8>
 80055ae:	2b80      	cmp	r3, #128	; 0x80
 80055b0:	d00a      	beq.n	80055c8 <UART_SetConfig+0x1e0>
 80055b2:	2b80      	cmp	r3, #128	; 0x80
 80055b4:	d814      	bhi.n	80055e0 <UART_SetConfig+0x1f8>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <UART_SetConfig+0x1d8>
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d008      	beq.n	80055d0 <UART_SetConfig+0x1e8>
 80055be:	e00f      	b.n	80055e0 <UART_SetConfig+0x1f8>
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e082      	b.n	80056ce <UART_SetConfig+0x2e6>
 80055c8:	2302      	movs	r3, #2
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ce:	e07e      	b.n	80056ce <UART_SetConfig+0x2e6>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d6:	e07a      	b.n	80056ce <UART_SetConfig+0x2e6>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055de:	e076      	b.n	80056ce <UART_SetConfig+0x2e6>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e6:	e072      	b.n	80056ce <UART_SetConfig+0x2e6>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a35      	ldr	r2, [pc, #212]	; (80056c4 <UART_SetConfig+0x2dc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d12a      	bne.n	8005648 <UART_SetConfig+0x260>
 80055f2:	4b30      	ldr	r3, [pc, #192]	; (80056b4 <UART_SetConfig+0x2cc>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005600:	d01a      	beq.n	8005638 <UART_SetConfig+0x250>
 8005602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005606:	d81b      	bhi.n	8005640 <UART_SetConfig+0x258>
 8005608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560c:	d00c      	beq.n	8005628 <UART_SetConfig+0x240>
 800560e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005612:	d815      	bhi.n	8005640 <UART_SetConfig+0x258>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <UART_SetConfig+0x238>
 8005618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561c:	d008      	beq.n	8005630 <UART_SetConfig+0x248>
 800561e:	e00f      	b.n	8005640 <UART_SetConfig+0x258>
 8005620:	2300      	movs	r3, #0
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005626:	e052      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562e:	e04e      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005636:	e04a      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563e:	e046      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005646:	e042      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a17      	ldr	r2, [pc, #92]	; (80056ac <UART_SetConfig+0x2c4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d13a      	bne.n	80056c8 <UART_SetConfig+0x2e0>
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <UART_SetConfig+0x2cc>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800565c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005660:	d01a      	beq.n	8005698 <UART_SetConfig+0x2b0>
 8005662:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005666:	d81b      	bhi.n	80056a0 <UART_SetConfig+0x2b8>
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d00c      	beq.n	8005688 <UART_SetConfig+0x2a0>
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005672:	d815      	bhi.n	80056a0 <UART_SetConfig+0x2b8>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <UART_SetConfig+0x298>
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567c:	d008      	beq.n	8005690 <UART_SetConfig+0x2a8>
 800567e:	e00f      	b.n	80056a0 <UART_SetConfig+0x2b8>
 8005680:	2300      	movs	r3, #0
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005686:	e022      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005688:	2302      	movs	r3, #2
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568e:	e01e      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005696:	e01a      	b.n	80056ce <UART_SetConfig+0x2e6>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569e:	e016      	b.n	80056ce <UART_SetConfig+0x2e6>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a6:	e012      	b.n	80056ce <UART_SetConfig+0x2e6>
 80056a8:	efff69f3 	.word	0xefff69f3
 80056ac:	40008000 	.word	0x40008000
 80056b0:	40013800 	.word	0x40013800
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40004400 	.word	0x40004400
 80056bc:	40004800 	.word	0x40004800
 80056c0:	40004c00 	.word	0x40004c00
 80056c4:	40005000 	.word	0x40005000
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a9f      	ldr	r2, [pc, #636]	; (8005950 <UART_SetConfig+0x568>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d17a      	bne.n	80057ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d824      	bhi.n	800572a <UART_SetConfig+0x342>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <UART_SetConfig+0x300>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800571b 	.word	0x0800571b
 80056fc:	0800572b 	.word	0x0800572b
 8005700:	0800572b 	.word	0x0800572b
 8005704:	0800572b 	.word	0x0800572b
 8005708:	08005723 	.word	0x08005723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800570c:	f7fe ff8e 	bl	800462c <HAL_RCC_GetPCLK1Freq>
 8005710:	61f8      	str	r0, [r7, #28]
        break;
 8005712:	e010      	b.n	8005736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b8f      	ldr	r3, [pc, #572]	; (8005954 <UART_SetConfig+0x56c>)
 8005716:	61fb      	str	r3, [r7, #28]
        break;
 8005718:	e00d      	b.n	8005736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7fe feef 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 800571e:	61f8      	str	r0, [r7, #28]
        break;
 8005720:	e009      	b.n	8005736 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	61fb      	str	r3, [r7, #28]
        break;
 8005728:	e005      	b.n	8005736 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 80fb 	beq.w	8005934 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	4413      	add	r3, r2
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	429a      	cmp	r2, r3
 800574c:	d305      	bcc.n	800575a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	429a      	cmp	r2, r3
 8005758:	d903      	bls.n	8005762 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005760:	e0e8      	b.n	8005934 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2200      	movs	r2, #0
 8005766:	461c      	mov	r4, r3
 8005768:	4615      	mov	r5, r2
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	022b      	lsls	r3, r5, #8
 8005774:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005778:	0222      	lsls	r2, r4, #8
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	6849      	ldr	r1, [r1, #4]
 800577e:	0849      	lsrs	r1, r1, #1
 8005780:	2000      	movs	r0, #0
 8005782:	4688      	mov	r8, r1
 8005784:	4681      	mov	r9, r0
 8005786:	eb12 0a08 	adds.w	sl, r2, r8
 800578a:	eb43 0b09 	adc.w	fp, r3, r9
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800579c:	4650      	mov	r0, sl
 800579e:	4659      	mov	r1, fp
 80057a0:	f7fa ff4a 	bl	8000638 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4613      	mov	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b2:	d308      	bcc.n	80057c6 <UART_SetConfig+0x3de>
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ba:	d204      	bcs.n	80057c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	60da      	str	r2, [r3, #12]
 80057c4:	e0b6      	b.n	8005934 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057cc:	e0b2      	b.n	8005934 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d6:	d15e      	bne.n	8005896 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80057d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d828      	bhi.n	8005832 <UART_SetConfig+0x44a>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <UART_SetConfig+0x400>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	08005815 	.word	0x08005815
 80057f0:	0800581d 	.word	0x0800581d
 80057f4:	08005833 	.word	0x08005833
 80057f8:	08005823 	.word	0x08005823
 80057fc:	08005833 	.word	0x08005833
 8005800:	08005833 	.word	0x08005833
 8005804:	08005833 	.word	0x08005833
 8005808:	0800582b 	.word	0x0800582b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800580c:	f7fe ff0e 	bl	800462c <HAL_RCC_GetPCLK1Freq>
 8005810:	61f8      	str	r0, [r7, #28]
        break;
 8005812:	e014      	b.n	800583e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005814:	f7fe ff20 	bl	8004658 <HAL_RCC_GetPCLK2Freq>
 8005818:	61f8      	str	r0, [r7, #28]
        break;
 800581a:	e010      	b.n	800583e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800581c:	4b4d      	ldr	r3, [pc, #308]	; (8005954 <UART_SetConfig+0x56c>)
 800581e:	61fb      	str	r3, [r7, #28]
        break;
 8005820:	e00d      	b.n	800583e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005822:	f7fe fe6b 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 8005826:	61f8      	str	r0, [r7, #28]
        break;
 8005828:	e009      	b.n	800583e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800582e:	61fb      	str	r3, [r7, #28]
        break;
 8005830:	e005      	b.n	800583e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800583c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d077      	beq.n	8005934 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	005a      	lsls	r2, r3, #1
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	441a      	add	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	fbb2 f3f3 	udiv	r3, r2, r3
 8005858:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b0f      	cmp	r3, #15
 800585e:	d916      	bls.n	800588e <UART_SetConfig+0x4a6>
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005866:	d212      	bcs.n	800588e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f023 030f 	bic.w	r3, r3, #15
 8005870:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	b29b      	uxth	r3, r3
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	b29a      	uxth	r2, r3
 800587e:	8afb      	ldrh	r3, [r7, #22]
 8005880:	4313      	orrs	r3, r2
 8005882:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	8afa      	ldrh	r2, [r7, #22]
 800588a:	60da      	str	r2, [r3, #12]
 800588c:	e052      	b.n	8005934 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005894:	e04e      	b.n	8005934 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800589a:	2b08      	cmp	r3, #8
 800589c:	d827      	bhi.n	80058ee <UART_SetConfig+0x506>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0x4bc>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058d1 	.word	0x080058d1
 80058ac:	080058d9 	.word	0x080058d9
 80058b0:	080058ef 	.word	0x080058ef
 80058b4:	080058df 	.word	0x080058df
 80058b8:	080058ef 	.word	0x080058ef
 80058bc:	080058ef 	.word	0x080058ef
 80058c0:	080058ef 	.word	0x080058ef
 80058c4:	080058e7 	.word	0x080058e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c8:	f7fe feb0 	bl	800462c <HAL_RCC_GetPCLK1Freq>
 80058cc:	61f8      	str	r0, [r7, #28]
        break;
 80058ce:	e014      	b.n	80058fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058d0:	f7fe fec2 	bl	8004658 <HAL_RCC_GetPCLK2Freq>
 80058d4:	61f8      	str	r0, [r7, #28]
        break;
 80058d6:	e010      	b.n	80058fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058d8:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <UART_SetConfig+0x56c>)
 80058da:	61fb      	str	r3, [r7, #28]
        break;
 80058dc:	e00d      	b.n	80058fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058de:	f7fe fe0d 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80058e2:	61f8      	str	r0, [r7, #28]
        break;
 80058e4:	e009      	b.n	80058fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ea:	61fb      	str	r3, [r7, #28]
        break;
 80058ec:	e005      	b.n	80058fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058f8:	bf00      	nop
    }

    if (pclk != 0U)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d019      	beq.n	8005934 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	085a      	lsrs	r2, r3, #1
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	441a      	add	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b0f      	cmp	r3, #15
 8005918:	d909      	bls.n	800592e <UART_SetConfig+0x546>
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005920:	d205      	bcs.n	800592e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60da      	str	r2, [r3, #12]
 800592c:	e002      	b.n	8005934 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005940:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005944:	4618      	mov	r0, r3
 8005946:	3728      	adds	r7, #40	; 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800594e:	bf00      	nop
 8005950:	40008000 	.word	0x40008000
 8005954:	00f42400 	.word	0x00f42400

08005958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a56:	d10a      	bne.n	8005a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aac:	f7fc fa70 	bl	8001f90 <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d10e      	bne.n	8005ade <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f82d 	bl	8005b2e <UART_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e023      	b.n	8005b26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d10e      	bne.n	8005b0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f817 	bl	8005b2e <UART_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e00d      	b.n	8005b26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b09c      	sub	sp, #112	; 0x70
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	603b      	str	r3, [r7, #0]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3e:	e0a5      	b.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	f000 80a1 	beq.w	8005c8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4a:	f7fc fa21 	bl	8001f90 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d302      	bcc.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d13e      	bne.n	8005bde <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b74:	667b      	str	r3, [r7, #100]	; 0x64
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e6      	bne.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3308      	adds	r3, #8
 8005b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	f023 0301 	bic.w	r3, r3, #1
 8005ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e5      	bne.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e067      	b.n	8005cae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d04f      	beq.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bfa:	d147      	bne.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c24:	637b      	str	r3, [r7, #52]	; 0x34
 8005c26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e6      	bne.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	613b      	str	r3, [r7, #16]
   return(result);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c58:	623a      	str	r2, [r7, #32]
 8005c5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	69f9      	ldr	r1, [r7, #28]
 8005c5e:	6a3a      	ldr	r2, [r7, #32]
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e5      	bne.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e010      	b.n	8005cae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4013      	ands	r3, r2
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	f43f af4a 	beq.w	8005b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3770      	adds	r7, #112	; 0x70
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	f107 001c 	add.w	r0, r7, #28
 8005cc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fa6f 	bl	80061b8 <USB_CoreReset>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d106      	bne.n	8005cf2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38
 8005cf0:	e005      	b.n	8005cfe <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d0a:	b004      	add	sp, #16
 8005d0c:	4770      	bx	lr

08005d0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f023 0201 	bic.w	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d115      	bne.n	8005d7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d5e:	2001      	movs	r0, #1
 8005d60:	f7fc f922 	bl	8001fa8 <HAL_Delay>
      ms++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa16 	bl	800619c <USB_GetMode>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d01e      	beq.n	8005db4 <USB_SetCurrentMode+0x84>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b31      	cmp	r3, #49	; 0x31
 8005d7a:	d9f0      	bls.n	8005d5e <USB_SetCurrentMode+0x2e>
 8005d7c:	e01a      	b.n	8005db4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d115      	bne.n	8005db0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d90:	2001      	movs	r0, #1
 8005d92:	f7fc f909 	bl	8001fa8 <HAL_Delay>
      ms++;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f9fd 	bl	800619c <USB_GetMode>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <USB_SetCurrentMode+0x84>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b31      	cmp	r3, #49	; 0x31
 8005dac:	d9f0      	bls.n	8005d90 <USB_SetCurrentMode+0x60>
 8005dae:	e001      	b.n	8005db4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e005      	b.n	8005dc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b32      	cmp	r3, #50	; 0x32
 8005db8:	d101      	bne.n	8005dbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dc8:	b084      	sub	sp, #16
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b086      	sub	sp, #24
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	e009      	b.n	8005dfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	3340      	adds	r3, #64	; 0x40
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	2200      	movs	r2, #0
 8005df4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b0e      	cmp	r3, #14
 8005e00:	d9f2      	bls.n	8005de8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11c      	bne.n	8005e42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e16:	f043 0302 	orr.w	r3, r3, #2
 8005e1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	e005      	b.n	8005e4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e54:	461a      	mov	r2, r3
 8005e56:	2300      	movs	r3, #0
 8005e58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e60:	4619      	mov	r1, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e68:	461a      	mov	r2, r3
 8005e6a:	680b      	ldr	r3, [r1, #0]
 8005e6c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e6e:	2103      	movs	r1, #3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f959 	bl	8006128 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e76:	2110      	movs	r1, #16
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8f1 	bl	8006060 <USB_FlushTxFifo>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f91d 	bl	80060c8 <USB_FlushRxFifo>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	461a      	mov	r2, r3
 8005eac:	2300      	movs	r3, #0
 8005eae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	e043      	b.n	8005f4a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ed8:	d118      	bne.n	8005f0c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	461a      	mov	r2, r3
 8005eee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	e013      	b.n	8005f1e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	461a      	mov	r2, r3
 8005f04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	e008      	b.n	8005f1e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	3301      	adds	r3, #1
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d3b7      	bcc.n	8005ec2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f52:	2300      	movs	r3, #0
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	e043      	b.n	8005fe0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f6e:	d118      	bne.n	8005fa2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f82:	461a      	mov	r2, r3
 8005f84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e013      	b.n	8005fb4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	e008      	b.n	8005fb4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	461a      	mov	r2, r3
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	613b      	str	r3, [r7, #16]
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d3b7      	bcc.n	8005f58 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ffa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006008:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f043 0210 	orr.w	r2, r3, #16
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	4b10      	ldr	r3, [pc, #64]	; (800605c <USB_DevInit+0x294>)
 800601c:	4313      	orrs	r3, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f043 0208 	orr.w	r2, r3, #8
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006036:	2b01      	cmp	r3, #1
 8006038:	d107      	bne.n	800604a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006042:	f043 0304 	orr.w	r3, r3, #4
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006056:	b004      	add	sp, #16
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	803c3800 	.word	0x803c3800

08006060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4a13      	ldr	r2, [pc, #76]	; (80060c4 <USB_FlushTxFifo+0x64>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e01b      	b.n	80060b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	daf2      	bge.n	800606e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	019b      	lsls	r3, r3, #6
 8006090:	f043 0220 	orr.w	r2, r3, #32
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3301      	adds	r3, #1
 800609c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4a08      	ldr	r2, [pc, #32]	; (80060c4 <USB_FlushTxFifo+0x64>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e006      	b.n	80060b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d0f0      	beq.n	8006098 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	00030d40 	.word	0x00030d40

080060c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a11      	ldr	r2, [pc, #68]	; (8006124 <USB_FlushRxFifo+0x5c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e018      	b.n	8006118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	daf2      	bge.n	80060d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2210      	movs	r2, #16
 80060f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a08      	ldr	r2, [pc, #32]	; (8006124 <USB_FlushRxFifo+0x5c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e006      	b.n	8006118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b10      	cmp	r3, #16
 8006114:	d0f0      	beq.n	80060f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	00030d40 	.word	0x00030d40

08006128 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006148:	4313      	orrs	r3, r2
 800614a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006174:	f023 0303 	bic.w	r3, r3, #3
 8006178:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006188:	f043 0302 	orr.w	r3, r3, #2
 800618c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0301 	and.w	r3, r3, #1
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a13      	ldr	r2, [pc, #76]	; (800621c <USB_CoreReset+0x64>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e01b      	b.n	800620e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	daf2      	bge.n	80061c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f043 0201 	orr.w	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <USB_CoreReset+0x64>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d901      	bls.n	8006200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e006      	b.n	800620e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b01      	cmp	r3, #1
 800620a:	d0f0      	beq.n	80061ee <USB_CoreReset+0x36>

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	00030d40 	.word	0x00030d40

08006220 <__errno>:
 8006220:	4b01      	ldr	r3, [pc, #4]	; (8006228 <__errno+0x8>)
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	20000444 	.word	0x20000444

0800622c <__libc_init_array>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	4d0d      	ldr	r5, [pc, #52]	; (8006264 <__libc_init_array+0x38>)
 8006230:	4c0d      	ldr	r4, [pc, #52]	; (8006268 <__libc_init_array+0x3c>)
 8006232:	1b64      	subs	r4, r4, r5
 8006234:	10a4      	asrs	r4, r4, #2
 8006236:	2600      	movs	r6, #0
 8006238:	42a6      	cmp	r6, r4
 800623a:	d109      	bne.n	8006250 <__libc_init_array+0x24>
 800623c:	4d0b      	ldr	r5, [pc, #44]	; (800626c <__libc_init_array+0x40>)
 800623e:	4c0c      	ldr	r4, [pc, #48]	; (8006270 <__libc_init_array+0x44>)
 8006240:	f000 fcd4 	bl	8006bec <_init>
 8006244:	1b64      	subs	r4, r4, r5
 8006246:	10a4      	asrs	r4, r4, #2
 8006248:	2600      	movs	r6, #0
 800624a:	42a6      	cmp	r6, r4
 800624c:	d105      	bne.n	800625a <__libc_init_array+0x2e>
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	f855 3b04 	ldr.w	r3, [r5], #4
 8006254:	4798      	blx	r3
 8006256:	3601      	adds	r6, #1
 8006258:	e7ee      	b.n	8006238 <__libc_init_array+0xc>
 800625a:	f855 3b04 	ldr.w	r3, [r5], #4
 800625e:	4798      	blx	r3
 8006260:	3601      	adds	r6, #1
 8006262:	e7f2      	b.n	800624a <__libc_init_array+0x1e>
 8006264:	08006ca0 	.word	0x08006ca0
 8006268:	08006ca0 	.word	0x08006ca0
 800626c:	08006ca0 	.word	0x08006ca0
 8006270:	08006ca4 	.word	0x08006ca4

08006274 <memset>:
 8006274:	4402      	add	r2, r0
 8006276:	4603      	mov	r3, r0
 8006278:	4293      	cmp	r3, r2
 800627a:	d100      	bne.n	800627e <memset+0xa>
 800627c:	4770      	bx	lr
 800627e:	f803 1b01 	strb.w	r1, [r3], #1
 8006282:	e7f9      	b.n	8006278 <memset+0x4>

08006284 <sniprintf>:
 8006284:	b40c      	push	{r2, r3}
 8006286:	b530      	push	{r4, r5, lr}
 8006288:	4b17      	ldr	r3, [pc, #92]	; (80062e8 <sniprintf+0x64>)
 800628a:	1e0c      	subs	r4, r1, #0
 800628c:	681d      	ldr	r5, [r3, #0]
 800628e:	b09d      	sub	sp, #116	; 0x74
 8006290:	da08      	bge.n	80062a4 <sniprintf+0x20>
 8006292:	238b      	movs	r3, #139	; 0x8b
 8006294:	602b      	str	r3, [r5, #0]
 8006296:	f04f 30ff 	mov.w	r0, #4294967295
 800629a:	b01d      	add	sp, #116	; 0x74
 800629c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062a0:	b002      	add	sp, #8
 80062a2:	4770      	bx	lr
 80062a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80062a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062ac:	bf14      	ite	ne
 80062ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80062b2:	4623      	moveq	r3, r4
 80062b4:	9304      	str	r3, [sp, #16]
 80062b6:	9307      	str	r3, [sp, #28]
 80062b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062bc:	9002      	str	r0, [sp, #8]
 80062be:	9006      	str	r0, [sp, #24]
 80062c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80062c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062c6:	ab21      	add	r3, sp, #132	; 0x84
 80062c8:	a902      	add	r1, sp, #8
 80062ca:	4628      	mov	r0, r5
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	f000 f869 	bl	80063a4 <_svfiprintf_r>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	bfbc      	itt	lt
 80062d6:	238b      	movlt	r3, #139	; 0x8b
 80062d8:	602b      	strlt	r3, [r5, #0]
 80062da:	2c00      	cmp	r4, #0
 80062dc:	d0dd      	beq.n	800629a <sniprintf+0x16>
 80062de:	9b02      	ldr	r3, [sp, #8]
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e7d9      	b.n	800629a <sniprintf+0x16>
 80062e6:	bf00      	nop
 80062e8:	20000444 	.word	0x20000444

080062ec <__ssputs_r>:
 80062ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f0:	688e      	ldr	r6, [r1, #8]
 80062f2:	429e      	cmp	r6, r3
 80062f4:	4682      	mov	sl, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	4690      	mov	r8, r2
 80062fa:	461f      	mov	r7, r3
 80062fc:	d838      	bhi.n	8006370 <__ssputs_r+0x84>
 80062fe:	898a      	ldrh	r2, [r1, #12]
 8006300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006304:	d032      	beq.n	800636c <__ssputs_r+0x80>
 8006306:	6825      	ldr	r5, [r4, #0]
 8006308:	6909      	ldr	r1, [r1, #16]
 800630a:	eba5 0901 	sub.w	r9, r5, r1
 800630e:	6965      	ldr	r5, [r4, #20]
 8006310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006318:	3301      	adds	r3, #1
 800631a:	444b      	add	r3, r9
 800631c:	106d      	asrs	r5, r5, #1
 800631e:	429d      	cmp	r5, r3
 8006320:	bf38      	it	cc
 8006322:	461d      	movcc	r5, r3
 8006324:	0553      	lsls	r3, r2, #21
 8006326:	d531      	bpl.n	800638c <__ssputs_r+0xa0>
 8006328:	4629      	mov	r1, r5
 800632a:	f000 fb63 	bl	80069f4 <_malloc_r>
 800632e:	4606      	mov	r6, r0
 8006330:	b950      	cbnz	r0, 8006348 <__ssputs_r+0x5c>
 8006332:	230c      	movs	r3, #12
 8006334:	f8ca 3000 	str.w	r3, [sl]
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633e:	81a3      	strh	r3, [r4, #12]
 8006340:	f04f 30ff 	mov.w	r0, #4294967295
 8006344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006348:	6921      	ldr	r1, [r4, #16]
 800634a:	464a      	mov	r2, r9
 800634c:	f000 fabe 	bl	80068cc <memcpy>
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635a:	81a3      	strh	r3, [r4, #12]
 800635c:	6126      	str	r6, [r4, #16]
 800635e:	6165      	str	r5, [r4, #20]
 8006360:	444e      	add	r6, r9
 8006362:	eba5 0509 	sub.w	r5, r5, r9
 8006366:	6026      	str	r6, [r4, #0]
 8006368:	60a5      	str	r5, [r4, #8]
 800636a:	463e      	mov	r6, r7
 800636c:	42be      	cmp	r6, r7
 800636e:	d900      	bls.n	8006372 <__ssputs_r+0x86>
 8006370:	463e      	mov	r6, r7
 8006372:	6820      	ldr	r0, [r4, #0]
 8006374:	4632      	mov	r2, r6
 8006376:	4641      	mov	r1, r8
 8006378:	f000 fab6 	bl	80068e8 <memmove>
 800637c:	68a3      	ldr	r3, [r4, #8]
 800637e:	1b9b      	subs	r3, r3, r6
 8006380:	60a3      	str	r3, [r4, #8]
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	4433      	add	r3, r6
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	2000      	movs	r0, #0
 800638a:	e7db      	b.n	8006344 <__ssputs_r+0x58>
 800638c:	462a      	mov	r2, r5
 800638e:	f000 fba5 	bl	8006adc <_realloc_r>
 8006392:	4606      	mov	r6, r0
 8006394:	2800      	cmp	r0, #0
 8006396:	d1e1      	bne.n	800635c <__ssputs_r+0x70>
 8006398:	6921      	ldr	r1, [r4, #16]
 800639a:	4650      	mov	r0, sl
 800639c:	f000 fabe 	bl	800691c <_free_r>
 80063a0:	e7c7      	b.n	8006332 <__ssputs_r+0x46>
	...

080063a4 <_svfiprintf_r>:
 80063a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a8:	4698      	mov	r8, r3
 80063aa:	898b      	ldrh	r3, [r1, #12]
 80063ac:	061b      	lsls	r3, r3, #24
 80063ae:	b09d      	sub	sp, #116	; 0x74
 80063b0:	4607      	mov	r7, r0
 80063b2:	460d      	mov	r5, r1
 80063b4:	4614      	mov	r4, r2
 80063b6:	d50e      	bpl.n	80063d6 <_svfiprintf_r+0x32>
 80063b8:	690b      	ldr	r3, [r1, #16]
 80063ba:	b963      	cbnz	r3, 80063d6 <_svfiprintf_r+0x32>
 80063bc:	2140      	movs	r1, #64	; 0x40
 80063be:	f000 fb19 	bl	80069f4 <_malloc_r>
 80063c2:	6028      	str	r0, [r5, #0]
 80063c4:	6128      	str	r0, [r5, #16]
 80063c6:	b920      	cbnz	r0, 80063d2 <_svfiprintf_r+0x2e>
 80063c8:	230c      	movs	r3, #12
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	e0d1      	b.n	8006576 <_svfiprintf_r+0x1d2>
 80063d2:	2340      	movs	r3, #64	; 0x40
 80063d4:	616b      	str	r3, [r5, #20]
 80063d6:	2300      	movs	r3, #0
 80063d8:	9309      	str	r3, [sp, #36]	; 0x24
 80063da:	2320      	movs	r3, #32
 80063dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80063e4:	2330      	movs	r3, #48	; 0x30
 80063e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006590 <_svfiprintf_r+0x1ec>
 80063ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063ee:	f04f 0901 	mov.w	r9, #1
 80063f2:	4623      	mov	r3, r4
 80063f4:	469a      	mov	sl, r3
 80063f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063fa:	b10a      	cbz	r2, 8006400 <_svfiprintf_r+0x5c>
 80063fc:	2a25      	cmp	r2, #37	; 0x25
 80063fe:	d1f9      	bne.n	80063f4 <_svfiprintf_r+0x50>
 8006400:	ebba 0b04 	subs.w	fp, sl, r4
 8006404:	d00b      	beq.n	800641e <_svfiprintf_r+0x7a>
 8006406:	465b      	mov	r3, fp
 8006408:	4622      	mov	r2, r4
 800640a:	4629      	mov	r1, r5
 800640c:	4638      	mov	r0, r7
 800640e:	f7ff ff6d 	bl	80062ec <__ssputs_r>
 8006412:	3001      	adds	r0, #1
 8006414:	f000 80aa 	beq.w	800656c <_svfiprintf_r+0x1c8>
 8006418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800641a:	445a      	add	r2, fp
 800641c:	9209      	str	r2, [sp, #36]	; 0x24
 800641e:	f89a 3000 	ldrb.w	r3, [sl]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 80a2 	beq.w	800656c <_svfiprintf_r+0x1c8>
 8006428:	2300      	movs	r3, #0
 800642a:	f04f 32ff 	mov.w	r2, #4294967295
 800642e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006432:	f10a 0a01 	add.w	sl, sl, #1
 8006436:	9304      	str	r3, [sp, #16]
 8006438:	9307      	str	r3, [sp, #28]
 800643a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800643e:	931a      	str	r3, [sp, #104]	; 0x68
 8006440:	4654      	mov	r4, sl
 8006442:	2205      	movs	r2, #5
 8006444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006448:	4851      	ldr	r0, [pc, #324]	; (8006590 <_svfiprintf_r+0x1ec>)
 800644a:	f7f9 fec1 	bl	80001d0 <memchr>
 800644e:	9a04      	ldr	r2, [sp, #16]
 8006450:	b9d8      	cbnz	r0, 800648a <_svfiprintf_r+0xe6>
 8006452:	06d0      	lsls	r0, r2, #27
 8006454:	bf44      	itt	mi
 8006456:	2320      	movmi	r3, #32
 8006458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800645c:	0711      	lsls	r1, r2, #28
 800645e:	bf44      	itt	mi
 8006460:	232b      	movmi	r3, #43	; 0x2b
 8006462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006466:	f89a 3000 	ldrb.w	r3, [sl]
 800646a:	2b2a      	cmp	r3, #42	; 0x2a
 800646c:	d015      	beq.n	800649a <_svfiprintf_r+0xf6>
 800646e:	9a07      	ldr	r2, [sp, #28]
 8006470:	4654      	mov	r4, sl
 8006472:	2000      	movs	r0, #0
 8006474:	f04f 0c0a 	mov.w	ip, #10
 8006478:	4621      	mov	r1, r4
 800647a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800647e:	3b30      	subs	r3, #48	; 0x30
 8006480:	2b09      	cmp	r3, #9
 8006482:	d94e      	bls.n	8006522 <_svfiprintf_r+0x17e>
 8006484:	b1b0      	cbz	r0, 80064b4 <_svfiprintf_r+0x110>
 8006486:	9207      	str	r2, [sp, #28]
 8006488:	e014      	b.n	80064b4 <_svfiprintf_r+0x110>
 800648a:	eba0 0308 	sub.w	r3, r0, r8
 800648e:	fa09 f303 	lsl.w	r3, r9, r3
 8006492:	4313      	orrs	r3, r2
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	46a2      	mov	sl, r4
 8006498:	e7d2      	b.n	8006440 <_svfiprintf_r+0x9c>
 800649a:	9b03      	ldr	r3, [sp, #12]
 800649c:	1d19      	adds	r1, r3, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	9103      	str	r1, [sp, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bfbb      	ittet	lt
 80064a6:	425b      	neglt	r3, r3
 80064a8:	f042 0202 	orrlt.w	r2, r2, #2
 80064ac:	9307      	strge	r3, [sp, #28]
 80064ae:	9307      	strlt	r3, [sp, #28]
 80064b0:	bfb8      	it	lt
 80064b2:	9204      	strlt	r2, [sp, #16]
 80064b4:	7823      	ldrb	r3, [r4, #0]
 80064b6:	2b2e      	cmp	r3, #46	; 0x2e
 80064b8:	d10c      	bne.n	80064d4 <_svfiprintf_r+0x130>
 80064ba:	7863      	ldrb	r3, [r4, #1]
 80064bc:	2b2a      	cmp	r3, #42	; 0x2a
 80064be:	d135      	bne.n	800652c <_svfiprintf_r+0x188>
 80064c0:	9b03      	ldr	r3, [sp, #12]
 80064c2:	1d1a      	adds	r2, r3, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	9203      	str	r2, [sp, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bfb8      	it	lt
 80064cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80064d0:	3402      	adds	r4, #2
 80064d2:	9305      	str	r3, [sp, #20]
 80064d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065a0 <_svfiprintf_r+0x1fc>
 80064d8:	7821      	ldrb	r1, [r4, #0]
 80064da:	2203      	movs	r2, #3
 80064dc:	4650      	mov	r0, sl
 80064de:	f7f9 fe77 	bl	80001d0 <memchr>
 80064e2:	b140      	cbz	r0, 80064f6 <_svfiprintf_r+0x152>
 80064e4:	2340      	movs	r3, #64	; 0x40
 80064e6:	eba0 000a 	sub.w	r0, r0, sl
 80064ea:	fa03 f000 	lsl.w	r0, r3, r0
 80064ee:	9b04      	ldr	r3, [sp, #16]
 80064f0:	4303      	orrs	r3, r0
 80064f2:	3401      	adds	r4, #1
 80064f4:	9304      	str	r3, [sp, #16]
 80064f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064fa:	4826      	ldr	r0, [pc, #152]	; (8006594 <_svfiprintf_r+0x1f0>)
 80064fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006500:	2206      	movs	r2, #6
 8006502:	f7f9 fe65 	bl	80001d0 <memchr>
 8006506:	2800      	cmp	r0, #0
 8006508:	d038      	beq.n	800657c <_svfiprintf_r+0x1d8>
 800650a:	4b23      	ldr	r3, [pc, #140]	; (8006598 <_svfiprintf_r+0x1f4>)
 800650c:	bb1b      	cbnz	r3, 8006556 <_svfiprintf_r+0x1b2>
 800650e:	9b03      	ldr	r3, [sp, #12]
 8006510:	3307      	adds	r3, #7
 8006512:	f023 0307 	bic.w	r3, r3, #7
 8006516:	3308      	adds	r3, #8
 8006518:	9303      	str	r3, [sp, #12]
 800651a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651c:	4433      	add	r3, r6
 800651e:	9309      	str	r3, [sp, #36]	; 0x24
 8006520:	e767      	b.n	80063f2 <_svfiprintf_r+0x4e>
 8006522:	fb0c 3202 	mla	r2, ip, r2, r3
 8006526:	460c      	mov	r4, r1
 8006528:	2001      	movs	r0, #1
 800652a:	e7a5      	b.n	8006478 <_svfiprintf_r+0xd4>
 800652c:	2300      	movs	r3, #0
 800652e:	3401      	adds	r4, #1
 8006530:	9305      	str	r3, [sp, #20]
 8006532:	4619      	mov	r1, r3
 8006534:	f04f 0c0a 	mov.w	ip, #10
 8006538:	4620      	mov	r0, r4
 800653a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800653e:	3a30      	subs	r2, #48	; 0x30
 8006540:	2a09      	cmp	r2, #9
 8006542:	d903      	bls.n	800654c <_svfiprintf_r+0x1a8>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0c5      	beq.n	80064d4 <_svfiprintf_r+0x130>
 8006548:	9105      	str	r1, [sp, #20]
 800654a:	e7c3      	b.n	80064d4 <_svfiprintf_r+0x130>
 800654c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006550:	4604      	mov	r4, r0
 8006552:	2301      	movs	r3, #1
 8006554:	e7f0      	b.n	8006538 <_svfiprintf_r+0x194>
 8006556:	ab03      	add	r3, sp, #12
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	462a      	mov	r2, r5
 800655c:	4b0f      	ldr	r3, [pc, #60]	; (800659c <_svfiprintf_r+0x1f8>)
 800655e:	a904      	add	r1, sp, #16
 8006560:	4638      	mov	r0, r7
 8006562:	f3af 8000 	nop.w
 8006566:	1c42      	adds	r2, r0, #1
 8006568:	4606      	mov	r6, r0
 800656a:	d1d6      	bne.n	800651a <_svfiprintf_r+0x176>
 800656c:	89ab      	ldrh	r3, [r5, #12]
 800656e:	065b      	lsls	r3, r3, #25
 8006570:	f53f af2c 	bmi.w	80063cc <_svfiprintf_r+0x28>
 8006574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006576:	b01d      	add	sp, #116	; 0x74
 8006578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657c:	ab03      	add	r3, sp, #12
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	462a      	mov	r2, r5
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <_svfiprintf_r+0x1f8>)
 8006584:	a904      	add	r1, sp, #16
 8006586:	4638      	mov	r0, r7
 8006588:	f000 f87a 	bl	8006680 <_printf_i>
 800658c:	e7eb      	b.n	8006566 <_svfiprintf_r+0x1c2>
 800658e:	bf00      	nop
 8006590:	08006c64 	.word	0x08006c64
 8006594:	08006c6e 	.word	0x08006c6e
 8006598:	00000000 	.word	0x00000000
 800659c:	080062ed 	.word	0x080062ed
 80065a0:	08006c6a 	.word	0x08006c6a

080065a4 <_printf_common>:
 80065a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a8:	4616      	mov	r6, r2
 80065aa:	4699      	mov	r9, r3
 80065ac:	688a      	ldr	r2, [r1, #8]
 80065ae:	690b      	ldr	r3, [r1, #16]
 80065b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065b4:	4293      	cmp	r3, r2
 80065b6:	bfb8      	it	lt
 80065b8:	4613      	movlt	r3, r2
 80065ba:	6033      	str	r3, [r6, #0]
 80065bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065c0:	4607      	mov	r7, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	b10a      	cbz	r2, 80065ca <_printf_common+0x26>
 80065c6:	3301      	adds	r3, #1
 80065c8:	6033      	str	r3, [r6, #0]
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	0699      	lsls	r1, r3, #26
 80065ce:	bf42      	ittt	mi
 80065d0:	6833      	ldrmi	r3, [r6, #0]
 80065d2:	3302      	addmi	r3, #2
 80065d4:	6033      	strmi	r3, [r6, #0]
 80065d6:	6825      	ldr	r5, [r4, #0]
 80065d8:	f015 0506 	ands.w	r5, r5, #6
 80065dc:	d106      	bne.n	80065ec <_printf_common+0x48>
 80065de:	f104 0a19 	add.w	sl, r4, #25
 80065e2:	68e3      	ldr	r3, [r4, #12]
 80065e4:	6832      	ldr	r2, [r6, #0]
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	42ab      	cmp	r3, r5
 80065ea:	dc26      	bgt.n	800663a <_printf_common+0x96>
 80065ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065f0:	1e13      	subs	r3, r2, #0
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	bf18      	it	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	0692      	lsls	r2, r2, #26
 80065fa:	d42b      	bmi.n	8006654 <_printf_common+0xb0>
 80065fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006600:	4649      	mov	r1, r9
 8006602:	4638      	mov	r0, r7
 8006604:	47c0      	blx	r8
 8006606:	3001      	adds	r0, #1
 8006608:	d01e      	beq.n	8006648 <_printf_common+0xa4>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	68e5      	ldr	r5, [r4, #12]
 800660e:	6832      	ldr	r2, [r6, #0]
 8006610:	f003 0306 	and.w	r3, r3, #6
 8006614:	2b04      	cmp	r3, #4
 8006616:	bf08      	it	eq
 8006618:	1aad      	subeq	r5, r5, r2
 800661a:	68a3      	ldr	r3, [r4, #8]
 800661c:	6922      	ldr	r2, [r4, #16]
 800661e:	bf0c      	ite	eq
 8006620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006624:	2500      	movne	r5, #0
 8006626:	4293      	cmp	r3, r2
 8006628:	bfc4      	itt	gt
 800662a:	1a9b      	subgt	r3, r3, r2
 800662c:	18ed      	addgt	r5, r5, r3
 800662e:	2600      	movs	r6, #0
 8006630:	341a      	adds	r4, #26
 8006632:	42b5      	cmp	r5, r6
 8006634:	d11a      	bne.n	800666c <_printf_common+0xc8>
 8006636:	2000      	movs	r0, #0
 8006638:	e008      	b.n	800664c <_printf_common+0xa8>
 800663a:	2301      	movs	r3, #1
 800663c:	4652      	mov	r2, sl
 800663e:	4649      	mov	r1, r9
 8006640:	4638      	mov	r0, r7
 8006642:	47c0      	blx	r8
 8006644:	3001      	adds	r0, #1
 8006646:	d103      	bne.n	8006650 <_printf_common+0xac>
 8006648:	f04f 30ff 	mov.w	r0, #4294967295
 800664c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006650:	3501      	adds	r5, #1
 8006652:	e7c6      	b.n	80065e2 <_printf_common+0x3e>
 8006654:	18e1      	adds	r1, r4, r3
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	2030      	movs	r0, #48	; 0x30
 800665a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800665e:	4422      	add	r2, r4
 8006660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006668:	3302      	adds	r3, #2
 800666a:	e7c7      	b.n	80065fc <_printf_common+0x58>
 800666c:	2301      	movs	r3, #1
 800666e:	4622      	mov	r2, r4
 8006670:	4649      	mov	r1, r9
 8006672:	4638      	mov	r0, r7
 8006674:	47c0      	blx	r8
 8006676:	3001      	adds	r0, #1
 8006678:	d0e6      	beq.n	8006648 <_printf_common+0xa4>
 800667a:	3601      	adds	r6, #1
 800667c:	e7d9      	b.n	8006632 <_printf_common+0x8e>
	...

08006680 <_printf_i>:
 8006680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	7e0f      	ldrb	r7, [r1, #24]
 8006686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006688:	2f78      	cmp	r7, #120	; 0x78
 800668a:	4691      	mov	r9, r2
 800668c:	4680      	mov	r8, r0
 800668e:	460c      	mov	r4, r1
 8006690:	469a      	mov	sl, r3
 8006692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006696:	d807      	bhi.n	80066a8 <_printf_i+0x28>
 8006698:	2f62      	cmp	r7, #98	; 0x62
 800669a:	d80a      	bhi.n	80066b2 <_printf_i+0x32>
 800669c:	2f00      	cmp	r7, #0
 800669e:	f000 80d8 	beq.w	8006852 <_printf_i+0x1d2>
 80066a2:	2f58      	cmp	r7, #88	; 0x58
 80066a4:	f000 80a3 	beq.w	80067ee <_printf_i+0x16e>
 80066a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066b0:	e03a      	b.n	8006728 <_printf_i+0xa8>
 80066b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066b6:	2b15      	cmp	r3, #21
 80066b8:	d8f6      	bhi.n	80066a8 <_printf_i+0x28>
 80066ba:	a101      	add	r1, pc, #4	; (adr r1, 80066c0 <_printf_i+0x40>)
 80066bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066c0:	08006719 	.word	0x08006719
 80066c4:	0800672d 	.word	0x0800672d
 80066c8:	080066a9 	.word	0x080066a9
 80066cc:	080066a9 	.word	0x080066a9
 80066d0:	080066a9 	.word	0x080066a9
 80066d4:	080066a9 	.word	0x080066a9
 80066d8:	0800672d 	.word	0x0800672d
 80066dc:	080066a9 	.word	0x080066a9
 80066e0:	080066a9 	.word	0x080066a9
 80066e4:	080066a9 	.word	0x080066a9
 80066e8:	080066a9 	.word	0x080066a9
 80066ec:	08006839 	.word	0x08006839
 80066f0:	0800675d 	.word	0x0800675d
 80066f4:	0800681b 	.word	0x0800681b
 80066f8:	080066a9 	.word	0x080066a9
 80066fc:	080066a9 	.word	0x080066a9
 8006700:	0800685b 	.word	0x0800685b
 8006704:	080066a9 	.word	0x080066a9
 8006708:	0800675d 	.word	0x0800675d
 800670c:	080066a9 	.word	0x080066a9
 8006710:	080066a9 	.word	0x080066a9
 8006714:	08006823 	.word	0x08006823
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	1d1a      	adds	r2, r3, #4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	602a      	str	r2, [r5, #0]
 8006720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006728:	2301      	movs	r3, #1
 800672a:	e0a3      	b.n	8006874 <_printf_i+0x1f4>
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	6829      	ldr	r1, [r5, #0]
 8006730:	0606      	lsls	r6, r0, #24
 8006732:	f101 0304 	add.w	r3, r1, #4
 8006736:	d50a      	bpl.n	800674e <_printf_i+0xce>
 8006738:	680e      	ldr	r6, [r1, #0]
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	2e00      	cmp	r6, #0
 800673e:	da03      	bge.n	8006748 <_printf_i+0xc8>
 8006740:	232d      	movs	r3, #45	; 0x2d
 8006742:	4276      	negs	r6, r6
 8006744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006748:	485e      	ldr	r0, [pc, #376]	; (80068c4 <_printf_i+0x244>)
 800674a:	230a      	movs	r3, #10
 800674c:	e019      	b.n	8006782 <_printf_i+0x102>
 800674e:	680e      	ldr	r6, [r1, #0]
 8006750:	602b      	str	r3, [r5, #0]
 8006752:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006756:	bf18      	it	ne
 8006758:	b236      	sxthne	r6, r6
 800675a:	e7ef      	b.n	800673c <_printf_i+0xbc>
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	6820      	ldr	r0, [r4, #0]
 8006760:	1d19      	adds	r1, r3, #4
 8006762:	6029      	str	r1, [r5, #0]
 8006764:	0601      	lsls	r1, r0, #24
 8006766:	d501      	bpl.n	800676c <_printf_i+0xec>
 8006768:	681e      	ldr	r6, [r3, #0]
 800676a:	e002      	b.n	8006772 <_printf_i+0xf2>
 800676c:	0646      	lsls	r6, r0, #25
 800676e:	d5fb      	bpl.n	8006768 <_printf_i+0xe8>
 8006770:	881e      	ldrh	r6, [r3, #0]
 8006772:	4854      	ldr	r0, [pc, #336]	; (80068c4 <_printf_i+0x244>)
 8006774:	2f6f      	cmp	r7, #111	; 0x6f
 8006776:	bf0c      	ite	eq
 8006778:	2308      	moveq	r3, #8
 800677a:	230a      	movne	r3, #10
 800677c:	2100      	movs	r1, #0
 800677e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006782:	6865      	ldr	r5, [r4, #4]
 8006784:	60a5      	str	r5, [r4, #8]
 8006786:	2d00      	cmp	r5, #0
 8006788:	bfa2      	ittt	ge
 800678a:	6821      	ldrge	r1, [r4, #0]
 800678c:	f021 0104 	bicge.w	r1, r1, #4
 8006790:	6021      	strge	r1, [r4, #0]
 8006792:	b90e      	cbnz	r6, 8006798 <_printf_i+0x118>
 8006794:	2d00      	cmp	r5, #0
 8006796:	d04d      	beq.n	8006834 <_printf_i+0x1b4>
 8006798:	4615      	mov	r5, r2
 800679a:	fbb6 f1f3 	udiv	r1, r6, r3
 800679e:	fb03 6711 	mls	r7, r3, r1, r6
 80067a2:	5dc7      	ldrb	r7, [r0, r7]
 80067a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067a8:	4637      	mov	r7, r6
 80067aa:	42bb      	cmp	r3, r7
 80067ac:	460e      	mov	r6, r1
 80067ae:	d9f4      	bls.n	800679a <_printf_i+0x11a>
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d10b      	bne.n	80067cc <_printf_i+0x14c>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	07de      	lsls	r6, r3, #31
 80067b8:	d508      	bpl.n	80067cc <_printf_i+0x14c>
 80067ba:	6923      	ldr	r3, [r4, #16]
 80067bc:	6861      	ldr	r1, [r4, #4]
 80067be:	4299      	cmp	r1, r3
 80067c0:	bfde      	ittt	le
 80067c2:	2330      	movle	r3, #48	; 0x30
 80067c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067cc:	1b52      	subs	r2, r2, r5
 80067ce:	6122      	str	r2, [r4, #16]
 80067d0:	f8cd a000 	str.w	sl, [sp]
 80067d4:	464b      	mov	r3, r9
 80067d6:	aa03      	add	r2, sp, #12
 80067d8:	4621      	mov	r1, r4
 80067da:	4640      	mov	r0, r8
 80067dc:	f7ff fee2 	bl	80065a4 <_printf_common>
 80067e0:	3001      	adds	r0, #1
 80067e2:	d14c      	bne.n	800687e <_printf_i+0x1fe>
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
 80067e8:	b004      	add	sp, #16
 80067ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ee:	4835      	ldr	r0, [pc, #212]	; (80068c4 <_printf_i+0x244>)
 80067f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067f4:	6829      	ldr	r1, [r5, #0]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80067fc:	6029      	str	r1, [r5, #0]
 80067fe:	061d      	lsls	r5, r3, #24
 8006800:	d514      	bpl.n	800682c <_printf_i+0x1ac>
 8006802:	07df      	lsls	r7, r3, #31
 8006804:	bf44      	itt	mi
 8006806:	f043 0320 	orrmi.w	r3, r3, #32
 800680a:	6023      	strmi	r3, [r4, #0]
 800680c:	b91e      	cbnz	r6, 8006816 <_printf_i+0x196>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	f023 0320 	bic.w	r3, r3, #32
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	2310      	movs	r3, #16
 8006818:	e7b0      	b.n	800677c <_printf_i+0xfc>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	f043 0320 	orr.w	r3, r3, #32
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	2378      	movs	r3, #120	; 0x78
 8006824:	4828      	ldr	r0, [pc, #160]	; (80068c8 <_printf_i+0x248>)
 8006826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800682a:	e7e3      	b.n	80067f4 <_printf_i+0x174>
 800682c:	0659      	lsls	r1, r3, #25
 800682e:	bf48      	it	mi
 8006830:	b2b6      	uxthmi	r6, r6
 8006832:	e7e6      	b.n	8006802 <_printf_i+0x182>
 8006834:	4615      	mov	r5, r2
 8006836:	e7bb      	b.n	80067b0 <_printf_i+0x130>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	6826      	ldr	r6, [r4, #0]
 800683c:	6961      	ldr	r1, [r4, #20]
 800683e:	1d18      	adds	r0, r3, #4
 8006840:	6028      	str	r0, [r5, #0]
 8006842:	0635      	lsls	r5, r6, #24
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	d501      	bpl.n	800684c <_printf_i+0x1cc>
 8006848:	6019      	str	r1, [r3, #0]
 800684a:	e002      	b.n	8006852 <_printf_i+0x1d2>
 800684c:	0670      	lsls	r0, r6, #25
 800684e:	d5fb      	bpl.n	8006848 <_printf_i+0x1c8>
 8006850:	8019      	strh	r1, [r3, #0]
 8006852:	2300      	movs	r3, #0
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	4615      	mov	r5, r2
 8006858:	e7ba      	b.n	80067d0 <_printf_i+0x150>
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	1d1a      	adds	r2, r3, #4
 800685e:	602a      	str	r2, [r5, #0]
 8006860:	681d      	ldr	r5, [r3, #0]
 8006862:	6862      	ldr	r2, [r4, #4]
 8006864:	2100      	movs	r1, #0
 8006866:	4628      	mov	r0, r5
 8006868:	f7f9 fcb2 	bl	80001d0 <memchr>
 800686c:	b108      	cbz	r0, 8006872 <_printf_i+0x1f2>
 800686e:	1b40      	subs	r0, r0, r5
 8006870:	6060      	str	r0, [r4, #4]
 8006872:	6863      	ldr	r3, [r4, #4]
 8006874:	6123      	str	r3, [r4, #16]
 8006876:	2300      	movs	r3, #0
 8006878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800687c:	e7a8      	b.n	80067d0 <_printf_i+0x150>
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	462a      	mov	r2, r5
 8006882:	4649      	mov	r1, r9
 8006884:	4640      	mov	r0, r8
 8006886:	47d0      	blx	sl
 8006888:	3001      	adds	r0, #1
 800688a:	d0ab      	beq.n	80067e4 <_printf_i+0x164>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	079b      	lsls	r3, r3, #30
 8006890:	d413      	bmi.n	80068ba <_printf_i+0x23a>
 8006892:	68e0      	ldr	r0, [r4, #12]
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	4298      	cmp	r0, r3
 8006898:	bfb8      	it	lt
 800689a:	4618      	movlt	r0, r3
 800689c:	e7a4      	b.n	80067e8 <_printf_i+0x168>
 800689e:	2301      	movs	r3, #1
 80068a0:	4632      	mov	r2, r6
 80068a2:	4649      	mov	r1, r9
 80068a4:	4640      	mov	r0, r8
 80068a6:	47d0      	blx	sl
 80068a8:	3001      	adds	r0, #1
 80068aa:	d09b      	beq.n	80067e4 <_printf_i+0x164>
 80068ac:	3501      	adds	r5, #1
 80068ae:	68e3      	ldr	r3, [r4, #12]
 80068b0:	9903      	ldr	r1, [sp, #12]
 80068b2:	1a5b      	subs	r3, r3, r1
 80068b4:	42ab      	cmp	r3, r5
 80068b6:	dcf2      	bgt.n	800689e <_printf_i+0x21e>
 80068b8:	e7eb      	b.n	8006892 <_printf_i+0x212>
 80068ba:	2500      	movs	r5, #0
 80068bc:	f104 0619 	add.w	r6, r4, #25
 80068c0:	e7f5      	b.n	80068ae <_printf_i+0x22e>
 80068c2:	bf00      	nop
 80068c4:	08006c75 	.word	0x08006c75
 80068c8:	08006c86 	.word	0x08006c86

080068cc <memcpy>:
 80068cc:	440a      	add	r2, r1
 80068ce:	4291      	cmp	r1, r2
 80068d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068d4:	d100      	bne.n	80068d8 <memcpy+0xc>
 80068d6:	4770      	bx	lr
 80068d8:	b510      	push	{r4, lr}
 80068da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e2:	4291      	cmp	r1, r2
 80068e4:	d1f9      	bne.n	80068da <memcpy+0xe>
 80068e6:	bd10      	pop	{r4, pc}

080068e8 <memmove>:
 80068e8:	4288      	cmp	r0, r1
 80068ea:	b510      	push	{r4, lr}
 80068ec:	eb01 0402 	add.w	r4, r1, r2
 80068f0:	d902      	bls.n	80068f8 <memmove+0x10>
 80068f2:	4284      	cmp	r4, r0
 80068f4:	4623      	mov	r3, r4
 80068f6:	d807      	bhi.n	8006908 <memmove+0x20>
 80068f8:	1e43      	subs	r3, r0, #1
 80068fa:	42a1      	cmp	r1, r4
 80068fc:	d008      	beq.n	8006910 <memmove+0x28>
 80068fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006906:	e7f8      	b.n	80068fa <memmove+0x12>
 8006908:	4402      	add	r2, r0
 800690a:	4601      	mov	r1, r0
 800690c:	428a      	cmp	r2, r1
 800690e:	d100      	bne.n	8006912 <memmove+0x2a>
 8006910:	bd10      	pop	{r4, pc}
 8006912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800691a:	e7f7      	b.n	800690c <memmove+0x24>

0800691c <_free_r>:
 800691c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800691e:	2900      	cmp	r1, #0
 8006920:	d044      	beq.n	80069ac <_free_r+0x90>
 8006922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006926:	9001      	str	r0, [sp, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f1a1 0404 	sub.w	r4, r1, #4
 800692e:	bfb8      	it	lt
 8006930:	18e4      	addlt	r4, r4, r3
 8006932:	f000 f913 	bl	8006b5c <__malloc_lock>
 8006936:	4a1e      	ldr	r2, [pc, #120]	; (80069b0 <_free_r+0x94>)
 8006938:	9801      	ldr	r0, [sp, #4]
 800693a:	6813      	ldr	r3, [r2, #0]
 800693c:	b933      	cbnz	r3, 800694c <_free_r+0x30>
 800693e:	6063      	str	r3, [r4, #4]
 8006940:	6014      	str	r4, [r2, #0]
 8006942:	b003      	add	sp, #12
 8006944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006948:	f000 b90e 	b.w	8006b68 <__malloc_unlock>
 800694c:	42a3      	cmp	r3, r4
 800694e:	d908      	bls.n	8006962 <_free_r+0x46>
 8006950:	6825      	ldr	r5, [r4, #0]
 8006952:	1961      	adds	r1, r4, r5
 8006954:	428b      	cmp	r3, r1
 8006956:	bf01      	itttt	eq
 8006958:	6819      	ldreq	r1, [r3, #0]
 800695a:	685b      	ldreq	r3, [r3, #4]
 800695c:	1949      	addeq	r1, r1, r5
 800695e:	6021      	streq	r1, [r4, #0]
 8006960:	e7ed      	b.n	800693e <_free_r+0x22>
 8006962:	461a      	mov	r2, r3
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	b10b      	cbz	r3, 800696c <_free_r+0x50>
 8006968:	42a3      	cmp	r3, r4
 800696a:	d9fa      	bls.n	8006962 <_free_r+0x46>
 800696c:	6811      	ldr	r1, [r2, #0]
 800696e:	1855      	adds	r5, r2, r1
 8006970:	42a5      	cmp	r5, r4
 8006972:	d10b      	bne.n	800698c <_free_r+0x70>
 8006974:	6824      	ldr	r4, [r4, #0]
 8006976:	4421      	add	r1, r4
 8006978:	1854      	adds	r4, r2, r1
 800697a:	42a3      	cmp	r3, r4
 800697c:	6011      	str	r1, [r2, #0]
 800697e:	d1e0      	bne.n	8006942 <_free_r+0x26>
 8006980:	681c      	ldr	r4, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	6053      	str	r3, [r2, #4]
 8006986:	4421      	add	r1, r4
 8006988:	6011      	str	r1, [r2, #0]
 800698a:	e7da      	b.n	8006942 <_free_r+0x26>
 800698c:	d902      	bls.n	8006994 <_free_r+0x78>
 800698e:	230c      	movs	r3, #12
 8006990:	6003      	str	r3, [r0, #0]
 8006992:	e7d6      	b.n	8006942 <_free_r+0x26>
 8006994:	6825      	ldr	r5, [r4, #0]
 8006996:	1961      	adds	r1, r4, r5
 8006998:	428b      	cmp	r3, r1
 800699a:	bf04      	itt	eq
 800699c:	6819      	ldreq	r1, [r3, #0]
 800699e:	685b      	ldreq	r3, [r3, #4]
 80069a0:	6063      	str	r3, [r4, #4]
 80069a2:	bf04      	itt	eq
 80069a4:	1949      	addeq	r1, r1, r5
 80069a6:	6021      	streq	r1, [r4, #0]
 80069a8:	6054      	str	r4, [r2, #4]
 80069aa:	e7ca      	b.n	8006942 <_free_r+0x26>
 80069ac:	b003      	add	sp, #12
 80069ae:	bd30      	pop	{r4, r5, pc}
 80069b0:	20000cfc 	.word	0x20000cfc

080069b4 <sbrk_aligned>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4e0e      	ldr	r6, [pc, #56]	; (80069f0 <sbrk_aligned+0x3c>)
 80069b8:	460c      	mov	r4, r1
 80069ba:	6831      	ldr	r1, [r6, #0]
 80069bc:	4605      	mov	r5, r0
 80069be:	b911      	cbnz	r1, 80069c6 <sbrk_aligned+0x12>
 80069c0:	f000 f8bc 	bl	8006b3c <_sbrk_r>
 80069c4:	6030      	str	r0, [r6, #0]
 80069c6:	4621      	mov	r1, r4
 80069c8:	4628      	mov	r0, r5
 80069ca:	f000 f8b7 	bl	8006b3c <_sbrk_r>
 80069ce:	1c43      	adds	r3, r0, #1
 80069d0:	d00a      	beq.n	80069e8 <sbrk_aligned+0x34>
 80069d2:	1cc4      	adds	r4, r0, #3
 80069d4:	f024 0403 	bic.w	r4, r4, #3
 80069d8:	42a0      	cmp	r0, r4
 80069da:	d007      	beq.n	80069ec <sbrk_aligned+0x38>
 80069dc:	1a21      	subs	r1, r4, r0
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 f8ac 	bl	8006b3c <_sbrk_r>
 80069e4:	3001      	adds	r0, #1
 80069e6:	d101      	bne.n	80069ec <sbrk_aligned+0x38>
 80069e8:	f04f 34ff 	mov.w	r4, #4294967295
 80069ec:	4620      	mov	r0, r4
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	20000d00 	.word	0x20000d00

080069f4 <_malloc_r>:
 80069f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f8:	1ccd      	adds	r5, r1, #3
 80069fa:	f025 0503 	bic.w	r5, r5, #3
 80069fe:	3508      	adds	r5, #8
 8006a00:	2d0c      	cmp	r5, #12
 8006a02:	bf38      	it	cc
 8006a04:	250c      	movcc	r5, #12
 8006a06:	2d00      	cmp	r5, #0
 8006a08:	4607      	mov	r7, r0
 8006a0a:	db01      	blt.n	8006a10 <_malloc_r+0x1c>
 8006a0c:	42a9      	cmp	r1, r5
 8006a0e:	d905      	bls.n	8006a1c <_malloc_r+0x28>
 8006a10:	230c      	movs	r3, #12
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	2600      	movs	r6, #0
 8006a16:	4630      	mov	r0, r6
 8006a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a1c:	4e2e      	ldr	r6, [pc, #184]	; (8006ad8 <_malloc_r+0xe4>)
 8006a1e:	f000 f89d 	bl	8006b5c <__malloc_lock>
 8006a22:	6833      	ldr	r3, [r6, #0]
 8006a24:	461c      	mov	r4, r3
 8006a26:	bb34      	cbnz	r4, 8006a76 <_malloc_r+0x82>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	f7ff ffc2 	bl	80069b4 <sbrk_aligned>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	4604      	mov	r4, r0
 8006a34:	d14d      	bne.n	8006ad2 <_malloc_r+0xde>
 8006a36:	6834      	ldr	r4, [r6, #0]
 8006a38:	4626      	mov	r6, r4
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	d140      	bne.n	8006ac0 <_malloc_r+0xcc>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	4631      	mov	r1, r6
 8006a42:	4638      	mov	r0, r7
 8006a44:	eb04 0803 	add.w	r8, r4, r3
 8006a48:	f000 f878 	bl	8006b3c <_sbrk_r>
 8006a4c:	4580      	cmp	r8, r0
 8006a4e:	d13a      	bne.n	8006ac6 <_malloc_r+0xd2>
 8006a50:	6821      	ldr	r1, [r4, #0]
 8006a52:	3503      	adds	r5, #3
 8006a54:	1a6d      	subs	r5, r5, r1
 8006a56:	f025 0503 	bic.w	r5, r5, #3
 8006a5a:	3508      	adds	r5, #8
 8006a5c:	2d0c      	cmp	r5, #12
 8006a5e:	bf38      	it	cc
 8006a60:	250c      	movcc	r5, #12
 8006a62:	4629      	mov	r1, r5
 8006a64:	4638      	mov	r0, r7
 8006a66:	f7ff ffa5 	bl	80069b4 <sbrk_aligned>
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d02b      	beq.n	8006ac6 <_malloc_r+0xd2>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	442b      	add	r3, r5
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	e00e      	b.n	8006a94 <_malloc_r+0xa0>
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	1b52      	subs	r2, r2, r5
 8006a7a:	d41e      	bmi.n	8006aba <_malloc_r+0xc6>
 8006a7c:	2a0b      	cmp	r2, #11
 8006a7e:	d916      	bls.n	8006aae <_malloc_r+0xba>
 8006a80:	1961      	adds	r1, r4, r5
 8006a82:	42a3      	cmp	r3, r4
 8006a84:	6025      	str	r5, [r4, #0]
 8006a86:	bf18      	it	ne
 8006a88:	6059      	strne	r1, [r3, #4]
 8006a8a:	6863      	ldr	r3, [r4, #4]
 8006a8c:	bf08      	it	eq
 8006a8e:	6031      	streq	r1, [r6, #0]
 8006a90:	5162      	str	r2, [r4, r5]
 8006a92:	604b      	str	r3, [r1, #4]
 8006a94:	4638      	mov	r0, r7
 8006a96:	f104 060b 	add.w	r6, r4, #11
 8006a9a:	f000 f865 	bl	8006b68 <__malloc_unlock>
 8006a9e:	f026 0607 	bic.w	r6, r6, #7
 8006aa2:	1d23      	adds	r3, r4, #4
 8006aa4:	1af2      	subs	r2, r6, r3
 8006aa6:	d0b6      	beq.n	8006a16 <_malloc_r+0x22>
 8006aa8:	1b9b      	subs	r3, r3, r6
 8006aaa:	50a3      	str	r3, [r4, r2]
 8006aac:	e7b3      	b.n	8006a16 <_malloc_r+0x22>
 8006aae:	6862      	ldr	r2, [r4, #4]
 8006ab0:	42a3      	cmp	r3, r4
 8006ab2:	bf0c      	ite	eq
 8006ab4:	6032      	streq	r2, [r6, #0]
 8006ab6:	605a      	strne	r2, [r3, #4]
 8006ab8:	e7ec      	b.n	8006a94 <_malloc_r+0xa0>
 8006aba:	4623      	mov	r3, r4
 8006abc:	6864      	ldr	r4, [r4, #4]
 8006abe:	e7b2      	b.n	8006a26 <_malloc_r+0x32>
 8006ac0:	4634      	mov	r4, r6
 8006ac2:	6876      	ldr	r6, [r6, #4]
 8006ac4:	e7b9      	b.n	8006a3a <_malloc_r+0x46>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	603b      	str	r3, [r7, #0]
 8006aca:	4638      	mov	r0, r7
 8006acc:	f000 f84c 	bl	8006b68 <__malloc_unlock>
 8006ad0:	e7a1      	b.n	8006a16 <_malloc_r+0x22>
 8006ad2:	6025      	str	r5, [r4, #0]
 8006ad4:	e7de      	b.n	8006a94 <_malloc_r+0xa0>
 8006ad6:	bf00      	nop
 8006ad8:	20000cfc 	.word	0x20000cfc

08006adc <_realloc_r>:
 8006adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	4614      	mov	r4, r2
 8006ae4:	460e      	mov	r6, r1
 8006ae6:	b921      	cbnz	r1, 8006af2 <_realloc_r+0x16>
 8006ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aec:	4611      	mov	r1, r2
 8006aee:	f7ff bf81 	b.w	80069f4 <_malloc_r>
 8006af2:	b92a      	cbnz	r2, 8006b00 <_realloc_r+0x24>
 8006af4:	f7ff ff12 	bl	800691c <_free_r>
 8006af8:	4625      	mov	r5, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b00:	f000 f838 	bl	8006b74 <_malloc_usable_size_r>
 8006b04:	4284      	cmp	r4, r0
 8006b06:	4607      	mov	r7, r0
 8006b08:	d802      	bhi.n	8006b10 <_realloc_r+0x34>
 8006b0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b0e:	d812      	bhi.n	8006b36 <_realloc_r+0x5a>
 8006b10:	4621      	mov	r1, r4
 8006b12:	4640      	mov	r0, r8
 8006b14:	f7ff ff6e 	bl	80069f4 <_malloc_r>
 8006b18:	4605      	mov	r5, r0
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d0ed      	beq.n	8006afa <_realloc_r+0x1e>
 8006b1e:	42bc      	cmp	r4, r7
 8006b20:	4622      	mov	r2, r4
 8006b22:	4631      	mov	r1, r6
 8006b24:	bf28      	it	cs
 8006b26:	463a      	movcs	r2, r7
 8006b28:	f7ff fed0 	bl	80068cc <memcpy>
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4640      	mov	r0, r8
 8006b30:	f7ff fef4 	bl	800691c <_free_r>
 8006b34:	e7e1      	b.n	8006afa <_realloc_r+0x1e>
 8006b36:	4635      	mov	r5, r6
 8006b38:	e7df      	b.n	8006afa <_realloc_r+0x1e>
	...

08006b3c <_sbrk_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d06      	ldr	r5, [pc, #24]	; (8006b58 <_sbrk_r+0x1c>)
 8006b40:	2300      	movs	r3, #0
 8006b42:	4604      	mov	r4, r0
 8006b44:	4608      	mov	r0, r1
 8006b46:	602b      	str	r3, [r5, #0]
 8006b48:	f7fa feec 	bl	8001924 <_sbrk>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_sbrk_r+0x1a>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_sbrk_r+0x1a>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	20000d04 	.word	0x20000d04

08006b5c <__malloc_lock>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__malloc_lock+0x8>)
 8006b5e:	f000 b811 	b.w	8006b84 <__retarget_lock_acquire_recursive>
 8006b62:	bf00      	nop
 8006b64:	20000d08 	.word	0x20000d08

08006b68 <__malloc_unlock>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__malloc_unlock+0x8>)
 8006b6a:	f000 b80c 	b.w	8006b86 <__retarget_lock_release_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20000d08 	.word	0x20000d08

08006b74 <_malloc_usable_size_r>:
 8006b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b78:	1f18      	subs	r0, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bfbc      	itt	lt
 8006b7e:	580b      	ldrlt	r3, [r1, r0]
 8006b80:	18c0      	addlt	r0, r0, r3
 8006b82:	4770      	bx	lr

08006b84 <__retarget_lock_acquire_recursive>:
 8006b84:	4770      	bx	lr

08006b86 <__retarget_lock_release_recursive>:
 8006b86:	4770      	bx	lr

08006b88 <trunc>:
 8006b88:	ec51 0b10 	vmov	r0, r1, d0
 8006b8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006b90:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006b94:	2b13      	cmp	r3, #19
 8006b96:	b5d0      	push	{r4, r6, r7, lr}
 8006b98:	460c      	mov	r4, r1
 8006b9a:	dc10      	bgt.n	8006bbe <trunc+0x36>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	bfa5      	ittet	ge
 8006ba0:	4a11      	ldrge	r2, [pc, #68]	; (8006be8 <trunc+0x60>)
 8006ba2:	fa42 f303 	asrge.w	r3, r2, r3
 8006ba6:	2100      	movlt	r1, #0
 8006ba8:	2100      	movge	r1, #0
 8006baa:	bfb9      	ittee	lt
 8006bac:	2000      	movlt	r0, #0
 8006bae:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8006bb2:	2000      	movge	r0, #0
 8006bb4:	ea24 0103 	bicge.w	r1, r4, r3
 8006bb8:	ec41 0b10 	vmov	d0, r0, r1
 8006bbc:	bdd0      	pop	{r4, r6, r7, pc}
 8006bbe:	2b33      	cmp	r3, #51	; 0x33
 8006bc0:	dd08      	ble.n	8006bd4 <trunc+0x4c>
 8006bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc6:	d1f7      	bne.n	8006bb8 <trunc+0x30>
 8006bc8:	ee10 2a10 	vmov	r2, s0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	f7f9 fb55 	bl	800027c <__adddf3>
 8006bd2:	e7f1      	b.n	8006bb8 <trunc+0x30>
 8006bd4:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bdc:	fa23 f202 	lsr.w	r2, r3, r2
 8006be0:	ea20 0602 	bic.w	r6, r0, r2
 8006be4:	4630      	mov	r0, r6
 8006be6:	e7e7      	b.n	8006bb8 <trunc+0x30>
 8006be8:	000fffff 	.word	0x000fffff

08006bec <_init>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr

08006bf8 <_fini>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	bf00      	nop
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr
