
008_HTS221_SEN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006cf8  08006cf8  00016cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da4  08006da4  00020300  2**0
                  CONTENTS
  4 .ARM          00000008  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dac  08006dac  00020300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006db0  08006db0  00016db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  08006db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  20000300  080070b4  00020300  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b6c  080070b4  00020b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa80  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b7  00000000  00000000  0003adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0003e168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  0003f8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f81  00000000  00000000  00040e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aca0  00000000  00000000  00069df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5e3d  00000000  00000000  00084a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a8ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006740  00000000  00000000  0017a920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000300 	.word	0x20000300
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ce0 	.word	0x08006ce0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000304 	.word	0x20000304
 80001cc:	08006ce0 	.word	0x08006ce0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b974 	b.w	8000938 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468e      	mov	lr, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14d      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000676:	428a      	cmp	r2, r1
 8000678:	4694      	mov	ip, r2
 800067a:	d969      	bls.n	8000750 <__udivmoddi4+0xe8>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b152      	cbz	r2, 8000698 <__udivmoddi4+0x30>
 8000682:	fa01 f302 	lsl.w	r3, r1, r2
 8000686:	f1c2 0120 	rsb	r1, r2, #32
 800068a:	fa20 f101 	lsr.w	r1, r0, r1
 800068e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000692:	ea41 0e03 	orr.w	lr, r1, r3
 8000696:	4094      	lsls	r4, r2
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	0c21      	lsrs	r1, r4, #16
 800069e:	fbbe f6f8 	udiv	r6, lr, r8
 80006a2:	fa1f f78c 	uxth.w	r7, ip
 80006a6:	fb08 e316 	mls	r3, r8, r6, lr
 80006aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ae:	fb06 f107 	mul.w	r1, r6, r7
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80006be:	f080 811f 	bcs.w	8000900 <__udivmoddi4+0x298>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 811c 	bls.w	8000900 <__udivmoddi4+0x298>
 80006c8:	3e02      	subs	r6, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d4:	fb08 3310 	mls	r3, r8, r0, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb00 f707 	mul.w	r7, r0, r7
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	d90a      	bls.n	80006fa <__udivmoddi4+0x92>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ec:	f080 810a 	bcs.w	8000904 <__udivmoddi4+0x29c>
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	f240 8107 	bls.w	8000904 <__udivmoddi4+0x29c>
 80006f6:	4464      	add	r4, ip
 80006f8:	3802      	subs	r0, #2
 80006fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006fe:	1be4      	subs	r4, r4, r7
 8000700:	2600      	movs	r6, #0
 8000702:	b11d      	cbz	r5, 800070c <__udivmoddi4+0xa4>
 8000704:	40d4      	lsrs	r4, r2
 8000706:	2300      	movs	r3, #0
 8000708:	e9c5 4300 	strd	r4, r3, [r5]
 800070c:	4631      	mov	r1, r6
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0xc2>
 8000716:	2d00      	cmp	r5, #0
 8000718:	f000 80ef 	beq.w	80008fa <__udivmoddi4+0x292>
 800071c:	2600      	movs	r6, #0
 800071e:	e9c5 0100 	strd	r0, r1, [r5]
 8000722:	4630      	mov	r0, r6
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	fab3 f683 	clz	r6, r3
 800072e:	2e00      	cmp	r6, #0
 8000730:	d14a      	bne.n	80007c8 <__udivmoddi4+0x160>
 8000732:	428b      	cmp	r3, r1
 8000734:	d302      	bcc.n	800073c <__udivmoddi4+0xd4>
 8000736:	4282      	cmp	r2, r0
 8000738:	f200 80f9 	bhi.w	800092e <__udivmoddi4+0x2c6>
 800073c:	1a84      	subs	r4, r0, r2
 800073e:	eb61 0303 	sbc.w	r3, r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	469e      	mov	lr, r3
 8000746:	2d00      	cmp	r5, #0
 8000748:	d0e0      	beq.n	800070c <__udivmoddi4+0xa4>
 800074a:	e9c5 4e00 	strd	r4, lr, [r5]
 800074e:	e7dd      	b.n	800070c <__udivmoddi4+0xa4>
 8000750:	b902      	cbnz	r2, 8000754 <__udivmoddi4+0xec>
 8000752:	deff      	udf	#255	; 0xff
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	2a00      	cmp	r2, #0
 800075a:	f040 8092 	bne.w	8000882 <__udivmoddi4+0x21a>
 800075e:	eba1 010c 	sub.w	r1, r1, ip
 8000762:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000766:	fa1f fe8c 	uxth.w	lr, ip
 800076a:	2601      	movs	r6, #1
 800076c:	0c20      	lsrs	r0, r4, #16
 800076e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000772:	fb07 1113 	mls	r1, r7, r3, r1
 8000776:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800077a:	fb0e f003 	mul.w	r0, lr, r3
 800077e:	4288      	cmp	r0, r1
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x12c>
 8000782:	eb1c 0101 	adds.w	r1, ip, r1
 8000786:	f103 38ff 	add.w	r8, r3, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x12a>
 800078c:	4288      	cmp	r0, r1
 800078e:	f200 80cb 	bhi.w	8000928 <__udivmoddi4+0x2c0>
 8000792:	4643      	mov	r3, r8
 8000794:	1a09      	subs	r1, r1, r0
 8000796:	b2a4      	uxth	r4, r4
 8000798:	fbb1 f0f7 	udiv	r0, r1, r7
 800079c:	fb07 1110 	mls	r1, r7, r0, r1
 80007a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007a4:	fb0e fe00 	mul.w	lr, lr, r0
 80007a8:	45a6      	cmp	lr, r4
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x156>
 80007ac:	eb1c 0404 	adds.w	r4, ip, r4
 80007b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007b4:	d202      	bcs.n	80007bc <__udivmoddi4+0x154>
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	f200 80bb 	bhi.w	8000932 <__udivmoddi4+0x2ca>
 80007bc:	4608      	mov	r0, r1
 80007be:	eba4 040e 	sub.w	r4, r4, lr
 80007c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007c6:	e79c      	b.n	8000702 <__udivmoddi4+0x9a>
 80007c8:	f1c6 0720 	rsb	r7, r6, #32
 80007cc:	40b3      	lsls	r3, r6
 80007ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80007d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007d6:	fa20 f407 	lsr.w	r4, r0, r7
 80007da:	fa01 f306 	lsl.w	r3, r1, r6
 80007de:	431c      	orrs	r4, r3
 80007e0:	40f9      	lsrs	r1, r7
 80007e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007e6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ee:	0c20      	lsrs	r0, r4, #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fb09 1118 	mls	r1, r9, r8, r1
 80007f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000800:	4288      	cmp	r0, r1
 8000802:	fa02 f206 	lsl.w	r2, r2, r6
 8000806:	d90b      	bls.n	8000820 <__udivmoddi4+0x1b8>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000810:	f080 8088 	bcs.w	8000924 <__udivmoddi4+0x2bc>
 8000814:	4288      	cmp	r0, r1
 8000816:	f240 8085 	bls.w	8000924 <__udivmoddi4+0x2bc>
 800081a:	f1a8 0802 	sub.w	r8, r8, #2
 800081e:	4461      	add	r1, ip
 8000820:	1a09      	subs	r1, r1, r0
 8000822:	b2a4      	uxth	r4, r4
 8000824:	fbb1 f0f9 	udiv	r0, r1, r9
 8000828:	fb09 1110 	mls	r1, r9, r0, r1
 800082c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000830:	fb00 fe0e 	mul.w	lr, r0, lr
 8000834:	458e      	cmp	lr, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x1e2>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000840:	d26c      	bcs.n	800091c <__udivmoddi4+0x2b4>
 8000842:	458e      	cmp	lr, r1
 8000844:	d96a      	bls.n	800091c <__udivmoddi4+0x2b4>
 8000846:	3802      	subs	r0, #2
 8000848:	4461      	add	r1, ip
 800084a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800084e:	fba0 9402 	umull	r9, r4, r0, r2
 8000852:	eba1 010e 	sub.w	r1, r1, lr
 8000856:	42a1      	cmp	r1, r4
 8000858:	46c8      	mov	r8, r9
 800085a:	46a6      	mov	lr, r4
 800085c:	d356      	bcc.n	800090c <__udivmoddi4+0x2a4>
 800085e:	d053      	beq.n	8000908 <__udivmoddi4+0x2a0>
 8000860:	b15d      	cbz	r5, 800087a <__udivmoddi4+0x212>
 8000862:	ebb3 0208 	subs.w	r2, r3, r8
 8000866:	eb61 010e 	sbc.w	r1, r1, lr
 800086a:	fa01 f707 	lsl.w	r7, r1, r7
 800086e:	fa22 f306 	lsr.w	r3, r2, r6
 8000872:	40f1      	lsrs	r1, r6
 8000874:	431f      	orrs	r7, r3
 8000876:	e9c5 7100 	strd	r7, r1, [r5]
 800087a:	2600      	movs	r6, #0
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	40d8      	lsrs	r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	fa21 f303 	lsr.w	r3, r1, r3
 8000890:	4091      	lsls	r1, r2
 8000892:	4301      	orrs	r1, r0
 8000894:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000898:	fa1f fe8c 	uxth.w	lr, ip
 800089c:	fbb3 f0f7 	udiv	r0, r3, r7
 80008a0:	fb07 3610 	mls	r6, r7, r0, r3
 80008a4:	0c0b      	lsrs	r3, r1, #16
 80008a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008aa:	fb00 f60e 	mul.w	r6, r0, lr
 80008ae:	429e      	cmp	r6, r3
 80008b0:	fa04 f402 	lsl.w	r4, r4, r2
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x260>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80008be:	d22f      	bcs.n	8000920 <__udivmoddi4+0x2b8>
 80008c0:	429e      	cmp	r6, r3
 80008c2:	d92d      	bls.n	8000920 <__udivmoddi4+0x2b8>
 80008c4:	3802      	subs	r0, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1b9b      	subs	r3, r3, r6
 80008ca:	b289      	uxth	r1, r1
 80008cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008d0:	fb07 3316 	mls	r3, r7, r6, r3
 80008d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d8:	fb06 f30e 	mul.w	r3, r6, lr
 80008dc:	428b      	cmp	r3, r1
 80008de:	d908      	bls.n	80008f2 <__udivmoddi4+0x28a>
 80008e0:	eb1c 0101 	adds.w	r1, ip, r1
 80008e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008e8:	d216      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d914      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008ee:	3e02      	subs	r6, #2
 80008f0:	4461      	add	r1, ip
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008f8:	e738      	b.n	800076c <__udivmoddi4+0x104>
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e705      	b.n	800070c <__udivmoddi4+0xa4>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e3      	b.n	80006cc <__udivmoddi4+0x64>
 8000904:	4618      	mov	r0, r3
 8000906:	e6f8      	b.n	80006fa <__udivmoddi4+0x92>
 8000908:	454b      	cmp	r3, r9
 800090a:	d2a9      	bcs.n	8000860 <__udivmoddi4+0x1f8>
 800090c:	ebb9 0802 	subs.w	r8, r9, r2
 8000910:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000914:	3801      	subs	r0, #1
 8000916:	e7a3      	b.n	8000860 <__udivmoddi4+0x1f8>
 8000918:	4646      	mov	r6, r8
 800091a:	e7ea      	b.n	80008f2 <__udivmoddi4+0x28a>
 800091c:	4620      	mov	r0, r4
 800091e:	e794      	b.n	800084a <__udivmoddi4+0x1e2>
 8000920:	4640      	mov	r0, r8
 8000922:	e7d1      	b.n	80008c8 <__udivmoddi4+0x260>
 8000924:	46d0      	mov	r8, sl
 8000926:	e77b      	b.n	8000820 <__udivmoddi4+0x1b8>
 8000928:	3b02      	subs	r3, #2
 800092a:	4461      	add	r1, ip
 800092c:	e732      	b.n	8000794 <__udivmoddi4+0x12c>
 800092e:	4630      	mov	r0, r6
 8000930:	e709      	b.n	8000746 <__udivmoddi4+0xde>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	e742      	b.n	80007be <__udivmoddi4+0x156>

08000938 <__aeabi_idiv0>:
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f001 fb37 	bl	8001fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f8e1 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 faa9 	bl	8000ea0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800094e:	f000 f93f 	bl	8000bd0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000952:	f000 f975 	bl	8000c40 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000956:	f000 f9b1 	bl	8000cbc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800095a:	f000 f9d5 	bl	8000d08 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800095e:	f000 fa11 	bl	8000d84 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000962:	f000 fa3f 	bl	8000de4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000966:	f000 fa6d 	bl	8000e44 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,train,sizeof(train),1000);
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8000972:	495b      	ldr	r1, [pc, #364]	; (8000ae0 <main+0x1a4>)
 8000974:	485b      	ldr	r0, [pc, #364]	; (8000ae4 <main+0x1a8>)
 8000976:	f004 fd1c 	bl	80053b2 <HAL_UART_Transmit>
  HAL_Delay(100);
 800097a:	2064      	movs	r0, #100	; 0x64
 800097c:	f001 fb8e 	bl	800209c <HAL_Delay>
  HAL_UART_Transmit(&huart1,msg0,sizeof(msg0),1000);
 8000980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000984:	2229      	movs	r2, #41	; 0x29
 8000986:	4958      	ldr	r1, [pc, #352]	; (8000ae8 <main+0x1ac>)
 8000988:	4856      	ldr	r0, [pc, #344]	; (8000ae4 <main+0x1a8>)
 800098a:	f004 fd12 	bl	80053b2 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	223d      	movs	r2, #61	; 0x3d
 8000994:	4955      	ldr	r1, [pc, #340]	; (8000aec <main+0x1b0>)
 8000996:	4853      	ldr	r0, [pc, #332]	; (8000ae4 <main+0x1a8>)
 8000998:	f004 fd0b 	bl	80053b2 <HAL_UART_Transmit>
  HAL_Delay(100);
 800099c:	2064      	movs	r0, #100	; 0x64
 800099e:	f001 fb7d 	bl	800209c <HAL_Delay>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	2228      	movs	r2, #40	; 0x28
 80009a8:	4951      	ldr	r1, [pc, #324]	; (8000af0 <main+0x1b4>)
 80009aa:	484e      	ldr	r0, [pc, #312]	; (8000ae4 <main+0x1a8>)
 80009ac:	f004 fd01 	bl	80053b2 <HAL_UART_Transmit>
  //1. Initialize temperature sensor
  BSP_TSENSOR_Init();
 80009b0:	f001 f944 	bl	8001c3c <BSP_TSENSOR_Init>
  //2. Initialize humidity sensor
  BSP_HSENSOR_Init();
 80009b4:	f001 f914 	bl	8001be0 <BSP_HSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 80009b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009bc:	2225      	movs	r2, #37	; 0x25
 80009be:	494d      	ldr	r1, [pc, #308]	; (8000af4 <main+0x1b8>)
 80009c0:	4848      	ldr	r0, [pc, #288]	; (8000ae4 <main+0x1a8>)
 80009c2:	f004 fcf6 	bl	80053b2 <HAL_UART_Transmit>
  //
  int temperatureWholeNumber = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  int temperatureDecimalNumber = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  float temperatureDifference_f = 0.0;
 80009ce:	f04f 0300 	mov.w	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  int humidityWholeNumber = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  int humidityDecimalNumber = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
  float humidityDifference_f = 0.0;
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //3. Read Temperature value
	  temperature_value = BSP_TSENSOR_ReadTemp();
 80009e2:	f001 f947 	bl	8001c74 <BSP_TSENSOR_ReadTemp>
 80009e6:	eef0 7a40 	vmov.f32	s15, s0
 80009ea:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <main+0x1bc>)
 80009ec:	edc3 7a00 	vstr	s15, [r3]
	  //4. Read Humidity value
	  humidity_value = BSP_HSENSOR_ReadHumidity();
 80009f0:	f001 f916 	bl	8001c20 <BSP_HSENSOR_ReadHumidity>
 80009f4:	eef0 7a40 	vmov.f32	s15, s0
 80009f8:	4b40      	ldr	r3, [pc, #256]	; (8000afc <main+0x1c0>)
 80009fa:	edc3 7a00 	vstr	s15, [r3]
	  // Converting a float variable into 2 integer variables for temperature
	  temperatureWholeNumber = temperature_value;
 80009fe:	4b3e      	ldr	r3, [pc, #248]	; (8000af8 <main+0x1bc>)
 8000a00:	edd3 7a00 	vldr	s15, [r3]
 8000a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a08:	ee17 3a90 	vmov	r3, s15
 8000a0c:	617b      	str	r3, [r7, #20]
	  temperatureDifference_f = temperature_value - temperatureWholeNumber;
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <main+0x1bc>)
 8000a10:	ed93 7a00 	vldr	s14, [r3]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a22:	edc7 7a03 	vstr	s15, [r7, #12]
	  temperatureDecimalNumber = trunc(temperatureDifference_f * 100);
 8000a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a2a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000b00 <main+0x1c4>
 8000a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a32:	ee17 0a90 	vmov	r0, s15
 8000a36:	f7ff fd7f 	bl	8000538 <__aeabi_f2d>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	ec43 2b10 	vmov	d0, r2, r3
 8000a42:	f006 f91b 	bl	8006c7c <trunc>
 8000a46:	ec53 2b10 	vmov	r2, r3, d0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f7ff fdcb 	bl	80005e8 <__aeabi_d2iz>
 8000a52:	4603      	mov	r3, r0
 8000a54:	613b      	str	r3, [r7, #16]
	  // Converting a float variable into 2 integer variables for humidity
	  humidityWholeNumber = humidity_value;
 8000a56:	4b29      	ldr	r3, [pc, #164]	; (8000afc <main+0x1c0>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a60:	ee17 3a90 	vmov	r3, s15
 8000a64:	60bb      	str	r3, [r7, #8]
	  humidityDifference_f = humidity_value - humidityWholeNumber;
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <main+0x1c0>)
 8000a68:	ed93 7a00 	vldr	s14, [r3]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	ee07 3a90 	vmov	s15, r3
 8000a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a7a:	edc7 7a00 	vstr	s15, [r7]
	  humidityDecimalNumber = trunc(humidityDifference_f * 100);
 8000a7e:	edd7 7a00 	vldr	s15, [r7]
 8000a82:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000b00 <main+0x1c4>
 8000a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a8a:	ee17 0a90 	vmov	r0, s15
 8000a8e:	f7ff fd53 	bl	8000538 <__aeabi_f2d>
 8000a92:	4602      	mov	r2, r0
 8000a94:	460b      	mov	r3, r1
 8000a96:	ec43 2b10 	vmov	d0, r2, r3
 8000a9a:	f006 f8ef 	bl	8006c7c <trunc>
 8000a9e:	ec53 2b10 	vmov	r2, r3, d0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f7ff fd9f 	bl	80005e8 <__aeabi_d2iz>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	607b      	str	r3, [r7, #4]
	  snprintf(str_tmp,100,"Temperature = %d.%02d ; Humidity = %d.%02d\n\r", temperatureWholeNumber, temperatureDecimalNumber, humidityWholeNumber, humidityDecimalNumber);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <main+0x1c8>)
 8000abe:	2164      	movs	r1, #100	; 0x64
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <main+0x1cc>)
 8000ac2:	f005 fc67 	bl	8006394 <sniprintf>
	  HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	2264      	movs	r2, #100	; 0x64
 8000acc:	490e      	ldr	r1, [pc, #56]	; (8000b08 <main+0x1cc>)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <main+0x1a8>)
 8000ad0:	f004 fc6f 	bl	80053b2 <HAL_UART_Transmit>
	  HAL_Delay(3000);
 8000ad4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ad8:	f001 fae0 	bl	800209c <HAL_Delay>
	  temperature_value = BSP_TSENSOR_ReadTemp();
 8000adc:	e781      	b.n	80009e2 <main+0xa6>
 8000ade:	bf00      	nop
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000450 	.word	0x20000450
 8000ae8:	200001b8 	.word	0x200001b8
 8000aec:	200001e4 	.word	0x200001e4
 8000af0:	20000224 	.word	0x20000224
 8000af4:	2000024c 	.word	0x2000024c
 8000af8:	20000a68 	.word	0x20000a68
 8000afc:	20000a64 	.word	0x20000a64
 8000b00:	42c80000 	.word	0x42c80000
 8000b04:	08006cf8 	.word	0x08006cf8
 8000b08:	20000a6c 	.word	0x20000a6c

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b096      	sub	sp, #88	; 0x58
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2244      	movs	r2, #68	; 0x44
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fc32 	bl	8006384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b32:	f002 ff5f 	bl	80039f4 <HAL_PWREx_ControlVoltageScaling>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b3c:	f000 fb62 	bl	8001204 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b40:	f002 ff3a 	bl	80039b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <SystemClock_Config+0xc0>)
 8000b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <SystemClock_Config+0xc0>)
 8000b4c:	f023 0318 	bic.w	r3, r3, #24
 8000b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b54:	2314      	movs	r3, #20
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b64:	2360      	movs	r3, #96	; 0x60
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b74:	2328      	movs	r3, #40	; 0x28
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 f855 	bl	8003c38 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b94:	f000 fb36 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fc1d 	bl	80043f0 <HAL_RCC_ClockConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bbc:	f000 fb22 	bl	8001204 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bc0:	f004 f924 	bl	8004e0c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bc4:	bf00      	nop
 8000bc6:	3758      	adds	r7, #88	; 0x58
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bd6:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <MX_DFSDM1_Init+0x6c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000be8:	2202      	movs	r2, #2
 8000bea:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c26:	f001 fb6f 	bl	8002308 <HAL_DFSDM_ChannelInit>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000c30:	f000 fae8 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000031c 	.word	0x2000031c
 8000c3c:	40016020 	.word	0x40016020

08000c40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <MX_I2C2_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c4c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000c50:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c7e:	f001 ff28 	bl	8002ad2 <HAL_I2C_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c88:	f000 fabc 	bl	8001204 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000c90:	f002 fcb2 	bl	80035f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c9a:	f000 fab3 	bl	8001204 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_I2C2_Init+0x74>)
 8000ca2:	f002 fcf4 	bl	800368e <HAL_I2CEx_ConfigDigitalFilter>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 faaa 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000354 	.word	0x20000354
 8000cb8:	40005800 	.word	0x40005800

08000cbc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <MX_QUADSPI_Init+0x48>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cda:	2217      	movs	r2, #23
 8000cdc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_QUADSPI_Init+0x44>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_QUADSPI_Init+0x44>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cec:	f002 fee8 	bl	8003ac0 <HAL_QSPI_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000cf6:	f000 fa85 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200003a8 	.word	0x200003a8
 8000d04:	a0001000 	.word	0xa0001000

08000d08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <MX_SPI3_Init+0x78>)
 8000d10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d22:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d26:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d56:	2207      	movs	r2, #7
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d62:	2208      	movs	r2, #8
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_SPI3_Init+0x74>)
 8000d68:	f004 fa32 	bl	80051d0 <HAL_SPI_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d72:	f000 fa47 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200003ec 	.word	0x200003ec
 8000d80:	40003c00 	.word	0x40003c00

08000d84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000d8a:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <MX_USART1_UART_Init+0x5c>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USART1_UART_Init+0x58>)
 8000dc8:	f004 faa5 	bl	8005316 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dd2:	f000 fa17 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000450 	.word	0x20000450
 8000de0:	40013800 	.word	0x40013800

08000de4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000dea:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <MX_USART3_UART_Init+0x5c>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USART3_UART_Init+0x58>)
 8000e28:	f004 fa75 	bl	8005316 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 f9e7 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200004d4 	.word	0x200004d4
 8000e40:	40004800 	.word	0x40004800

08000e44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e52:	2206      	movs	r2, #6
 8000e54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5e:	2202      	movs	r2, #2
 8000e60:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e88:	f002 fc4d 	bl	8003726 <HAL_PCD_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e92:	f000 f9b7 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000558 	.word	0x20000558

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb6:	4bbd      	ldr	r3, [pc, #756]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4abc      	ldr	r2, [pc, #752]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4bba      	ldr	r3, [pc, #744]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4bb7      	ldr	r3, [pc, #732]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4ab6      	ldr	r2, [pc, #728]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4bb4      	ldr	r3, [pc, #720]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4bb1      	ldr	r3, [pc, #708]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4ab0      	ldr	r2, [pc, #704]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4bae      	ldr	r3, [pc, #696]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4bab      	ldr	r3, [pc, #684]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4aaa      	ldr	r2, [pc, #680]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4ba8      	ldr	r3, [pc, #672]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	4ba5      	ldr	r3, [pc, #660]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4aa4      	ldr	r2, [pc, #656]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4ba2      	ldr	r3, [pc, #648]	; (80011ac <MX_GPIO_Init+0x30c>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f34:	489e      	ldr	r0, [pc, #632]	; (80011b0 <MX_GPIO_Init+0x310>)
 8000f36:	f001 fd91 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f001 fd8a 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f4e:	4899      	ldr	r0, [pc, #612]	; (80011b4 <MX_GPIO_Init+0x314>)
 8000f50:	f001 fd84 	bl	8002a5c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f5a:	4897      	ldr	r0, [pc, #604]	; (80011b8 <MX_GPIO_Init+0x318>)
 8000f5c:	f001 fd7e 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f66:	4894      	ldr	r0, [pc, #592]	; (80011b8 <MX_GPIO_Init+0x318>)
 8000f68:	f001 fd78 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f72:	4892      	ldr	r0, [pc, #584]	; (80011bc <MX_GPIO_Init+0x31c>)
 8000f74:	f001 fd72 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	488d      	ldr	r0, [pc, #564]	; (80011b4 <MX_GPIO_Init+0x314>)
 8000f7e:	f001 fd6d 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2101      	movs	r1, #1
 8000f86:	488a      	ldr	r0, [pc, #552]	; (80011b0 <MX_GPIO_Init+0x310>)
 8000f88:	f001 fd68 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f8c:	f240 1315 	movw	r3, #277	; 0x115
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4882      	ldr	r0, [pc, #520]	; (80011b0 <MX_GPIO_Init+0x310>)
 8000fa6:	f001 fabb 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000faa:	236a      	movs	r3, #106	; 0x6a
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	487c      	ldr	r0, [pc, #496]	; (80011b0 <MX_GPIO_Init+0x310>)
 8000fc0:	f001 faae 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4878      	ldr	r0, [pc, #480]	; (80011bc <MX_GPIO_Init+0x31c>)
 8000fdc:	f001 faa0 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000fe0:	233f      	movs	r3, #63	; 0x3f
 8000fe2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4872      	ldr	r0, [pc, #456]	; (80011bc <MX_GPIO_Init+0x31c>)
 8000ff4:	f001 fa94 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001008:	2308      	movs	r3, #8
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f001 fa83 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800101a:	f248 1304 	movw	r3, #33028	; 0x8104
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f001 fa73 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800103a:	2308      	movs	r3, #8
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800104a:	2301      	movs	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f001 fa62 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800105c:	2310      	movs	r3, #16
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001060:	230b      	movs	r3, #11
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f001 fa55 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001076:	23e0      	movs	r3, #224	; 0xe0
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001086:	2305      	movs	r3, #5
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f001 fa44 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001098:	2301      	movs	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800109c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4841      	ldr	r0, [pc, #260]	; (80011b4 <MX_GPIO_Init+0x314>)
 80010ae:	f001 fa37 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010b2:	2302      	movs	r3, #2
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010b6:	230b      	movs	r3, #11
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	483b      	ldr	r0, [pc, #236]	; (80011b4 <MX_GPIO_Init+0x314>)
 80010c6:	f001 fa2b 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010ca:	f24f 0334 	movw	r3, #61492	; 0xf034
 80010ce:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4834      	ldr	r0, [pc, #208]	; (80011b4 <MX_GPIO_Init+0x314>)
 80010e4:	f001 fa1c 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80010e8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80010ec:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	482e      	ldr	r0, [pc, #184]	; (80011b8 <MX_GPIO_Init+0x318>)
 8001100:	f001 fa0e 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001104:	f243 0381 	movw	r3, #12417	; 0x3081
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4826      	ldr	r0, [pc, #152]	; (80011b8 <MX_GPIO_Init+0x318>)
 800111e:	f001 f9ff 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001122:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4820      	ldr	r0, [pc, #128]	; (80011bc <MX_GPIO_Init+0x31c>)
 800113c:	f001 f9f0 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001140:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001146:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4819      	ldr	r0, [pc, #100]	; (80011bc <MX_GPIO_Init+0x31c>)
 8001158:	f001 f9e2 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116c:	2305      	movs	r3, #5
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4810      	ldr	r0, [pc, #64]	; (80011b8 <MX_GPIO_Init+0x318>)
 8001178:	f001 f9d2 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800117c:	2378      	movs	r3, #120	; 0x78
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800118c:	2307      	movs	r3, #7
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <MX_GPIO_Init+0x318>)
 8001198:	f001 f9c2 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800119c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a2:	2312      	movs	r3, #18
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e00a      	b.n	80011c0 <MX_GPIO_Init+0x320>
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48001000 	.word	0x48001000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	48000c00 	.word	0x48000c00
 80011bc:	48000800 	.word	0x48000800
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c6:	2304      	movs	r3, #4
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <MX_GPIO_Init+0x360>)
 80011d2:	f001 f9a5 	bl	8002520 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2017      	movs	r0, #23
 80011dc:	f001 f85d 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011e0:	2017      	movs	r0, #23
 80011e2:	f001 f876 	bl	80022d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2028      	movs	r0, #40	; 0x28
 80011ec:	f001 f855 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011f0:	2028      	movs	r0, #40	; 0x28
 80011f2:	f001 f86e 	bl	80022d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	48000400 	.word	0x48000400

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_MspInit+0x44>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_MspInit+0x44>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6613      	str	r3, [r2, #96]	; 0x60
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_MspInit+0x44>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_MspInit+0x44>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_MspInit+0x44>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6593      	str	r3, [r2, #88]	; 0x58
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_MspInit+0x44>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0ac      	sub	sp, #176	; 0xb0
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2288      	movs	r2, #136	; 0x88
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f005 f883 	bl	8006384 <memset>
  if(DFSDM1_Init == 0)
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d142      	bne.n	800130c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4618      	mov	r0, r3
 8001298:	f003 face 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80012a2:	f7ff ffaf 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012aa:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012b0:	6613      	str	r3, [r2, #96]	; 0x60
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80012d6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80012da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012f0:	2306      	movs	r3, #6
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <HAL_DFSDM_ChannelMspInit+0xc4>)
 80012fe:	f001 f90f 	bl	8002520 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a02      	ldr	r2, [pc, #8]	; (8001314 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800130a:	6013      	str	r3, [r2, #0]
  }

}
 800130c:	bf00      	nop
 800130e:	37b0      	adds	r7, #176	; 0xb0
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000ad0 	.word	0x20000ad0
 8001318:	40021000 	.word	0x40021000
 800131c:	48001000 	.word	0x48001000

08001320 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0ac      	sub	sp, #176	; 0xb0
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2288      	movs	r2, #136	; 0x88
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f005 f81f 	bl	8006384 <memset>
  if(hi2c->Instance==I2C2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_I2C_MspInit+0xb0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d13b      	bne.n	80013c8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001354:	2300      	movs	r3, #0
 8001356:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4618      	mov	r0, r3
 800135e:	f003 fa6b 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001368:	f7ff ff4c 	bl	8001204 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001384:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138c:	2312      	movs	r3, #18
 800138e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001392:	2301      	movs	r3, #1
 8001394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800139e:	2304      	movs	r3, #4
 80013a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a8:	4619      	mov	r1, r3
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <HAL_I2C_MspInit+0xb8>)
 80013ac:	f001 f8b8 	bl	8002520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 80013b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ba:	6593      	str	r3, [r2, #88]	; 0x58
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_I2C_MspInit+0xb4>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	37b0      	adds	r7, #176	; 0xb0
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40005800 	.word	0x40005800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000400 	.word	0x48000400

080013dc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_I2C_MspDeInit+0x3c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10f      	bne.n	800140e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_I2C_MspDeInit+0x40>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_I2C_MspDeInit+0x40>)
 80013f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013f8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80013fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fe:	4808      	ldr	r0, [pc, #32]	; (8001420 <HAL_I2C_MspDeInit+0x44>)
 8001400:	f001 fa38 	bl	8002874 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_I2C_MspDeInit+0x44>)
 800140a:	f001 fa33 	bl	8002874 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40005800 	.word	0x40005800
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400

08001424 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_QSPI_MspInit+0x7c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d128      	bne.n	8001498 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 8001448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144a:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001450:	6513      	str	r3, [r2, #80]	; 0x50
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 8001454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 8001464:	f043 0310 	orr.w	r3, r3, #16
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_QSPI_MspInit+0x80>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001476:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800147a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001488:	230a      	movs	r3, #10
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_QSPI_MspInit+0x84>)
 8001494:	f001 f844 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	a0001000 	.word	0xa0001000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48001000 	.word	0x48001000

080014ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_SPI_MspInit+0x7c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d128      	bne.n	8001520 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	4a16      	ldr	r2, [pc, #88]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d8:	6593      	str	r3, [r2, #88]	; 0x58
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_SPI_MspInit+0x80>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001510:	2306      	movs	r3, #6
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <HAL_SPI_MspInit+0x84>)
 800151c:	f001 f800 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40003c00 	.word	0x40003c00
 800152c:	40021000 	.word	0x40021000
 8001530:	48000800 	.word	0x48000800

08001534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0ae      	sub	sp, #184	; 0xb8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2288      	movs	r2, #136	; 0x88
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f004 ff15 	bl	8006384 <memset>
  if(huart->Instance==USART1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a42      	ldr	r2, [pc, #264]	; (8001668 <HAL_UART_MspInit+0x134>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d13b      	bne.n	80015dc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001568:	2300      	movs	r3, #0
 800156a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4618      	mov	r0, r3
 8001572:	f003 f961 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800157c:	f7ff fe42 	bl	8001204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001580:	4b3a      	ldr	r3, [pc, #232]	; (800166c <HAL_UART_MspInit+0x138>)
 8001582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001584:	4a39      	ldr	r2, [pc, #228]	; (800166c <HAL_UART_MspInit+0x138>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6613      	str	r3, [r2, #96]	; 0x60
 800158c:	4b37      	ldr	r3, [pc, #220]	; (800166c <HAL_UART_MspInit+0x138>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_UART_MspInit+0x138>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	4a33      	ldr	r2, [pc, #204]	; (800166c <HAL_UART_MspInit+0x138>)
 800159e:	f043 0302 	orr.w	r3, r3, #2
 80015a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_UART_MspInit+0x138>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80015b0:	23c0      	movs	r3, #192	; 0xc0
 80015b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c8:	2307      	movs	r3, #7
 80015ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4826      	ldr	r0, [pc, #152]	; (8001670 <HAL_UART_MspInit+0x13c>)
 80015d6:	f000 ffa3 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015da:	e040      	b.n	800165e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_UART_MspInit+0x140>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d13b      	bne.n	800165e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015e6:	2304      	movs	r3, #4
 80015e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 f920 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80015fe:	f7ff fe01 	bl	8001204 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_UART_MspInit+0x138>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_UART_MspInit+0x138>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6593      	str	r3, [r2, #88]	; 0x58
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_UART_MspInit+0x138>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_UART_MspInit+0x138>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a13      	ldr	r2, [pc, #76]	; (800166c <HAL_UART_MspInit+0x138>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_UART_MspInit+0x138>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001632:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800164c:	2307      	movs	r3, #7
 800164e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001652:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001656:	4619      	mov	r1, r3
 8001658:	4807      	ldr	r0, [pc, #28]	; (8001678 <HAL_UART_MspInit+0x144>)
 800165a:	f000 ff61 	bl	8002520 <HAL_GPIO_Init>
}
 800165e:	bf00      	nop
 8001660:	37b8      	adds	r7, #184	; 0xb8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40013800 	.word	0x40013800
 800166c:	40021000 	.word	0x40021000
 8001670:	48000400 	.word	0x48000400
 8001674:	40004800 	.word	0x40004800
 8001678:	48000c00 	.word	0x48000c00

0800167c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0ac      	sub	sp, #176	; 0xb0
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2288      	movs	r2, #136	; 0x88
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fe71 	bl	8006384 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016aa:	d17c      	bne.n	80017a6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016c2:	2318      	movs	r3, #24
 80016c4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016c6:	2307      	movs	r3, #7
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 f8ab 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80016e8:	f7ff fd8c 	bl	8001204 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	4a2f      	ldr	r2, [pc, #188]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f000 fefd 	bl	8002520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001726:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800172a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001740:	230a      	movs	r3, #10
 8001742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f000 fee6 	bl	8002520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 800175a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800175e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d114      	bne.n	80017a2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001782:	6593      	str	r3, [r2, #88]	; 0x58
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001790:	f002 f986 	bl	8003aa0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_PCD_MspInit+0x134>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017a0:	e001      	b.n	80017a6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80017a2:	f002 f97d 	bl	8003aa0 <HAL_PWREx_EnableVddUSB>
}
 80017a6:	bf00      	nop
 80017a8:	37b0      	adds	r7, #176	; 0xb0
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 fc2c 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800180c:	2020      	movs	r0, #32
 800180e:	f001 f93d 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001812:	2040      	movs	r0, #64	; 0x40
 8001814:	f001 f93a 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001818:	2080      	movs	r0, #128	; 0x80
 800181a:	f001 f937 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800181e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001822:	f001 f933 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}

0800182a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800182e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001832:	f001 f92b 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001836:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800183a:	f001 f927 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800183e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001842:	f001 f923 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001846:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800184a:	f001 f91f 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800184e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001852:	f001 f91b 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f004 fd42 	bl	8006314 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20018000 	.word	0x20018000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	20000ad4 	.word	0x20000ad4
 80018c4:	20000b70 	.word	0x20000b70

080018c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001924 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f0:	f7ff ffea 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <LoopForever+0x6>)
  ldr r1, =_edata
 80018f6:	490d      	ldr	r1, [pc, #52]	; (800192c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <LoopForever+0xe>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800190c:	4c0a      	ldr	r4, [pc, #40]	; (8001938 <LoopForever+0x16>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191a:	f004 fd01 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800191e:	f7ff f80d 	bl	800093c <main>

08001922 <LoopForever>:

LoopForever:
    b LoopForever
 8001922:	e7fe      	b.n	8001922 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001924:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 8001930:	08006db4 	.word	0x08006db4
  ldr r2, =_sbss
 8001934:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8001938:	20000b6c 	.word	0x20000b6c

0800193c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC1_2_IRQHandler>
	...

08001940 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <I2Cx_MspInit+0xa8>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194c:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <I2Cx_MspInit+0xa8>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <I2Cx_MspInit+0xa8>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001960:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001964:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001966:	2312      	movs	r3, #18
 8001968:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800196a:	2301      	movs	r3, #1
 800196c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001972:	2304      	movs	r3, #4
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	481b      	ldr	r0, [pc, #108]	; (80019ec <I2Cx_MspInit+0xac>)
 800197e:	f000 fdcf 	bl	8002520 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4818      	ldr	r0, [pc, #96]	; (80019ec <I2Cx_MspInit+0xac>)
 800198a:	f000 fdc9 	bl	8002520 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <I2Cx_MspInit+0xa8>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <I2Cx_MspInit+0xa8>)
 8001994:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <I2Cx_MspInit+0xa8>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <I2Cx_MspInit+0xa8>)
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <I2Cx_MspInit+0xa8>)
 80019ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019b0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <I2Cx_MspInit+0xa8>)
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <I2Cx_MspInit+0xa8>)
 80019b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019bc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	210f      	movs	r1, #15
 80019c2:	2021      	movs	r0, #33	; 0x21
 80019c4:	f000 fc69 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80019c8:	2021      	movs	r0, #33	; 0x21
 80019ca:	f000 fc82 	bl	80022d2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	210f      	movs	r1, #15
 80019d2:	2022      	movs	r0, #34	; 0x22
 80019d4:	f000 fc61 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80019d8:	2022      	movs	r0, #34	; 0x22
 80019da:	f000 fc7a 	bl	80022d2 <HAL_NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000400 	.word	0x48000400

080019f0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <I2Cx_Init+0x54>)
 80019fc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <I2Cx_Init+0x58>)
 8001a02:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff89 	bl	8001940 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f001 f84f 	bl	8002ad2 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001a34:	2100      	movs	r1, #0
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f001 fdde 	bl	80035f8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40005800 	.word	0x40005800
 8001a48:	00702681 	.word	0x00702681

08001a4c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af04      	add	r7, sp, #16
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	4608      	mov	r0, r1
 8001a56:	4611      	mov	r1, r2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	72fb      	strb	r3, [r7, #11]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	813b      	strh	r3, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a6a:	7afb      	ldrb	r3, [r7, #11]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	88f8      	ldrh	r0, [r7, #6]
 8001a70:	893a      	ldrh	r2, [r7, #8]
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	4603      	mov	r3, r0
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f001 f9f8 	bl	8002e78 <HAL_I2C_Mem_Read>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001a92:	7afb      	ldrb	r3, [r7, #11]
 8001a94:	4619      	mov	r1, r3
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f832 	bl	8001b00 <I2Cx_Error>
  }
  return status;
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b08a      	sub	sp, #40	; 0x28
 8001aaa:	af04      	add	r7, sp, #16
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	4608      	mov	r0, r1
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	72fb      	strb	r3, [r7, #11]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	813b      	strh	r3, [r7, #8]
 8001abc:	4613      	mov	r3, r2
 8001abe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ac4:	7afb      	ldrb	r3, [r7, #11]
 8001ac6:	b299      	uxth	r1, r3
 8001ac8:	88f8      	ldrh	r0, [r7, #6]
 8001aca:	893a      	ldrh	r2, [r7, #8]
 8001acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	4603      	mov	r3, r0
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f001 f8b7 	bl	8002c50 <HAL_I2C_Mem_Write>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001aec:	7afb      	ldrb	r3, [r7, #11]
 8001aee:	4619      	mov	r1, r3
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f805 	bl	8001b00 <I2Cx_Error>
  }
  return status;
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f001 f86f 	bl	8002bf0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ff6c 	bl	80019f0 <I2Cx_Init>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <SENSOR_IO_Init+0x10>)
 8001b26:	f7ff ff63 	bl	80019f0 <I2Cx_Init>
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000ad8 	.word	0x20000ad8

08001b34 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	71bb      	strb	r3, [r7, #6]
 8001b42:	4613      	mov	r3, r2
 8001b44:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	79f9      	ldrb	r1, [r7, #7]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	1d7b      	adds	r3, r7, #5
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2301      	movs	r3, #1
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <SENSOR_IO_Write+0x30>)
 8001b58:	f7ff ffa5 	bl	8001aa6 <I2Cx_WriteMultiple>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000ad8 	.word	0x20000ad8

08001b68 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001b7c:	79bb      	ldrb	r3, [r7, #6]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	79f9      	ldrb	r1, [r7, #7]
 8001b82:	2301      	movs	r3, #1
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	f107 030f 	add.w	r3, r7, #15
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <SENSOR_IO_Read+0x38>)
 8001b90:	f7ff ff5c 	bl	8001a4c <I2Cx_ReadMultiple>

  return read_value;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000ad8 	.word	0x20000ad8

08001ba4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	603a      	str	r2, [r7, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	71bb      	strb	r3, [r7, #6]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001bba:	79bb      	ldrb	r3, [r7, #6]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	79f9      	ldrb	r1, [r7, #7]
 8001bc0:	88bb      	ldrh	r3, [r7, #4]
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	4804      	ldr	r0, [pc, #16]	; (8001bdc <SENSOR_IO_ReadMultiple+0x38>)
 8001bcc:	f7ff ff3e 	bl	8001a4c <I2Cx_ReadMultiple>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	b29b      	uxth	r3, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000ad8 	.word	0x20000ad8

08001be0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <BSP_HSENSOR_Init+0x38>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	20be      	movs	r0, #190	; 0xbe
 8001bec:	4798      	blx	r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2bbc      	cmp	r3, #188	; 0xbc
 8001bf2:	d002      	beq.n	8001bfa <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	e009      	b.n	8001c0e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <BSP_HSENSOR_Init+0x3c>)
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <BSP_HSENSOR_Init+0x38>)
 8001bfe:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <BSP_HSENSOR_Init+0x3c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	20be      	movs	r0, #190	; 0xbe
 8001c08:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001c0e:	687b      	ldr	r3, [r7, #4]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000278 	.word	0x20000278
 8001c1c:	20000b2c 	.word	0x20000b2c

08001c20 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	20be      	movs	r0, #190	; 0xbe
 8001c2c:	4798      	blx	r3
 8001c2e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c32:	eeb0 0a67 	vmov.f32	s0, s15
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000b2c 	.word	0x20000b2c

08001c3c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <BSP_TSENSOR_Init+0x30>)
 8001c48:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <BSP_TSENSOR_Init+0x34>)
 8001c4a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001c4c:	f7ff ff68 	bl	8001b20 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <BSP_TSENSOR_Init+0x30>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2100      	movs	r1, #0
 8001c58:	20be      	movs	r0, #190	; 0xbe
 8001c5a:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001c60:	79fb      	ldrb	r3, [r7, #7]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000b30 	.word	0x20000b30
 8001c70:	20000284 	.word	0x20000284

08001c74 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <BSP_TSENSOR_ReadTemp+0x18>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	20be      	movs	r0, #190	; 0xbe
 8001c80:	4798      	blx	r3
 8001c82:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c86:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000b30 	.word	0x20000b30

08001c90 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2120      	movs	r1, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff61 	bl	8001b68 <SENSOR_IO_Read>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	f023 0303 	bic.w	r3, r3, #3
 8001cc0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cd0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	2120      	movs	r1, #32
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff2a 	bl	8001b34 <SENSOR_IO_Write>
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001cf6:	f7ff ff13 	bl	8001b20 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	210f      	movs	r1, #15
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff31 	bl	8001b68 <SENSOR_IO_Read>
 8001d06:	4603      	mov	r3, r0
 8001d08:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	b2d8      	uxtb	r0, r3
 8001d22:	f107 020c 	add.w	r2, r7, #12
 8001d26:	2302      	movs	r3, #2
 8001d28:	21b0      	movs	r1, #176	; 0xb0
 8001d2a:	f7ff ff3b 	bl	8001ba4 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001d2e:	7b3b      	ldrb	r3, [r7, #12]
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001d36:	7b7b      	ldrb	r3, [r7, #13]
 8001d38:	085b      	lsrs	r3, r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	b2d8      	uxtb	r0, r3
 8001d42:	f107 020c 	add.w	r2, r7, #12
 8001d46:	2302      	movs	r3, #2
 8001d48:	21b6      	movs	r1, #182	; 0xb6
 8001d4a:	f7ff ff2b 	bl	8001ba4 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001d4e:	7b7b      	ldrb	r3, [r7, #13]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	7b3b      	ldrb	r3, [r7, #12]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	b2d8      	uxtb	r0, r3
 8001d60:	f107 020c 	add.w	r2, r7, #12
 8001d64:	2302      	movs	r3, #2
 8001d66:	21ba      	movs	r1, #186	; 0xba
 8001d68:	f7ff ff1c 	bl	8001ba4 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	7b3b      	ldrb	r3, [r7, #12]
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	b2d8      	uxtb	r0, r3
 8001d7e:	f107 020c 	add.w	r2, r7, #12
 8001d82:	2302      	movs	r3, #2
 8001d84:	21a8      	movs	r1, #168	; 0xa8
 8001d86:	f7ff ff0d 	bl	8001ba4 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001d8a:	7b7b      	ldrb	r3, [r7, #13]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	7b3b      	ldrb	r3, [r7, #12]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001d98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001daa:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001dae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dc0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001dc4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dd6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001df2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001dfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dfe:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001e44 <HTS221_H_ReadHumidity+0x130>
 8001e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	dd01      	ble.n	8001e10 <HTS221_H_ReadHumidity+0xfc>
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HTS221_H_ReadHumidity+0x134>)
 8001e0e:	e00a      	b.n	8001e26 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001e10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	d502      	bpl.n	8001e24 <HTS221_H_ReadHumidity+0x110>
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e000      	b.n	8001e26 <HTS221_H_ReadHumidity+0x112>
 8001e24:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001e26:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001e28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e34:	eef0 7a66 	vmov.f32	s15, s13
}
 8001e38:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	447a0000 	.word	0x447a0000
 8001e48:	447a0000 	.word	0x447a0000

08001e4c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fe82 	bl	8001b68 <SENSOR_IO_Read>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	f023 0304 	bic.w	r3, r3, #4
 8001e6e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	2120      	movs	r1, #32
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fe4b 	bl	8001b34 <SENSOR_IO_Write>
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b088      	sub	sp, #32
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	b2d8      	uxtb	r0, r3
 8001eb4:	f107 0208 	add.w	r2, r7, #8
 8001eb8:	2302      	movs	r3, #2
 8001eba:	21b2      	movs	r1, #178	; 0xb2
 8001ebc:	f7ff fe72 	bl	8001ba4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2135      	movs	r1, #53	; 0x35
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fe4e 	bl	8001b68 <SENSOR_IO_Read>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001ed0:	7ffb      	ldrb	r3, [r7, #31]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	7a3b      	ldrb	r3, [r7, #8]
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001ee4:	7ffb      	ldrb	r3, [r7, #31]
 8001ee6:	019b      	lsls	r3, r3, #6
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	7a7b      	ldrb	r3, [r7, #9]
 8001ef2:	b21b      	sxth	r3, r3
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001ef8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001efc:	10db      	asrs	r3, r3, #3
 8001efe:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001f00:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f04:	10db      	asrs	r3, r3, #3
 8001f06:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	b2d8      	uxtb	r0, r3
 8001f0c:	f107 0208 	add.w	r2, r7, #8
 8001f10:	2304      	movs	r3, #4
 8001f12:	21bc      	movs	r1, #188	; 0xbc
 8001f14:	f7ff fe46 	bl	8001ba4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f18:	7a7b      	ldrb	r3, [r7, #9]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	7a3b      	ldrb	r3, [r7, #8]
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	7abb      	ldrb	r3, [r7, #10]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	b2d8      	uxtb	r0, r3
 8001f38:	f107 0208 	add.w	r2, r7, #8
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	21aa      	movs	r1, #170	; 0xaa
 8001f40:	f7ff fe30 	bl	8001ba4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f44:	7a7b      	ldrb	r3, [r7, #9]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	7a3b      	ldrb	r3, [r7, #8]
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001f52:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001f56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f68:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f76:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f90:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	ee07 3a90 	vmov	s15, r3
}
 8001faa:	eeb0 0a67 	vmov.f32	s0, s15
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f000 f960 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f000 f80d 	bl	8001fe4 <HAL_InitTick>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	71fb      	strb	r3, [r7, #7]
 8001fd4:	e001      	b.n	8001fda <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd6:	f7ff f91b 	bl	8001210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fda:	79fb      	ldrb	r3, [r7, #7]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_InitTick+0x6c>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d023      	beq.n	8002040 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_InitTick+0x70>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_InitTick+0x6c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f96d 	bl	80022ee <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10f      	bne.n	800203a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d809      	bhi.n	8002034 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 f937 	bl	800229a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_InitTick+0x74>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e007      	b.n	8002044 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e004      	b.n	8002044 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
 800203e:	e001      	b.n	8002044 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000298 	.word	0x20000298
 8002054:	20000274 	.word	0x20000274
 8002058:	20000294 	.word	0x20000294

0800205c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000298 	.word	0x20000298
 8002080:	20000b34 	.word	0x20000b34

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000b34 	.word	0x20000b34

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_Delay+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffde 	bl	8002084 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000298 	.word	0x20000298

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db0b      	blt.n	8002172 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <__NVIC_EnableIRQ+0x38>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2001      	movs	r0, #1
 800216a:	fa00 f202 	lsl.w	r2, r0, r2
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000e100 	.word	0xe000e100

08002184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	2b00      	cmp	r3, #0
 8002196:	db0a      	blt.n	80021ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	490c      	ldr	r1, [pc, #48]	; (80021d0 <__NVIC_SetPriority+0x4c>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ac:	e00a      	b.n	80021c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4908      	ldr	r1, [pc, #32]	; (80021d4 <__NVIC_SetPriority+0x50>)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3b04      	subs	r3, #4
 80021bc:	0112      	lsls	r2, r2, #4
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	761a      	strb	r2, [r3, #24]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000e100 	.word	0xe000e100
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f1c3 0307 	rsb	r3, r3, #7
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	bf28      	it	cs
 80021f6:	2304      	movcs	r3, #4
 80021f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d902      	bls.n	8002208 <NVIC_EncodePriority+0x30>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3b03      	subs	r3, #3
 8002206:	e000      	b.n	800220a <NVIC_EncodePriority+0x32>
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	f04f 32ff 	mov.w	r2, #4294967295
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	43d9      	mvns	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	4313      	orrs	r3, r2
         );
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f7ff ff8e 	bl	8002184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff29 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff3e 	bl	800212c <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff8e 	bl	80021d8 <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5d 	bl	8002184 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff31 	bl	8002148 <__NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa2 	bl	8002240 <SysTick_Config>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0ac      	b.n	8002474 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f8b2 	bl	8002488 <DFSDM_GetChannelFromInstance>
 8002324:	4603      	mov	r3, r0
 8002326:	4a55      	ldr	r2, [pc, #340]	; (800247c <HAL_DFSDM_ChannelInit+0x174>)
 8002328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e09f      	b.n	8002474 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7fe ff8f 	bl	8001258 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800233a:	4b51      	ldr	r3, [pc, #324]	; (8002480 <HAL_DFSDM_ChannelInit+0x178>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	4a4f      	ldr	r2, [pc, #316]	; (8002480 <HAL_DFSDM_ChannelInit+0x178>)
 8002342:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002344:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <HAL_DFSDM_ChannelInit+0x178>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d125      	bne.n	8002398 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800234c:	4b4d      	ldr	r3, [pc, #308]	; (8002484 <HAL_DFSDM_ChannelInit+0x17c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <HAL_DFSDM_ChannelInit+0x17c>)
 8002352:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002356:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_DFSDM_ChannelInit+0x17c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4948      	ldr	r1, [pc, #288]	; (8002484 <HAL_DFSDM_ChannelInit+0x17c>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_DFSDM_ChannelInit+0x17c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a46      	ldr	r2, [pc, #280]	; (8002484 <HAL_DFSDM_ChannelInit+0x17c>)
 800236c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002370:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	791b      	ldrb	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d108      	bne.n	800238c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800237a:	4b42      	ldr	r3, [pc, #264]	; (8002484 <HAL_DFSDM_ChannelInit+0x17c>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	3b01      	subs	r3, #1
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	493f      	ldr	r1, [pc, #252]	; (8002484 <HAL_DFSDM_ChannelInit+0x17c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800238c:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_DFSDM_ChannelInit+0x17c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3c      	ldr	r2, [pc, #240]	; (8002484 <HAL_DFSDM_ChannelInit+0x17c>)
 8002392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002396:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80023a6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80023b6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80023bc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 020f 	bic.w	r2, r2, #15
 80023d4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80023fc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f002 0207 	and.w	r2, r2, #7
 8002428:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002454:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f810 	bl	8002488 <DFSDM_GetChannelFromInstance>
 8002468:	4602      	mov	r2, r0
 800246a:	4904      	ldr	r1, [pc, #16]	; (800247c <HAL_DFSDM_ChannelInit+0x174>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000b3c 	.word	0x20000b3c
 8002480:	20000b38 	.word	0x20000b38
 8002484:	40016000 	.word	0x40016000

08002488 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <DFSDM_GetChannelFromInstance+0x7c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d102      	bne.n	800249e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e02b      	b.n	80024f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <DFSDM_GetChannelFromInstance+0x80>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d102      	bne.n	80024ac <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e024      	b.n	80024f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a17      	ldr	r2, [pc, #92]	; (800250c <DFSDM_GetChannelFromInstance+0x84>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d102      	bne.n	80024ba <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80024b4:	2302      	movs	r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e01d      	b.n	80024f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <DFSDM_GetChannelFromInstance+0x88>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d102      	bne.n	80024c8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80024c2:	2304      	movs	r3, #4
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e016      	b.n	80024f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <DFSDM_GetChannelFromInstance+0x8c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d102      	bne.n	80024d6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80024d0:	2305      	movs	r3, #5
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e00f      	b.n	80024f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <DFSDM_GetChannelFromInstance+0x90>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d102      	bne.n	80024e4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80024de:	2306      	movs	r3, #6
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e008      	b.n	80024f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a0d      	ldr	r2, [pc, #52]	; (800251c <DFSDM_GetChannelFromInstance+0x94>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d102      	bne.n	80024f2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80024ec:	2307      	movs	r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e001      	b.n	80024f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80024f2:	2303      	movs	r3, #3
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40016000 	.word	0x40016000
 8002508:	40016020 	.word	0x40016020
 800250c:	40016040 	.word	0x40016040
 8002510:	40016080 	.word	0x40016080
 8002514:	400160a0 	.word	0x400160a0
 8002518:	400160c0 	.word	0x400160c0
 800251c:	400160e0 	.word	0x400160e0

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252e:	e17f      	b.n	8002830 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	4013      	ands	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8171 	beq.w	800282a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d005      	beq.n	8002560 <HAL_GPIO_Init+0x40>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d130      	bne.n	80025c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002596:	2201      	movs	r2, #1
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 0201 	and.w	r2, r3, #1
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d118      	bne.n	8002600 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025d4:	2201      	movs	r2, #1
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	f003 0201 	and.w	r2, r3, #1
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b03      	cmp	r3, #3
 800260a:	d017      	beq.n	800263c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d123      	bne.n	8002690 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3208      	adds	r2, #8
 8002650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	08da      	lsrs	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3208      	adds	r2, #8
 800268a:	6939      	ldr	r1, [r7, #16]
 800268c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80ac 	beq.w	800282a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <HAL_GPIO_Init+0x330>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	4a5e      	ldr	r2, [pc, #376]	; (8002850 <HAL_GPIO_Init+0x330>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6613      	str	r3, [r2, #96]	; 0x60
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <HAL_GPIO_Init+0x330>)
 80026e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026ea:	4a5a      	ldr	r2, [pc, #360]	; (8002854 <HAL_GPIO_Init+0x334>)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	3302      	adds	r3, #2
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	220f      	movs	r2, #15
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002714:	d025      	beq.n	8002762 <HAL_GPIO_Init+0x242>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4f      	ldr	r2, [pc, #316]	; (8002858 <HAL_GPIO_Init+0x338>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01f      	beq.n	800275e <HAL_GPIO_Init+0x23e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4e      	ldr	r2, [pc, #312]	; (800285c <HAL_GPIO_Init+0x33c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x23a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4d      	ldr	r2, [pc, #308]	; (8002860 <HAL_GPIO_Init+0x340>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x236>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4c      	ldr	r2, [pc, #304]	; (8002864 <HAL_GPIO_Init+0x344>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x232>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4b      	ldr	r2, [pc, #300]	; (8002868 <HAL_GPIO_Init+0x348>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x22e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4a      	ldr	r2, [pc, #296]	; (800286c <HAL_GPIO_Init+0x34c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x22a>
 8002746:	2306      	movs	r3, #6
 8002748:	e00c      	b.n	8002764 <HAL_GPIO_Init+0x244>
 800274a:	2307      	movs	r3, #7
 800274c:	e00a      	b.n	8002764 <HAL_GPIO_Init+0x244>
 800274e:	2305      	movs	r3, #5
 8002750:	e008      	b.n	8002764 <HAL_GPIO_Init+0x244>
 8002752:	2304      	movs	r3, #4
 8002754:	e006      	b.n	8002764 <HAL_GPIO_Init+0x244>
 8002756:	2303      	movs	r3, #3
 8002758:	e004      	b.n	8002764 <HAL_GPIO_Init+0x244>
 800275a:	2302      	movs	r3, #2
 800275c:	e002      	b.n	8002764 <HAL_GPIO_Init+0x244>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_GPIO_Init+0x244>
 8002762:	2300      	movs	r3, #0
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	f002 0203 	and.w	r2, r2, #3
 800276a:	0092      	lsls	r2, r2, #2
 800276c:	4093      	lsls	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002774:	4937      	ldr	r1, [pc, #220]	; (8002854 <HAL_GPIO_Init+0x334>)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002782:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <HAL_GPIO_Init+0x350>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027a6:	4a32      	ldr	r2, [pc, #200]	; (8002870 <HAL_GPIO_Init+0x350>)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ac:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_GPIO_Init+0x350>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027d0:	4a27      	ldr	r2, [pc, #156]	; (8002870 <HAL_GPIO_Init+0x350>)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_GPIO_Init+0x350>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_GPIO_Init+0x350>)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_GPIO_Init+0x350>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <HAL_GPIO_Init+0x350>)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3301      	adds	r3, #1
 800282e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	f47f ae78 	bne.w	8002530 <HAL_GPIO_Init+0x10>
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000
 8002858:	48000400 	.word	0x48000400
 800285c:	48000800 	.word	0x48000800
 8002860:	48000c00 	.word	0x48000c00
 8002864:	48001000 	.word	0x48001000
 8002868:	48001400 	.word	0x48001400
 800286c:	48001800 	.word	0x48001800
 8002870:	40010400 	.word	0x40010400

08002874 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002882:	e0cd      	b.n	8002a20 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002884:	2201      	movs	r2, #1
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80c0 	beq.w	8002a1a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800289a:	4a68      	ldr	r2, [pc, #416]	; (8002a3c <HAL_GPIO_DeInit+0x1c8>)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3302      	adds	r3, #2
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4013      	ands	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028c2:	d025      	beq.n	8002910 <HAL_GPIO_DeInit+0x9c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a5e      	ldr	r2, [pc, #376]	; (8002a40 <HAL_GPIO_DeInit+0x1cc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d01f      	beq.n	800290c <HAL_GPIO_DeInit+0x98>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a5d      	ldr	r2, [pc, #372]	; (8002a44 <HAL_GPIO_DeInit+0x1d0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d019      	beq.n	8002908 <HAL_GPIO_DeInit+0x94>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a5c      	ldr	r2, [pc, #368]	; (8002a48 <HAL_GPIO_DeInit+0x1d4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <HAL_GPIO_DeInit+0x90>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a5b      	ldr	r2, [pc, #364]	; (8002a4c <HAL_GPIO_DeInit+0x1d8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00d      	beq.n	8002900 <HAL_GPIO_DeInit+0x8c>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a5a      	ldr	r2, [pc, #360]	; (8002a50 <HAL_GPIO_DeInit+0x1dc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <HAL_GPIO_DeInit+0x88>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a59      	ldr	r2, [pc, #356]	; (8002a54 <HAL_GPIO_DeInit+0x1e0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_GPIO_DeInit+0x84>
 80028f4:	2306      	movs	r3, #6
 80028f6:	e00c      	b.n	8002912 <HAL_GPIO_DeInit+0x9e>
 80028f8:	2307      	movs	r3, #7
 80028fa:	e00a      	b.n	8002912 <HAL_GPIO_DeInit+0x9e>
 80028fc:	2305      	movs	r3, #5
 80028fe:	e008      	b.n	8002912 <HAL_GPIO_DeInit+0x9e>
 8002900:	2304      	movs	r3, #4
 8002902:	e006      	b.n	8002912 <HAL_GPIO_DeInit+0x9e>
 8002904:	2303      	movs	r3, #3
 8002906:	e004      	b.n	8002912 <HAL_GPIO_DeInit+0x9e>
 8002908:	2302      	movs	r3, #2
 800290a:	e002      	b.n	8002912 <HAL_GPIO_DeInit+0x9e>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_GPIO_DeInit+0x9e>
 8002910:	2300      	movs	r3, #0
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	f002 0203 	and.w	r2, r2, #3
 8002918:	0092      	lsls	r2, r2, #2
 800291a:	4093      	lsls	r3, r2
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	429a      	cmp	r2, r3
 8002920:	d132      	bne.n	8002988 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002922:	4b4d      	ldr	r3, [pc, #308]	; (8002a58 <HAL_GPIO_DeInit+0x1e4>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	43db      	mvns	r3, r3
 800292a:	494b      	ldr	r1, [pc, #300]	; (8002a58 <HAL_GPIO_DeInit+0x1e4>)
 800292c:	4013      	ands	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002930:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <HAL_GPIO_DeInit+0x1e4>)
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	4947      	ldr	r1, [pc, #284]	; (8002a58 <HAL_GPIO_DeInit+0x1e4>)
 800293a:	4013      	ands	r3, r2
 800293c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_GPIO_DeInit+0x1e4>)
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	4944      	ldr	r1, [pc, #272]	; (8002a58 <HAL_GPIO_DeInit+0x1e4>)
 8002948:	4013      	ands	r3, r2
 800294a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800294c:	4b42      	ldr	r3, [pc, #264]	; (8002a58 <HAL_GPIO_DeInit+0x1e4>)
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	43db      	mvns	r3, r3
 8002954:	4940      	ldr	r1, [pc, #256]	; (8002a58 <HAL_GPIO_DeInit+0x1e4>)
 8002956:	4013      	ands	r3, r2
 8002958:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	220f      	movs	r2, #15
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800296a:	4a34      	ldr	r2, [pc, #208]	; (8002a3c <HAL_GPIO_DeInit+0x1c8>)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43da      	mvns	r2, r3
 800297a:	4830      	ldr	r0, [pc, #192]	; (8002a3c <HAL_GPIO_DeInit+0x1c8>)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	400a      	ands	r2, r1
 8002982:	3302      	adds	r3, #2
 8002984:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2103      	movs	r1, #3
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	08da      	lsrs	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3208      	adds	r2, #8
 80029a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	08d2      	lsrs	r2, r2, #3
 80029bc:	4019      	ands	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2103      	movs	r1, #3
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	401a      	ands	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	2101      	movs	r1, #1
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	401a      	ands	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2103      	movs	r1, #3
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	401a      	ands	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f47f af2b 	bne.w	8002884 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a2e:	bf00      	nop
 8002a30:	bf00      	nop
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	48000400 	.word	0x48000400
 8002a44:	48000800 	.word	0x48000800
 8002a48:	48000c00 	.word	0x48000c00
 8002a4c:	48001000 	.word	0x48001000
 8002a50:	48001400 	.word	0x48001400
 8002a54:	48001800 	.word	0x48001800
 8002a58:	40010400 	.word	0x40010400

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a78:	e002      	b.n	8002a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa2:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f806 	bl	8002abc <HAL_GPIO_EXTI_Callback>
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40010400 	.word	0x40010400

08002abc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e081      	b.n	8002be8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7fe fc11 	bl	8001320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2224      	movs	r2, #36	; 0x24
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d107      	bne.n	8002b4c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	e006      	b.n	8002b5a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d104      	bne.n	8002b6c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69d9      	ldr	r1, [r3, #28]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1a      	ldr	r2, [r3, #32]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e021      	b.n	8002c46 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2224      	movs	r2, #36	; 0x24
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fbde 	bl	80013dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	460b      	mov	r3, r1
 8002c64:	813b      	strh	r3, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	f040 80f9 	bne.w	8002e6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x34>
 8002c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0ed      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_I2C_Mem_Write+0x4e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0e6      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ca6:	f7ff f9ed 	bl	8002084 <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2319      	movs	r3, #25
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fac3 	bl	8003244 <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d1      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2221      	movs	r2, #33	; 0x21
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf0:	88f8      	ldrh	r0, [r7, #6]
 8002cf2:	893a      	ldrh	r2, [r7, #8]
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	4603      	mov	r3, r0
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f9d3 	bl	80030ac <I2C_RequestMemoryWrite>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0a9      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2bff      	cmp	r3, #255	; 0xff
 8002d20:	d90e      	bls.n	8002d40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	8979      	ldrh	r1, [r7, #10]
 8002d30:	2300      	movs	r3, #0
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fc2b 	bl	8003594 <I2C_TransferConfig>
 8002d3e:	e00f      	b.n	8002d60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	8979      	ldrh	r1, [r7, #10]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fc1a 	bl	8003594 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 faad 	bl	80032c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e07b      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d034      	beq.n	8002e18 <HAL_I2C_Mem_Write+0x1c8>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d130      	bne.n	8002e18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2180      	movs	r1, #128	; 0x80
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fa3f 	bl	8003244 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e04d      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2bff      	cmp	r3, #255	; 0xff
 8002dd8:	d90e      	bls.n	8002df8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	22ff      	movs	r2, #255	; 0xff
 8002dde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	8979      	ldrh	r1, [r7, #10]
 8002de8:	2300      	movs	r3, #0
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fbcf 	bl	8003594 <I2C_TransferConfig>
 8002df6:	e00f      	b.n	8002e18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	8979      	ldrh	r1, [r7, #10]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fbbe 	bl	8003594 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d19e      	bne.n	8002d60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fa8c 	bl	8003344 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e01a      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_I2C_Mem_Write+0x224>)
 8002e4a:	400b      	ands	r3, r1
 8002e4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
  }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	fe00e800 	.word	0xfe00e800

08002e78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	813b      	strh	r3, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	f040 80fd 	bne.w	800309a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_I2C_Mem_Read+0x34>
 8002ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0f1      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_I2C_Mem_Read+0x4e>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0ea      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ece:	f7ff f8d9 	bl	8002084 <HAL_GetTick>
 8002ed2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2319      	movs	r3, #25
 8002eda:	2201      	movs	r2, #1
 8002edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f9af 	bl	8003244 <I2C_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0d5      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2222      	movs	r2, #34	; 0x22
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2240      	movs	r2, #64	; 0x40
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a3a      	ldr	r2, [r7, #32]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f18:	88f8      	ldrh	r0, [r7, #6]
 8002f1a:	893a      	ldrh	r2, [r7, #8]
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	4603      	mov	r3, r0
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f913 	bl	8003154 <I2C_RequestMemoryRead>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0ad      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2bff      	cmp	r3, #255	; 0xff
 8002f48:	d90e      	bls.n	8002f68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	22ff      	movs	r2, #255	; 0xff
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	8979      	ldrh	r1, [r7, #10]
 8002f58:	4b52      	ldr	r3, [pc, #328]	; (80030a4 <HAL_I2C_Mem_Read+0x22c>)
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fb17 	bl	8003594 <I2C_TransferConfig>
 8002f66:	e00f      	b.n	8002f88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_I2C_Mem_Read+0x22c>)
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fb06 	bl	8003594 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2104      	movs	r1, #4
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f956 	bl	8003244 <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07c      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d034      	beq.n	8003048 <HAL_I2C_Mem_Read+0x1d0>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d130      	bne.n	8003048 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	2200      	movs	r2, #0
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f927 	bl	8003244 <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e04d      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	2bff      	cmp	r3, #255	; 0xff
 8003008:	d90e      	bls.n	8003028 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	b2da      	uxtb	r2, r3
 8003016:	8979      	ldrh	r1, [r7, #10]
 8003018:	2300      	movs	r3, #0
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fab7 	bl	8003594 <I2C_TransferConfig>
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	b2da      	uxtb	r2, r3
 8003038:	8979      	ldrh	r1, [r7, #10]
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 faa6 	bl	8003594 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d19a      	bne.n	8002f88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f974 	bl	8003344 <I2C_WaitOnSTOPFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e01a      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2220      	movs	r2, #32
 800306c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_I2C_Mem_Read+0x230>)
 800307a:	400b      	ands	r3, r1
 800307c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	80002400 	.word	0x80002400
 80030a8:	fe00e800 	.word	0xfe00e800

080030ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	4b20      	ldr	r3, [pc, #128]	; (8003150 <I2C_RequestMemoryWrite+0xa4>)
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fa5d 	bl	8003594 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	69b9      	ldr	r1, [r7, #24]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f8f0 	bl	80032c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e02c      	b.n	8003148 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f4:	893b      	ldrh	r3, [r7, #8]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
 80030fe:	e015      	b.n	800312c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003100:	893b      	ldrh	r3, [r7, #8]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	b29b      	uxth	r3, r3
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	69b9      	ldr	r1, [r7, #24]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f8d6 	bl	80032c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e012      	b.n	8003148 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003122:	893b      	ldrh	r3, [r7, #8]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2200      	movs	r2, #0
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f884 	bl	8003244 <I2C_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	80002000 	.word	0x80002000

08003154 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	460b      	mov	r3, r1
 8003168:	813b      	strh	r3, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	8979      	ldrh	r1, [r7, #10]
 8003174:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <I2C_RequestMemoryRead+0xa4>)
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2300      	movs	r3, #0
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fa0a 	bl	8003594 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	69b9      	ldr	r1, [r7, #24]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f89d 	bl	80032c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e02c      	b.n	80031ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800319a:	893b      	ldrh	r3, [r7, #8]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
 80031a4:	e015      	b.n	80031d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031a6:	893b      	ldrh	r3, [r7, #8]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	69b9      	ldr	r1, [r7, #24]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f883 	bl	80032c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e012      	b.n	80031ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031c8:	893b      	ldrh	r3, [r7, #8]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2200      	movs	r2, #0
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f831 	bl	8003244 <I2C_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	80002000 	.word	0x80002000

080031fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b02      	cmp	r3, #2
 8003210:	d103      	bne.n	800321a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d007      	beq.n	8003238 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	619a      	str	r2, [r3, #24]
  }
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003254:	e022      	b.n	800329c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d01e      	beq.n	800329c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325e:	f7fe ff11 	bl	8002084 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d302      	bcc.n	8003274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d113      	bne.n	800329c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e00f      	b.n	80032bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4013      	ands	r3, r2
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d0cd      	beq.n	8003256 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032d0:	e02c      	b.n	800332c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f870 	bl	80033bc <I2C_IsErrorOccurred>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e02a      	b.n	800333c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d01e      	beq.n	800332c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fe fec9 	bl	8002084 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d113      	bne.n	800332c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e007      	b.n	800333c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d1cb      	bne.n	80032d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003350:	e028      	b.n	80033a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f830 	bl	80033bc <I2C_IsErrorOccurred>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e026      	b.n	80033b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fe8d 	bl	8002084 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d113      	bne.n	80033a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e007      	b.n	80033b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d1cf      	bne.n	8003352 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d075      	beq.n	80034d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2210      	movs	r2, #16
 80033ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033f0:	e056      	b.n	80034a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d052      	beq.n	80034a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7fe fe43 	bl	8002084 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_IsErrorOccurred+0x54>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d147      	bne.n	80034a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003422:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003432:	d12e      	bne.n	8003492 <I2C_IsErrorOccurred+0xd6>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800343a:	d02a      	beq.n	8003492 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	2b20      	cmp	r3, #32
 8003440:	d027      	beq.n	8003492 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003450:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003452:	f7fe fe17 	bl	8002084 <HAL_GetTick>
 8003456:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003458:	e01b      	b.n	8003492 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800345a:	f7fe fe13 	bl	8002084 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b19      	cmp	r3, #25
 8003466:	d914      	bls.n	8003492 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b20      	cmp	r3, #32
 800349e:	d1dc      	bne.n	800345a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d003      	beq.n	80034b6 <I2C_IsErrorOccurred+0xfa>
 80034ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d09d      	beq.n	80033f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2220      	movs	r2, #32
 80034c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f043 0308 	orr.w	r3, r3, #8
 800350e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01c      	beq.n	8003584 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff fe56 	bl	80031fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <I2C_IsErrorOccurred+0x1d4>)
 800355c:	400b      	ands	r3, r1
 800355e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	431a      	orrs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003588:	4618      	mov	r0, r3
 800358a:	3728      	adds	r7, #40	; 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	fe00e800 	.word	0xfe00e800

08003594 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	4613      	mov	r3, r2
 80035a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035ac:	7a7b      	ldrb	r3, [r7, #9]
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	4313      	orrs	r3, r2
 80035be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	0d5b      	lsrs	r3, r3, #21
 80035ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <I2C_TransferConfig+0x60>)
 80035d4:	430b      	orrs	r3, r1
 80035d6:	43db      	mvns	r3, r3
 80035d8:	ea02 0103 	and.w	r1, r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	03ff63ff 	.word	0x03ff63ff

080035f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b20      	cmp	r3, #32
 800360c:	d138      	bne.n	8003680 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003618:	2302      	movs	r3, #2
 800361a:	e032      	b.n	8003682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800364a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d139      	bne.n	8003718 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e033      	b.n	800371a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2224      	movs	r2, #36	; 0x24
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003728:	b08f      	sub	sp, #60	; 0x3c
 800372a:	af0a      	add	r7, sp, #40	; 0x28
 800372c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e116      	b.n	8003966 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd ff92 	bl	800167c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2203      	movs	r2, #3
 800375c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f002 fb43 	bl	8005e02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	687e      	ldr	r6, [r7, #4]
 8003784:	466d      	mov	r5, sp
 8003786:	f106 0410 	add.w	r4, r6, #16
 800378a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800378c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800378e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003792:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003796:	e885 0003 	stmia.w	r5, {r0, r1}
 800379a:	1d33      	adds	r3, r6, #4
 800379c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800379e:	6838      	ldr	r0, [r7, #0]
 80037a0:	f002 fb03 	bl	8005daa <USB_CoreInit>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e0d7      	b.n	8003966 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 fb31 	bl	8005e24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e04a      	b.n	800385e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	333d      	adds	r3, #61	; 0x3d
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	333c      	adds	r3, #60	; 0x3c
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	b298      	uxth	r0, r3
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	3344      	adds	r3, #68	; 0x44
 8003804:	4602      	mov	r2, r0
 8003806:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	3340      	adds	r3, #64	; 0x40
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3348      	adds	r3, #72	; 0x48
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	334c      	adds	r3, #76	; 0x4c
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	3354      	adds	r3, #84	; 0x54
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	3301      	adds	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	d3af      	bcc.n	80037c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003868:	2300      	movs	r3, #0
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e044      	b.n	80038f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800389a:	7bfa      	ldrb	r2, [r7, #15]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038c6:	7bfa      	ldrb	r2, [r7, #15]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038dc:	7bfa      	ldrb	r2, [r7, #15]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	3301      	adds	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	7bfa      	ldrb	r2, [r7, #15]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d3b5      	bcc.n	800386e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	687e      	ldr	r6, [r7, #4]
 800390a:	466d      	mov	r5, sp
 800390c:	f106 0410 	add.w	r4, r6, #16
 8003910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003918:	e894 0003 	ldmia.w	r4, {r0, r1}
 800391c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003920:	1d33      	adds	r3, r6, #4
 8003922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003924:	6838      	ldr	r0, [r7, #0]
 8003926:	f002 fac9 	bl	8005ebc <USB_DevInit>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e014      	b.n	8003966 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b01      	cmp	r3, #1
 8003952:	d102      	bne.n	800395a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f80a 	bl	800396e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f002 fc75 	bl	800624e <USB_DevDisconnect>

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800396e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	f043 0303 	orr.w	r3, r3, #3
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c6:	6013      	str	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40007000 	.word	0x40007000

080039d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40007000 	.word	0x40007000

080039f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a02:	d130      	bne.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a04:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a10:	d038      	beq.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2232      	movs	r2, #50	; 0x32
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	0c9b      	lsrs	r3, r3, #18
 8003a34:	3301      	adds	r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a38:	e002      	b.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4c:	d102      	bne.n	8003a54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f2      	bne.n	8003a3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d110      	bne.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e00f      	b.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a72:	d007      	beq.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a74:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a7c:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40007000 	.word	0x40007000
 8003a98:	20000274 	.word	0x20000274
 8003a9c:	431bde83 	.word	0x431bde83

08003aa0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_PWREx_EnableVddUSB+0x1c>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a04      	ldr	r2, [pc, #16]	; (8003abc <HAL_PWREx_EnableVddUSB+0x1c>)
 8003aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aae:	6053      	str	r3, [r2, #4]
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40007000 	.word	0x40007000

08003ac0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003ac8:	f7fe fadc 	bl	8002084 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e063      	b.n	8003ba0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fd fc99 	bl	8001424 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003af2:	f241 3188 	movw	r1, #5000	; 0x1388
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f858 	bl	8003bac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	021a      	lsls	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2120      	movs	r1, #32
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f850 	bl	8003bc8 <QSPI_WaitFlagStateUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d131      	bne.n	8003b96 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b3c:	f023 0310 	bic.w	r3, r3, #16
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6852      	ldr	r2, [r2, #4]
 8003b44:	0611      	lsls	r1, r2, #24
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68d2      	ldr	r2, [r2, #12]
 8003b4a:	4311      	orrs	r1, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_QSPI_Init+0xe8>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6912      	ldr	r2, [r2, #16]
 8003b62:	0411      	lsls	r1, r2, #16
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6952      	ldr	r2, [r2, #20]
 8003b68:	4311      	orrs	r1, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6992      	ldr	r2, [r2, #24]
 8003b6e:	4311      	orrs	r1, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003b9e:	7afb      	ldrb	r3, [r7, #11]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	ffe0f8fe 	.word	0xffe0f8fe

08003bac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003bd8:	e01a      	b.n	8003c10 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d016      	beq.n	8003c10 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be2:	f7fe fa4f 	bl	8002084 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e00e      	b.n	8003c2e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1d6      	bne.n	8003bda <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e3ca      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4a:	4b97      	ldr	r3, [pc, #604]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c54:	4b94      	ldr	r3, [pc, #592]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80e4 	beq.w	8003e34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <HAL_RCC_OscConfig+0x4a>
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	f040 808b 	bne.w	8003d90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	f040 8087 	bne.w	8003d90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c82:	4b89      	ldr	r3, [pc, #548]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_RCC_OscConfig+0x62>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e3a2      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1a      	ldr	r2, [r3, #32]
 8003c9e:	4b82      	ldr	r3, [pc, #520]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x7c>
 8003caa:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCC_OscConfig+0x88>
 8003cb4:	4b7c      	ldr	r3, [pc, #496]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cba:	091b      	lsrs	r3, r3, #4
 8003cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d223      	bcs.n	8003d0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fd55 	bl	8004778 <RCC_SetFlashLatencyFromMSIRange>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e383      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd8:	4b73      	ldr	r3, [pc, #460]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a72      	ldr	r2, [pc, #456]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cde:	f043 0308 	orr.w	r3, r3, #8
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b70      	ldr	r3, [pc, #448]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	496d      	ldr	r1, [pc, #436]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf6:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	4968      	ldr	r1, [pc, #416]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
 8003d0a:	e025      	b.n	8003d58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d0c:	4b66      	ldr	r3, [pc, #408]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a65      	ldr	r2, [pc, #404]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d12:	f043 0308 	orr.w	r3, r3, #8
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	4960      	ldr	r1, [pc, #384]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	495b      	ldr	r1, [pc, #364]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fd15 	bl	8004778 <RCC_SetFlashLatencyFromMSIRange>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e343      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d58:	f000 fc4a 	bl	80045f0 <HAL_RCC_GetSysClockFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b52      	ldr	r3, [pc, #328]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	4950      	ldr	r1, [pc, #320]	; (8003eac <HAL_RCC_OscConfig+0x274>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
 8003d74:	4a4e      	ldr	r2, [pc, #312]	; (8003eb0 <HAL_RCC_OscConfig+0x278>)
 8003d76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d78:	4b4e      	ldr	r3, [pc, #312]	; (8003eb4 <HAL_RCC_OscConfig+0x27c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fe f931 	bl	8001fe4 <HAL_InitTick>
 8003d82:	4603      	mov	r3, r0
 8003d84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d052      	beq.n	8003e32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	e327      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d032      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d98:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a42      	ldr	r2, [pc, #264]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003da4:	f7fe f96e 	bl	8002084 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dac:	f7fe f96a 	bl	8002084 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e310      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dbe:	4b3a      	ldr	r3, [pc, #232]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dca:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a36      	ldr	r2, [pc, #216]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b34      	ldr	r3, [pc, #208]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	4931      	ldr	r1, [pc, #196]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de8:	4b2f      	ldr	r3, [pc, #188]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	492c      	ldr	r1, [pc, #176]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]
 8003dfc:	e01a      	b.n	8003e34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e0a:	f7fe f93b 	bl	8002084 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e12:	f7fe f937 	bl	8002084 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e2dd      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f0      	bne.n	8003e12 <HAL_RCC_OscConfig+0x1da>
 8003e30:	e000      	b.n	8003e34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d074      	beq.n	8003f2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d005      	beq.n	8003e52 <HAL_RCC_OscConfig+0x21a>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	d10e      	bne.n	8003e6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d10b      	bne.n	8003e6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d064      	beq.n	8003f28 <HAL_RCC_OscConfig+0x2f0>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d160      	bne.n	8003f28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e2ba      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x24a>
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a0b      	ldr	r2, [pc, #44]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e026      	b.n	8003ed0 <HAL_RCC_OscConfig+0x298>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8a:	d115      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x280>
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a02      	ldr	r2, [pc, #8]	; (8003ea8 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCC_OscConfig+0x298>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	08006d28 	.word	0x08006d28
 8003eb0:	20000274 	.word	0x20000274
 8003eb4:	20000294 	.word	0x20000294
 8003eb8:	4ba0      	ldr	r3, [pc, #640]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a9f      	ldr	r2, [pc, #636]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4b9d      	ldr	r3, [pc, #628]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a9c      	ldr	r2, [pc, #624]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fe f8d4 	bl	8002084 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee0:	f7fe f8d0 	bl	8002084 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e276      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ef2:	4b92      	ldr	r3, [pc, #584]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x2a8>
 8003efe:	e014      	b.n	8003f2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe f8c0 	bl	8002084 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f08:	f7fe f8bc 	bl	8002084 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e262      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f1a:	4b88      	ldr	r3, [pc, #544]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x2d0>
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d060      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_OscConfig+0x310>
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d119      	bne.n	8003f76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d116      	bne.n	8003f76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f48:	4b7c      	ldr	r3, [pc, #496]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_OscConfig+0x328>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e23f      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b76      	ldr	r3, [pc, #472]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	4973      	ldr	r1, [pc, #460]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f74:	e040      	b.n	8003ff8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d023      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f7e:	4b6f      	ldr	r3, [pc, #444]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6e      	ldr	r2, [pc, #440]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fe f87b 	bl	8002084 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f92:	f7fe f877 	bl	8002084 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e21d      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa4:	4b65      	ldr	r3, [pc, #404]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b62      	ldr	r3, [pc, #392]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	495f      	ldr	r1, [pc, #380]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
 8003fc4:	e018      	b.n	8003ff8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5c      	ldr	r2, [pc, #368]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe f857 	bl	8002084 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fe f853 	bl	8002084 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1f9      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fec:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d03c      	beq.n	800407e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01c      	beq.n	8004046 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400c:	4b4b      	ldr	r3, [pc, #300]	; (800413c <HAL_RCC_OscConfig+0x504>)
 800400e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004012:	4a4a      	ldr	r2, [pc, #296]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401c:	f7fe f832 	bl	8002084 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004024:	f7fe f82e 	bl	8002084 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e1d4      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004036:	4b41      	ldr	r3, [pc, #260]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ef      	beq.n	8004024 <HAL_RCC_OscConfig+0x3ec>
 8004044:	e01b      	b.n	800407e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004046:	4b3d      	ldr	r3, [pc, #244]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404c:	4a3b      	ldr	r2, [pc, #236]	; (800413c <HAL_RCC_OscConfig+0x504>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fe f815 	bl	8002084 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800405e:	f7fe f811 	bl	8002084 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e1b7      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004070:	4b32      	ldr	r3, [pc, #200]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1ef      	bne.n	800405e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80a6 	beq.w	80041d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800408c:	2300      	movs	r3, #0
 800408e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004090:	4b2a      	ldr	r3, [pc, #168]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10d      	bne.n	80040b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800409c:	4b27      	ldr	r3, [pc, #156]	; (800413c <HAL_RCC_OscConfig+0x504>)
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	4a26      	ldr	r2, [pc, #152]	; (800413c <HAL_RCC_OscConfig+0x504>)
 80040a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a6:	6593      	str	r3, [r2, #88]	; 0x58
 80040a8:	4b24      	ldr	r3, [pc, #144]	; (800413c <HAL_RCC_OscConfig+0x504>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b4:	2301      	movs	r3, #1
 80040b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b8:	4b21      	ldr	r3, [pc, #132]	; (8004140 <HAL_RCC_OscConfig+0x508>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d118      	bne.n	80040f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c4:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <HAL_RCC_OscConfig+0x508>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_RCC_OscConfig+0x508>)
 80040ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d0:	f7fd ffd8 	bl	8002084 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d8:	f7fd ffd4 	bl	8002084 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e17a      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <HAL_RCC_OscConfig+0x508>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d108      	bne.n	8004110 <HAL_RCC_OscConfig+0x4d8>
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800410e:	e029      	b.n	8004164 <HAL_RCC_OscConfig+0x52c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b05      	cmp	r3, #5
 8004116:	d115      	bne.n	8004144 <HAL_RCC_OscConfig+0x50c>
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_RCC_OscConfig+0x504>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <HAL_RCC_OscConfig+0x504>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	4a03      	ldr	r2, [pc, #12]	; (800413c <HAL_RCC_OscConfig+0x504>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004138:	e014      	b.n	8004164 <HAL_RCC_OscConfig+0x52c>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	40007000 	.word	0x40007000
 8004144:	4b9c      	ldr	r3, [pc, #624]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	4a9b      	ldr	r2, [pc, #620]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004154:	4b98      	ldr	r3, [pc, #608]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	4a97      	ldr	r2, [pc, #604]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d016      	beq.n	800419a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fd ff8a 	bl	8002084 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004172:	e00a      	b.n	800418a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fd ff86 	bl	8002084 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e12a      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418a:	4b8b      	ldr	r3, [pc, #556]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ed      	beq.n	8004174 <HAL_RCC_OscConfig+0x53c>
 8004198:	e015      	b.n	80041c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419a:	f7fd ff73 	bl	8002084 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f7fd ff6f 	bl	8002084 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e113      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b8:	4b7f      	ldr	r3, [pc, #508]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1ed      	bne.n	80041a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041c6:	7ffb      	ldrb	r3, [r7, #31]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d105      	bne.n	80041d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041cc:	4b7a      	ldr	r3, [pc, #488]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	4a79      	ldr	r2, [pc, #484]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 80041d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80fe 	beq.w	80043de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	f040 80d0 	bne.w	800438c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041ec:	4b72      	ldr	r3, [pc, #456]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f003 0203 	and.w	r2, r3, #3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d130      	bne.n	8004262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	3b01      	subs	r3, #1
 800420c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d127      	bne.n	8004262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d11f      	bne.n	8004262 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800422c:	2a07      	cmp	r2, #7
 800422e:	bf14      	ite	ne
 8004230:	2201      	movne	r2, #1
 8004232:	2200      	moveq	r2, #0
 8004234:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004236:	4293      	cmp	r3, r2
 8004238:	d113      	bne.n	8004262 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d109      	bne.n	8004262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	3b01      	subs	r3, #1
 800425c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d06e      	beq.n	8004340 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b0c      	cmp	r3, #12
 8004266:	d069      	beq.n	800433c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004274:	4b50      	ldr	r3, [pc, #320]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0ad      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004284:	4b4c      	ldr	r3, [pc, #304]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a4b      	ldr	r2, [pc, #300]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 800428a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800428e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004290:	f7fd fef8 	bl	8002084 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fd fef4 	bl	8002084 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e09a      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042aa:	4b43      	ldr	r3, [pc, #268]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042b6:	4b40      	ldr	r3, [pc, #256]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	4b40      	ldr	r3, [pc, #256]	; (80043bc <HAL_RCC_OscConfig+0x784>)
 80042bc:	4013      	ands	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042c6:	3a01      	subs	r2, #1
 80042c8:	0112      	lsls	r2, r2, #4
 80042ca:	4311      	orrs	r1, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042d0:	0212      	lsls	r2, r2, #8
 80042d2:	4311      	orrs	r1, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042d8:	0852      	lsrs	r2, r2, #1
 80042da:	3a01      	subs	r2, #1
 80042dc:	0552      	lsls	r2, r2, #21
 80042de:	4311      	orrs	r1, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042e4:	0852      	lsrs	r2, r2, #1
 80042e6:	3a01      	subs	r2, #1
 80042e8:	0652      	lsls	r2, r2, #25
 80042ea:	4311      	orrs	r1, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042f0:	0912      	lsrs	r2, r2, #4
 80042f2:	0452      	lsls	r2, r2, #17
 80042f4:	430a      	orrs	r2, r1
 80042f6:	4930      	ldr	r1, [pc, #192]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042fc:	4b2e      	ldr	r3, [pc, #184]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004306:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004308:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 800430e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004312:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004314:	f7fd feb6 	bl	8002084 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431c:	f7fd feb2 	bl	8002084 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e058      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432e:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800433a:	e050      	b.n	80043de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e04f      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d148      	bne.n	80043de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004356:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004358:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a16      	ldr	r2, [pc, #88]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004362:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004364:	f7fd fe8e 	bl	8002084 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436c:	f7fd fe8a 	bl	8002084 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e030      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437e:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x734>
 800438a:	e028      	b.n	80043de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d023      	beq.n	80043da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <HAL_RCC_OscConfig+0x780>)
 8004398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800439c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fd fe71 	bl	8002084 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a4:	e00c      	b.n	80043c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a6:	f7fd fe6d 	bl	8002084 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d905      	bls.n	80043c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e013      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
 80043b8:	40021000 	.word	0x40021000
 80043bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_OscConfig+0x7b0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ec      	bne.n	80043a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_RCC_OscConfig+0x7b0>)
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	4905      	ldr	r1, [pc, #20]	; (80043e8 <HAL_RCC_OscConfig+0x7b0>)
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_RCC_OscConfig+0x7b4>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	60cb      	str	r3, [r1, #12]
 80043d8:	e001      	b.n	80043de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	feeefffc 	.word	0xfeeefffc

080043f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0e7      	b.n	80045d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004404:	4b75      	ldr	r3, [pc, #468]	; (80045dc <HAL_RCC_ClockConfig+0x1ec>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d910      	bls.n	8004434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004412:	4b72      	ldr	r3, [pc, #456]	; (80045dc <HAL_RCC_ClockConfig+0x1ec>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 0207 	bic.w	r2, r3, #7
 800441a:	4970      	ldr	r1, [pc, #448]	; (80045dc <HAL_RCC_ClockConfig+0x1ec>)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b6e      	ldr	r3, [pc, #440]	; (80045dc <HAL_RCC_ClockConfig+0x1ec>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0cf      	b.n	80045d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d010      	beq.n	8004462 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	4b66      	ldr	r3, [pc, #408]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800444c:	429a      	cmp	r2, r3
 800444e:	d908      	bls.n	8004462 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004450:	4b63      	ldr	r3, [pc, #396]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4960      	ldr	r1, [pc, #384]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d04c      	beq.n	8004508 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b03      	cmp	r3, #3
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004476:	4b5a      	ldr	r3, [pc, #360]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d121      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e0a6      	b.n	80045d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800448e:	4b54      	ldr	r3, [pc, #336]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d115      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e09a      	b.n	80045d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044a6:	4b4e      	ldr	r3, [pc, #312]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e08e      	b.n	80045d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b6:	4b4a      	ldr	r3, [pc, #296]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e086      	b.n	80045d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044c6:	4b46      	ldr	r3, [pc, #280]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f023 0203 	bic.w	r2, r3, #3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	4943      	ldr	r1, [pc, #268]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d8:	f7fd fdd4 	bl	8002084 <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e0:	f7fd fdd0 	bl	8002084 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e06e      	b.n	80045d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	4b3a      	ldr	r3, [pc, #232]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 020c 	and.w	r2, r3, #12
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	429a      	cmp	r2, r3
 8004506:	d1eb      	bne.n	80044e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d010      	beq.n	8004536 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	4b31      	ldr	r3, [pc, #196]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004520:	429a      	cmp	r2, r3
 8004522:	d208      	bcs.n	8004536 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004524:	4b2e      	ldr	r3, [pc, #184]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	492b      	ldr	r1, [pc, #172]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004536:	4b29      	ldr	r3, [pc, #164]	; (80045dc <HAL_RCC_ClockConfig+0x1ec>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d210      	bcs.n	8004566 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004544:	4b25      	ldr	r3, [pc, #148]	; (80045dc <HAL_RCC_ClockConfig+0x1ec>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 0207 	bic.w	r2, r3, #7
 800454c:	4923      	ldr	r1, [pc, #140]	; (80045dc <HAL_RCC_ClockConfig+0x1ec>)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004554:	4b21      	ldr	r3, [pc, #132]	; (80045dc <HAL_RCC_ClockConfig+0x1ec>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d001      	beq.n	8004566 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e036      	b.n	80045d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004572:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	4918      	ldr	r1, [pc, #96]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004580:	4313      	orrs	r3, r2
 8004582:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004590:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4910      	ldr	r1, [pc, #64]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045a4:	f000 f824 	bl	80045f0 <HAL_RCC_GetSysClockFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	490b      	ldr	r1, [pc, #44]	; (80045e4 <HAL_RCC_ClockConfig+0x1f4>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
 80045c0:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <HAL_RCC_ClockConfig+0x1f8>)
 80045c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_RCC_ClockConfig+0x1fc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fd fd0b 	bl	8001fe4 <HAL_InitTick>
 80045ce:	4603      	mov	r3, r0
 80045d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80045d2:	7afb      	ldrb	r3, [r7, #11]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40022000 	.word	0x40022000
 80045e0:	40021000 	.word	0x40021000
 80045e4:	08006d28 	.word	0x08006d28
 80045e8:	20000274 	.word	0x20000274
 80045ec:	20000294 	.word	0x20000294

080045f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fe:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004608:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_GetSysClockFreq+0x34>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	2b0c      	cmp	r3, #12
 800461c:	d121      	bne.n	8004662 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d11e      	bne.n	8004662 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004624:	4b34      	ldr	r3, [pc, #208]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d107      	bne.n	8004640 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004630:	4b31      	ldr	r3, [pc, #196]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	e005      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004640:	4b2d      	ldr	r3, [pc, #180]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800464c:	4a2b      	ldr	r2, [pc, #172]	; (80046fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004654:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10d      	bne.n	8004678 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b04      	cmp	r3, #4
 8004666:	d102      	bne.n	800466e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004668:	4b25      	ldr	r3, [pc, #148]	; (8004700 <HAL_RCC_GetSysClockFreq+0x110>)
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	e004      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d101      	bne.n	8004678 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004674:	4b23      	ldr	r3, [pc, #140]	; (8004704 <HAL_RCC_GetSysClockFreq+0x114>)
 8004676:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b0c      	cmp	r3, #12
 800467c:	d134      	bne.n	80046e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800467e:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d003      	beq.n	8004696 <HAL_RCC_GetSysClockFreq+0xa6>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d003      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0xac>
 8004694:	e005      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004696:	4b1a      	ldr	r3, [pc, #104]	; (8004700 <HAL_RCC_GetSysClockFreq+0x110>)
 8004698:	617b      	str	r3, [r7, #20]
      break;
 800469a:	e005      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_RCC_GetSysClockFreq+0x114>)
 800469e:	617b      	str	r3, [r7, #20]
      break;
 80046a0:	e002      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	617b      	str	r3, [r7, #20]
      break;
 80046a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046a8:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	3301      	adds	r3, #1
 80046b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	fb03 f202 	mul.w	r2, r3, r2
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046ce:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	0e5b      	lsrs	r3, r3, #25
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	3301      	adds	r3, #1
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046e8:	69bb      	ldr	r3, [r7, #24]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3724      	adds	r7, #36	; 0x24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	08006d40 	.word	0x08006d40
 8004700:	00f42400 	.word	0x00f42400
 8004704:	007a1200 	.word	0x007a1200

08004708 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800470c:	4b03      	ldr	r3, [pc, #12]	; (800471c <HAL_RCC_GetHCLKFreq+0x14>)
 800470e:	681b      	ldr	r3, [r3, #0]
}
 8004710:	4618      	mov	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000274 	.word	0x20000274

08004720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004724:	f7ff fff0 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 8004728:	4602      	mov	r2, r0
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	4904      	ldr	r1, [pc, #16]	; (8004748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004736:	5ccb      	ldrb	r3, [r1, r3]
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40021000 	.word	0x40021000
 8004748:	08006d38 	.word	0x08006d38

0800474c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004750:	f7ff ffda 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 8004754:	4602      	mov	r2, r0
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	0adb      	lsrs	r3, r3, #11
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	4904      	ldr	r1, [pc, #16]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000
 8004774:	08006d38 	.word	0x08006d38

08004778 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004780:	2300      	movs	r3, #0
 8004782:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004784:	4b2a      	ldr	r3, [pc, #168]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004790:	f7ff f922 	bl	80039d8 <HAL_PWREx_GetVoltageRange>
 8004794:	6178      	str	r0, [r7, #20]
 8004796:	e014      	b.n	80047c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	4a24      	ldr	r2, [pc, #144]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6593      	str	r3, [r2, #88]	; 0x58
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047b0:	f7ff f912 	bl	80039d8 <HAL_PWREx_GetVoltageRange>
 80047b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c8:	d10b      	bne.n	80047e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d919      	bls.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2ba0      	cmp	r3, #160	; 0xa0
 80047d4:	d902      	bls.n	80047dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047d6:	2302      	movs	r3, #2
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	e013      	b.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047dc:	2301      	movs	r3, #1
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	e010      	b.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b80      	cmp	r3, #128	; 0x80
 80047e6:	d902      	bls.n	80047ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047e8:	2303      	movs	r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	e00a      	b.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b80      	cmp	r3, #128	; 0x80
 80047f2:	d102      	bne.n	80047fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047f4:	2302      	movs	r3, #2
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	e004      	b.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b70      	cmp	r3, #112	; 0x70
 80047fe:	d101      	bne.n	8004804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004800:	2301      	movs	r3, #1
 8004802:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f023 0207 	bic.w	r2, r3, #7
 800480c:	4909      	ldr	r1, [pc, #36]	; (8004834 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	429a      	cmp	r2, r3
 8004820:	d001      	beq.n	8004826 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	40022000 	.word	0x40022000

08004838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004840:	2300      	movs	r3, #0
 8004842:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004844:	2300      	movs	r3, #0
 8004846:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004850:	2b00      	cmp	r3, #0
 8004852:	d041      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004858:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800485c:	d02a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800485e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004862:	d824      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004864:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004868:	d008      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800486a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800486e:	d81e      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004878:	d010      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800487a:	e018      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800487c:	4b86      	ldr	r3, [pc, #536]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a85      	ldr	r2, [pc, #532]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004886:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004888:	e015      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3304      	adds	r3, #4
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f000 facb 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800489a:	e00c      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3320      	adds	r3, #32
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fbb6 	bl	8005014 <RCCEx_PLLSAI2_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048ac:	e003      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	74fb      	strb	r3, [r7, #19]
      break;
 80048b2:	e000      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b6:	7cfb      	ldrb	r3, [r7, #19]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048bc:	4b76      	ldr	r3, [pc, #472]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ca:	4973      	ldr	r1, [pc, #460]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048d2:	e001      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d041      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048ec:	d02a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048f2:	d824      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048f8:	d008      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048fe:	d81e      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004908:	d010      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800490a:	e018      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800490c:	4b62      	ldr	r3, [pc, #392]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a61      	ldr	r2, [pc, #388]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004916:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004918:	e015      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3304      	adds	r3, #4
 800491e:	2100      	movs	r1, #0
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fa83 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800492a:	e00c      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3320      	adds	r3, #32
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fb6e 	bl	8005014 <RCCEx_PLLSAI2_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800493c:	e003      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	74fb      	strb	r3, [r7, #19]
      break;
 8004942:	e000      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004946:	7cfb      	ldrb	r3, [r7, #19]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800494c:	4b52      	ldr	r3, [pc, #328]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800495a:	494f      	ldr	r1, [pc, #316]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004962:	e001      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004964:	7cfb      	ldrb	r3, [r7, #19]
 8004966:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80a0 	beq.w	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004976:	2300      	movs	r3, #0
 8004978:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800497a:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00d      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004990:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	4a40      	ldr	r2, [pc, #256]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499a:	6593      	str	r3, [r2, #88]	; 0x58
 800499c:	4b3e      	ldr	r3, [pc, #248]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a8:	2301      	movs	r3, #1
 80049aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ac:	4b3b      	ldr	r3, [pc, #236]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a3a      	ldr	r2, [pc, #232]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049b8:	f7fd fb64 	bl	8002084 <HAL_GetTick>
 80049bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049be:	e009      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c0:	f7fd fb60 	bl	8002084 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d902      	bls.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	74fb      	strb	r3, [r7, #19]
        break;
 80049d2:	e005      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049d4:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0ef      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049e0:	7cfb      	ldrb	r3, [r7, #19]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d15c      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049e6:	4b2c      	ldr	r3, [pc, #176]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01f      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d019      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a04:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a10:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a20:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a30:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d016      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fd fb1f 	bl	8002084 <HAL_GetTick>
 8004a46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a48:	e00b      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fd fb1b 	bl	8002084 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d902      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a60:	e006      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ec      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a76:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a86:	4904      	ldr	r1, [pc, #16]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a8e:	e009      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	74bb      	strb	r3, [r7, #18]
 8004a94:	e006      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	7cfb      	ldrb	r3, [r7, #19]
 8004aa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa4:	7c7b      	ldrb	r3, [r7, #17]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aaa:	4b9e      	ldr	r3, [pc, #632]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aae:	4a9d      	ldr	r2, [pc, #628]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ac2:	4b98      	ldr	r3, [pc, #608]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac8:	f023 0203 	bic.w	r2, r3, #3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	4994      	ldr	r1, [pc, #592]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ae4:	4b8f      	ldr	r3, [pc, #572]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	f023 020c 	bic.w	r2, r3, #12
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af2:	498c      	ldr	r1, [pc, #560]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b06:	4b87      	ldr	r3, [pc, #540]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	4983      	ldr	r1, [pc, #524]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b28:	4b7e      	ldr	r3, [pc, #504]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	497b      	ldr	r1, [pc, #492]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b4a:	4b76      	ldr	r3, [pc, #472]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b58:	4972      	ldr	r1, [pc, #456]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b6c:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	496a      	ldr	r1, [pc, #424]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b8e:	4b65      	ldr	r3, [pc, #404]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9c:	4961      	ldr	r1, [pc, #388]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bb0:	4b5c      	ldr	r3, [pc, #368]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bbe:	4959      	ldr	r1, [pc, #356]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bd2:	4b54      	ldr	r3, [pc, #336]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be0:	4950      	ldr	r1, [pc, #320]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c02:	4948      	ldr	r1, [pc, #288]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c16:	4b43      	ldr	r3, [pc, #268]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	493f      	ldr	r1, [pc, #252]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d028      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c38:	4b3a      	ldr	r3, [pc, #232]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c46:	4937      	ldr	r1, [pc, #220]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c56:	d106      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c58:	4b32      	ldr	r3, [pc, #200]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4a31      	ldr	r2, [pc, #196]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c62:	60d3      	str	r3, [r2, #12]
 8004c64:	e011      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c6e:	d10c      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	2101      	movs	r1, #1
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f8d8 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d028      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c96:	4b23      	ldr	r3, [pc, #140]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	491f      	ldr	r1, [pc, #124]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb4:	d106      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb6:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc0:	60d3      	str	r3, [r2, #12]
 8004cc2:	e011      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 f8a9 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02b      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d02:	4908      	ldr	r1, [pc, #32]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d12:	d109      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a02      	ldr	r2, [pc, #8]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d1e:	60d3      	str	r3, [r2, #12]
 8004d20:	e014      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	2101      	movs	r1, #1
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 f877 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d42:	7cfb      	ldrb	r3, [r7, #19]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d58:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d66:	4928      	ldr	r1, [pc, #160]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d76:	d10d      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f854 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d014      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	74bb      	strb	r3, [r7, #18]
 8004d92:	e011      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3320      	adds	r3, #32
 8004da2:	2102      	movs	r1, #2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 f935 	bl	8005014 <RCCEx_PLLSAI2_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dae:	7cfb      	ldrb	r3, [r7, #19]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004db4:	7cfb      	ldrb	r3, [r7, #19]
 8004db6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004dc4:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd2:	490d      	ldr	r1, [pc, #52]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df6:	4904      	ldr	r1, [pc, #16]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dfe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000

08004e0c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e16:	f043 0304 	orr.w	r3, r3, #4
 8004e1a:	6013      	str	r3, [r2, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40021000 	.word	0x40021000

08004e2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e3a:	4b75      	ldr	r3, [pc, #468]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d018      	beq.n	8004e78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e46:	4b72      	ldr	r3, [pc, #456]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0203 	and.w	r2, r3, #3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d10d      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
       ||
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e5e:	4b6c      	ldr	r3, [pc, #432]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d047      	beq.n	8004f02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	73fb      	strb	r3, [r7, #15]
 8004e76:	e044      	b.n	8004f02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d018      	beq.n	8004eb2 <RCCEx_PLLSAI1_Config+0x86>
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d825      	bhi.n	8004ed0 <RCCEx_PLLSAI1_Config+0xa4>
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d002      	beq.n	8004e8e <RCCEx_PLLSAI1_Config+0x62>
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d009      	beq.n	8004ea0 <RCCEx_PLLSAI1_Config+0x74>
 8004e8c:	e020      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e8e:	4b60      	ldr	r3, [pc, #384]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d11d      	bne.n	8004ed6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e9e:	e01a      	b.n	8004ed6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ea0:	4b5b      	ldr	r3, [pc, #364]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d116      	bne.n	8004eda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb0:	e013      	b.n	8004eda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eb2:	4b57      	ldr	r3, [pc, #348]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ebe:	4b54      	ldr	r3, [pc, #336]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ece:	e006      	b.n	8004ede <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	e004      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ed6:	bf00      	nop
 8004ed8:	e002      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004eda:	bf00      	nop
 8004edc:	e000      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ede:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10d      	bne.n	8004f02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ee6:	4b4a      	ldr	r3, [pc, #296]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6819      	ldr	r1, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	430b      	orrs	r3, r1
 8004efc:	4944      	ldr	r1, [pc, #272]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d17d      	bne.n	8005004 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f08:	4b41      	ldr	r3, [pc, #260]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a40      	ldr	r2, [pc, #256]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f14:	f7fd f8b6 	bl	8002084 <HAL_GetTick>
 8004f18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f1a:	e009      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f1c:	f7fd f8b2 	bl	8002084 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d902      	bls.n	8004f30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f2e:	e005      	b.n	8004f3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f30:	4b37      	ldr	r3, [pc, #220]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ef      	bne.n	8004f1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d160      	bne.n	8005004 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d111      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f48:	4b31      	ldr	r3, [pc, #196]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6892      	ldr	r2, [r2, #8]
 8004f58:	0211      	lsls	r1, r2, #8
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	68d2      	ldr	r2, [r2, #12]
 8004f5e:	0912      	lsrs	r2, r2, #4
 8004f60:	0452      	lsls	r2, r2, #17
 8004f62:	430a      	orrs	r2, r1
 8004f64:	492a      	ldr	r1, [pc, #168]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	610b      	str	r3, [r1, #16]
 8004f6a:	e027      	b.n	8004fbc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d112      	bne.n	8004f98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f72:	4b27      	ldr	r3, [pc, #156]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6892      	ldr	r2, [r2, #8]
 8004f82:	0211      	lsls	r1, r2, #8
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6912      	ldr	r2, [r2, #16]
 8004f88:	0852      	lsrs	r2, r2, #1
 8004f8a:	3a01      	subs	r2, #1
 8004f8c:	0552      	lsls	r2, r2, #21
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	491f      	ldr	r1, [pc, #124]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	610b      	str	r3, [r1, #16]
 8004f96:	e011      	b.n	8004fbc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6892      	ldr	r2, [r2, #8]
 8004fa8:	0211      	lsls	r1, r2, #8
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6952      	ldr	r2, [r2, #20]
 8004fae:	0852      	lsrs	r2, r2, #1
 8004fb0:	3a01      	subs	r2, #1
 8004fb2:	0652      	lsls	r2, r2, #25
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	4916      	ldr	r1, [pc, #88]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a13      	ldr	r2, [pc, #76]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7fd f85c 	bl	8002084 <HAL_GetTick>
 8004fcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fce:	e009      	b.n	8004fe4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fd0:	f7fd f858 	bl	8002084 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d902      	bls.n	8004fe4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	73fb      	strb	r3, [r7, #15]
          break;
 8004fe2:	e005      	b.n	8004ff0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ef      	beq.n	8004fd0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	4904      	ldr	r1, [pc, #16]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000

08005014 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005022:	4b6a      	ldr	r3, [pc, #424]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d018      	beq.n	8005060 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800502e:	4b67      	ldr	r3, [pc, #412]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0203 	and.w	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d10d      	bne.n	800505a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
       ||
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005046:	4b61      	ldr	r3, [pc, #388]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
       ||
 8005056:	429a      	cmp	r2, r3
 8005058:	d047      	beq.n	80050ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
 800505e:	e044      	b.n	80050ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d018      	beq.n	800509a <RCCEx_PLLSAI2_Config+0x86>
 8005068:	2b03      	cmp	r3, #3
 800506a:	d825      	bhi.n	80050b8 <RCCEx_PLLSAI2_Config+0xa4>
 800506c:	2b01      	cmp	r3, #1
 800506e:	d002      	beq.n	8005076 <RCCEx_PLLSAI2_Config+0x62>
 8005070:	2b02      	cmp	r3, #2
 8005072:	d009      	beq.n	8005088 <RCCEx_PLLSAI2_Config+0x74>
 8005074:	e020      	b.n	80050b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005076:	4b55      	ldr	r3, [pc, #340]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d11d      	bne.n	80050be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005086:	e01a      	b.n	80050be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005088:	4b50      	ldr	r3, [pc, #320]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d116      	bne.n	80050c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005098:	e013      	b.n	80050c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800509a:	4b4c      	ldr	r3, [pc, #304]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10f      	bne.n	80050c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050a6:	4b49      	ldr	r3, [pc, #292]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050b6:	e006      	b.n	80050c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	e004      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10d      	bne.n	80050ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050ce:	4b3f      	ldr	r3, [pc, #252]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6819      	ldr	r1, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	3b01      	subs	r3, #1
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	430b      	orrs	r3, r1
 80050e4:	4939      	ldr	r1, [pc, #228]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d167      	bne.n	80051c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050f0:	4b36      	ldr	r3, [pc, #216]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a35      	ldr	r2, [pc, #212]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fc:	f7fc ffc2 	bl	8002084 <HAL_GetTick>
 8005100:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005102:	e009      	b.n	8005118 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005104:	f7fc ffbe 	bl	8002084 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d902      	bls.n	8005118 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	73fb      	strb	r3, [r7, #15]
        break;
 8005116:	e005      	b.n	8005124 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005118:	4b2c      	ldr	r3, [pc, #176]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ef      	bne.n	8005104 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d14a      	bne.n	80051c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d111      	bne.n	8005154 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005130:	4b26      	ldr	r3, [pc, #152]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	0211      	lsls	r1, r2, #8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68d2      	ldr	r2, [r2, #12]
 8005146:	0912      	lsrs	r2, r2, #4
 8005148:	0452      	lsls	r2, r2, #17
 800514a:	430a      	orrs	r2, r1
 800514c:	491f      	ldr	r1, [pc, #124]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800514e:	4313      	orrs	r3, r2
 8005150:	614b      	str	r3, [r1, #20]
 8005152:	e011      	b.n	8005178 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800515c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6892      	ldr	r2, [r2, #8]
 8005164:	0211      	lsls	r1, r2, #8
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6912      	ldr	r2, [r2, #16]
 800516a:	0852      	lsrs	r2, r2, #1
 800516c:	3a01      	subs	r2, #1
 800516e:	0652      	lsls	r2, r2, #25
 8005170:	430a      	orrs	r2, r1
 8005172:	4916      	ldr	r1, [pc, #88]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005174:	4313      	orrs	r3, r2
 8005176:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005178:	4b14      	ldr	r3, [pc, #80]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a13      	ldr	r2, [pc, #76]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800517e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005182:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7fc ff7e 	bl	8002084 <HAL_GetTick>
 8005188:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800518a:	e009      	b.n	80051a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800518c:	f7fc ff7a 	bl	8002084 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d902      	bls.n	80051a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	73fb      	strb	r3, [r7, #15]
          break;
 800519e:	e005      	b.n	80051ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0ef      	beq.n	800518c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	4904      	ldr	r1, [pc, #16]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000

080051d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e095      	b.n	800530e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d108      	bne.n	80051fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f2:	d009      	beq.n	8005208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	61da      	str	r2, [r3, #28]
 80051fa:	e005      	b.n	8005208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc f942 	bl	80014ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005248:	d902      	bls.n	8005250 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	e002      	b.n	8005256 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005254:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800525e:	d007      	beq.n	8005270 <HAL_SPI_Init+0xa0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005268:	d002      	beq.n	8005270 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	ea42 0103 	orr.w	r1, r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	f003 0204 	and.w	r2, r3, #4
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052ec:	ea42 0103 	orr.w	r1, r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e040      	b.n	80053aa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fc f8fb 	bl	8001534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2224      	movs	r2, #36	; 0x24
 8005342:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0201 	bic.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f8c1 	bl	80054dc <UART_SetConfig>
 800535a:	4603      	mov	r3, r0
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e022      	b.n	80053aa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fb6d 	bl	8005a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005380:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005390:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0201 	orr.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fbf4 	bl	8005b90 <UART_CheckIdleState>
 80053a8:	4603      	mov	r3, r0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b08a      	sub	sp, #40	; 0x28
 80053b6:	af02      	add	r7, sp, #8
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	603b      	str	r3, [r7, #0]
 80053be:	4613      	mov	r3, r2
 80053c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	f040 8082 	bne.w	80054d0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <HAL_UART_Transmit+0x26>
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e07a      	b.n	80054d2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Transmit+0x38>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e073      	b.n	80054d2 <HAL_UART_Transmit+0x120>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2221      	movs	r2, #33	; 0x21
 80053fe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005400:	f7fc fe40 	bl	8002084 <HAL_GetTick>
 8005404:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	88fa      	ldrh	r2, [r7, #6]
 800540a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	d108      	bne.n	8005432 <HAL_UART_Transmit+0x80>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	e003      	b.n	800543a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005442:	e02d      	b.n	80054a0 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2200      	movs	r2, #0
 800544c:	2180      	movs	r1, #128	; 0x80
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fbe7 	bl	8005c22 <UART_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e039      	b.n	80054d2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10b      	bne.n	800547c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	881a      	ldrh	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005470:	b292      	uxth	r2, r2
 8005472:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	3302      	adds	r3, #2
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e008      	b.n	800548e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	781a      	ldrb	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	b292      	uxth	r2, r2
 8005486:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	3301      	adds	r3, #1
 800548c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1cb      	bne.n	8005444 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	2140      	movs	r1, #64	; 0x40
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fbb3 	bl	8005c22 <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e005      	b.n	80054d2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e0:	b08a      	sub	sp, #40	; 0x28
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	4313      	orrs	r3, r2
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4ba4      	ldr	r3, [pc, #656]	; (800579c <UART_SetConfig+0x2c0>)
 800550c:	4013      	ands	r3, r2
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005514:	430b      	orrs	r3, r1
 8005516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a99      	ldr	r2, [pc, #612]	; (80057a0 <UART_SetConfig+0x2c4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005544:	4313      	orrs	r3, r2
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005558:	430a      	orrs	r2, r1
 800555a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a90      	ldr	r2, [pc, #576]	; (80057a4 <UART_SetConfig+0x2c8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d126      	bne.n	80055b4 <UART_SetConfig+0xd8>
 8005566:	4b90      	ldr	r3, [pc, #576]	; (80057a8 <UART_SetConfig+0x2cc>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	2b03      	cmp	r3, #3
 8005572:	d81b      	bhi.n	80055ac <UART_SetConfig+0xd0>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <UART_SetConfig+0xa0>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	0800558d 	.word	0x0800558d
 8005580:	0800559d 	.word	0x0800559d
 8005584:	08005595 	.word	0x08005595
 8005588:	080055a5 	.word	0x080055a5
 800558c:	2301      	movs	r3, #1
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005592:	e116      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005594:	2302      	movs	r3, #2
 8005596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559a:	e112      	b.n	80057c2 <UART_SetConfig+0x2e6>
 800559c:	2304      	movs	r3, #4
 800559e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a2:	e10e      	b.n	80057c2 <UART_SetConfig+0x2e6>
 80055a4:	2308      	movs	r3, #8
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055aa:	e10a      	b.n	80057c2 <UART_SetConfig+0x2e6>
 80055ac:	2310      	movs	r3, #16
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b2:	e106      	b.n	80057c2 <UART_SetConfig+0x2e6>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a7c      	ldr	r2, [pc, #496]	; (80057ac <UART_SetConfig+0x2d0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d138      	bne.n	8005630 <UART_SetConfig+0x154>
 80055be:	4b7a      	ldr	r3, [pc, #488]	; (80057a8 <UART_SetConfig+0x2cc>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f003 030c 	and.w	r3, r3, #12
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	d82d      	bhi.n	8005628 <UART_SetConfig+0x14c>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0xf8>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	08005609 	.word	0x08005609
 80055d8:	08005629 	.word	0x08005629
 80055dc:	08005629 	.word	0x08005629
 80055e0:	08005629 	.word	0x08005629
 80055e4:	08005619 	.word	0x08005619
 80055e8:	08005629 	.word	0x08005629
 80055ec:	08005629 	.word	0x08005629
 80055f0:	08005629 	.word	0x08005629
 80055f4:	08005611 	.word	0x08005611
 80055f8:	08005629 	.word	0x08005629
 80055fc:	08005629 	.word	0x08005629
 8005600:	08005629 	.word	0x08005629
 8005604:	08005621 	.word	0x08005621
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560e:	e0d8      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005610:	2302      	movs	r3, #2
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005616:	e0d4      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005618:	2304      	movs	r3, #4
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561e:	e0d0      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005620:	2308      	movs	r3, #8
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005626:	e0cc      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005628:	2310      	movs	r3, #16
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562e:	e0c8      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a5e      	ldr	r2, [pc, #376]	; (80057b0 <UART_SetConfig+0x2d4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d125      	bne.n	8005686 <UART_SetConfig+0x1aa>
 800563a:	4b5b      	ldr	r3, [pc, #364]	; (80057a8 <UART_SetConfig+0x2cc>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005640:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005644:	2b30      	cmp	r3, #48	; 0x30
 8005646:	d016      	beq.n	8005676 <UART_SetConfig+0x19a>
 8005648:	2b30      	cmp	r3, #48	; 0x30
 800564a:	d818      	bhi.n	800567e <UART_SetConfig+0x1a2>
 800564c:	2b20      	cmp	r3, #32
 800564e:	d00a      	beq.n	8005666 <UART_SetConfig+0x18a>
 8005650:	2b20      	cmp	r3, #32
 8005652:	d814      	bhi.n	800567e <UART_SetConfig+0x1a2>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <UART_SetConfig+0x182>
 8005658:	2b10      	cmp	r3, #16
 800565a:	d008      	beq.n	800566e <UART_SetConfig+0x192>
 800565c:	e00f      	b.n	800567e <UART_SetConfig+0x1a2>
 800565e:	2300      	movs	r3, #0
 8005660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005664:	e0ad      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005666:	2302      	movs	r3, #2
 8005668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566c:	e0a9      	b.n	80057c2 <UART_SetConfig+0x2e6>
 800566e:	2304      	movs	r3, #4
 8005670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005674:	e0a5      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005676:	2308      	movs	r3, #8
 8005678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567c:	e0a1      	b.n	80057c2 <UART_SetConfig+0x2e6>
 800567e:	2310      	movs	r3, #16
 8005680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005684:	e09d      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a4a      	ldr	r2, [pc, #296]	; (80057b4 <UART_SetConfig+0x2d8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d125      	bne.n	80056dc <UART_SetConfig+0x200>
 8005690:	4b45      	ldr	r3, [pc, #276]	; (80057a8 <UART_SetConfig+0x2cc>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800569a:	2bc0      	cmp	r3, #192	; 0xc0
 800569c:	d016      	beq.n	80056cc <UART_SetConfig+0x1f0>
 800569e:	2bc0      	cmp	r3, #192	; 0xc0
 80056a0:	d818      	bhi.n	80056d4 <UART_SetConfig+0x1f8>
 80056a2:	2b80      	cmp	r3, #128	; 0x80
 80056a4:	d00a      	beq.n	80056bc <UART_SetConfig+0x1e0>
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d814      	bhi.n	80056d4 <UART_SetConfig+0x1f8>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <UART_SetConfig+0x1d8>
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d008      	beq.n	80056c4 <UART_SetConfig+0x1e8>
 80056b2:	e00f      	b.n	80056d4 <UART_SetConfig+0x1f8>
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ba:	e082      	b.n	80057c2 <UART_SetConfig+0x2e6>
 80056bc:	2302      	movs	r3, #2
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c2:	e07e      	b.n	80057c2 <UART_SetConfig+0x2e6>
 80056c4:	2304      	movs	r3, #4
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ca:	e07a      	b.n	80057c2 <UART_SetConfig+0x2e6>
 80056cc:	2308      	movs	r3, #8
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d2:	e076      	b.n	80057c2 <UART_SetConfig+0x2e6>
 80056d4:	2310      	movs	r3, #16
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056da:	e072      	b.n	80057c2 <UART_SetConfig+0x2e6>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a35      	ldr	r2, [pc, #212]	; (80057b8 <UART_SetConfig+0x2dc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d12a      	bne.n	800573c <UART_SetConfig+0x260>
 80056e6:	4b30      	ldr	r3, [pc, #192]	; (80057a8 <UART_SetConfig+0x2cc>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f4:	d01a      	beq.n	800572c <UART_SetConfig+0x250>
 80056f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056fa:	d81b      	bhi.n	8005734 <UART_SetConfig+0x258>
 80056fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005700:	d00c      	beq.n	800571c <UART_SetConfig+0x240>
 8005702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005706:	d815      	bhi.n	8005734 <UART_SetConfig+0x258>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <UART_SetConfig+0x238>
 800570c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005710:	d008      	beq.n	8005724 <UART_SetConfig+0x248>
 8005712:	e00f      	b.n	8005734 <UART_SetConfig+0x258>
 8005714:	2300      	movs	r3, #0
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571a:	e052      	b.n	80057c2 <UART_SetConfig+0x2e6>
 800571c:	2302      	movs	r3, #2
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005722:	e04e      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572a:	e04a      	b.n	80057c2 <UART_SetConfig+0x2e6>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005732:	e046      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573a:	e042      	b.n	80057c2 <UART_SetConfig+0x2e6>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a17      	ldr	r2, [pc, #92]	; (80057a0 <UART_SetConfig+0x2c4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d13a      	bne.n	80057bc <UART_SetConfig+0x2e0>
 8005746:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <UART_SetConfig+0x2cc>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005754:	d01a      	beq.n	800578c <UART_SetConfig+0x2b0>
 8005756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800575a:	d81b      	bhi.n	8005794 <UART_SetConfig+0x2b8>
 800575c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005760:	d00c      	beq.n	800577c <UART_SetConfig+0x2a0>
 8005762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005766:	d815      	bhi.n	8005794 <UART_SetConfig+0x2b8>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <UART_SetConfig+0x298>
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d008      	beq.n	8005784 <UART_SetConfig+0x2a8>
 8005772:	e00f      	b.n	8005794 <UART_SetConfig+0x2b8>
 8005774:	2300      	movs	r3, #0
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577a:	e022      	b.n	80057c2 <UART_SetConfig+0x2e6>
 800577c:	2302      	movs	r3, #2
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005782:	e01e      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005784:	2304      	movs	r3, #4
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578a:	e01a      	b.n	80057c2 <UART_SetConfig+0x2e6>
 800578c:	2308      	movs	r3, #8
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005792:	e016      	b.n	80057c2 <UART_SetConfig+0x2e6>
 8005794:	2310      	movs	r3, #16
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579a:	e012      	b.n	80057c2 <UART_SetConfig+0x2e6>
 800579c:	efff69f3 	.word	0xefff69f3
 80057a0:	40008000 	.word	0x40008000
 80057a4:	40013800 	.word	0x40013800
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40004400 	.word	0x40004400
 80057b0:	40004800 	.word	0x40004800
 80057b4:	40004c00 	.word	0x40004c00
 80057b8:	40005000 	.word	0x40005000
 80057bc:	2310      	movs	r3, #16
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a9f      	ldr	r2, [pc, #636]	; (8005a44 <UART_SetConfig+0x568>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d17a      	bne.n	80058c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d824      	bhi.n	800581e <UART_SetConfig+0x342>
 80057d4:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <UART_SetConfig+0x300>)
 80057d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057da:	bf00      	nop
 80057dc:	08005801 	.word	0x08005801
 80057e0:	0800581f 	.word	0x0800581f
 80057e4:	08005809 	.word	0x08005809
 80057e8:	0800581f 	.word	0x0800581f
 80057ec:	0800580f 	.word	0x0800580f
 80057f0:	0800581f 	.word	0x0800581f
 80057f4:	0800581f 	.word	0x0800581f
 80057f8:	0800581f 	.word	0x0800581f
 80057fc:	08005817 	.word	0x08005817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005800:	f7fe ff8e 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 8005804:	61f8      	str	r0, [r7, #28]
        break;
 8005806:	e010      	b.n	800582a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005808:	4b8f      	ldr	r3, [pc, #572]	; (8005a48 <UART_SetConfig+0x56c>)
 800580a:	61fb      	str	r3, [r7, #28]
        break;
 800580c:	e00d      	b.n	800582a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800580e:	f7fe feef 	bl	80045f0 <HAL_RCC_GetSysClockFreq>
 8005812:	61f8      	str	r0, [r7, #28]
        break;
 8005814:	e009      	b.n	800582a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581a:	61fb      	str	r3, [r7, #28]
        break;
 800581c:	e005      	b.n	800582a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005828:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80fb 	beq.w	8005a28 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4413      	add	r3, r2
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	429a      	cmp	r2, r3
 8005840:	d305      	bcc.n	800584e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	429a      	cmp	r2, r3
 800584c:	d903      	bls.n	8005856 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005854:	e0e8      	b.n	8005a28 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2200      	movs	r2, #0
 800585a:	461c      	mov	r4, r3
 800585c:	4615      	mov	r5, r2
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	022b      	lsls	r3, r5, #8
 8005868:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800586c:	0222      	lsls	r2, r4, #8
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	6849      	ldr	r1, [r1, #4]
 8005872:	0849      	lsrs	r1, r1, #1
 8005874:	2000      	movs	r0, #0
 8005876:	4688      	mov	r8, r1
 8005878:	4681      	mov	r9, r0
 800587a:	eb12 0a08 	adds.w	sl, r2, r8
 800587e:	eb43 0b09 	adc.w	fp, r3, r9
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	603b      	str	r3, [r7, #0]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005890:	4650      	mov	r0, sl
 8005892:	4659      	mov	r1, fp
 8005894:	f7fa fed0 	bl	8000638 <__aeabi_uldivmod>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4613      	mov	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a6:	d308      	bcc.n	80058ba <UART_SetConfig+0x3de>
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ae:	d204      	bcs.n	80058ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	60da      	str	r2, [r3, #12]
 80058b8:	e0b6      	b.n	8005a28 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058c0:	e0b2      	b.n	8005a28 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ca:	d15e      	bne.n	800598a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d828      	bhi.n	8005926 <UART_SetConfig+0x44a>
 80058d4:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <UART_SetConfig+0x400>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	08005901 	.word	0x08005901
 80058e0:	08005909 	.word	0x08005909
 80058e4:	08005911 	.word	0x08005911
 80058e8:	08005927 	.word	0x08005927
 80058ec:	08005917 	.word	0x08005917
 80058f0:	08005927 	.word	0x08005927
 80058f4:	08005927 	.word	0x08005927
 80058f8:	08005927 	.word	0x08005927
 80058fc:	0800591f 	.word	0x0800591f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005900:	f7fe ff0e 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 8005904:	61f8      	str	r0, [r7, #28]
        break;
 8005906:	e014      	b.n	8005932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005908:	f7fe ff20 	bl	800474c <HAL_RCC_GetPCLK2Freq>
 800590c:	61f8      	str	r0, [r7, #28]
        break;
 800590e:	e010      	b.n	8005932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005910:	4b4d      	ldr	r3, [pc, #308]	; (8005a48 <UART_SetConfig+0x56c>)
 8005912:	61fb      	str	r3, [r7, #28]
        break;
 8005914:	e00d      	b.n	8005932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005916:	f7fe fe6b 	bl	80045f0 <HAL_RCC_GetSysClockFreq>
 800591a:	61f8      	str	r0, [r7, #28]
        break;
 800591c:	e009      	b.n	8005932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800591e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005922:	61fb      	str	r3, [r7, #28]
        break;
 8005924:	e005      	b.n	8005932 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d077      	beq.n	8005a28 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	005a      	lsls	r2, r3, #1
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	085b      	lsrs	r3, r3, #1
 8005942:	441a      	add	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b0f      	cmp	r3, #15
 8005952:	d916      	bls.n	8005982 <UART_SetConfig+0x4a6>
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595a:	d212      	bcs.n	8005982 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f023 030f 	bic.w	r3, r3, #15
 8005964:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	b29b      	uxth	r3, r3
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	b29a      	uxth	r2, r3
 8005972:	8afb      	ldrh	r3, [r7, #22]
 8005974:	4313      	orrs	r3, r2
 8005976:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	8afa      	ldrh	r2, [r7, #22]
 800597e:	60da      	str	r2, [r3, #12]
 8005980:	e052      	b.n	8005a28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005988:	e04e      	b.n	8005a28 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800598a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800598e:	2b08      	cmp	r3, #8
 8005990:	d827      	bhi.n	80059e2 <UART_SetConfig+0x506>
 8005992:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <UART_SetConfig+0x4bc>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	080059bd 	.word	0x080059bd
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059cd 	.word	0x080059cd
 80059a4:	080059e3 	.word	0x080059e3
 80059a8:	080059d3 	.word	0x080059d3
 80059ac:	080059e3 	.word	0x080059e3
 80059b0:	080059e3 	.word	0x080059e3
 80059b4:	080059e3 	.word	0x080059e3
 80059b8:	080059db 	.word	0x080059db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059bc:	f7fe feb0 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 80059c0:	61f8      	str	r0, [r7, #28]
        break;
 80059c2:	e014      	b.n	80059ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c4:	f7fe fec2 	bl	800474c <HAL_RCC_GetPCLK2Freq>
 80059c8:	61f8      	str	r0, [r7, #28]
        break;
 80059ca:	e010      	b.n	80059ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059cc:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <UART_SetConfig+0x56c>)
 80059ce:	61fb      	str	r3, [r7, #28]
        break;
 80059d0:	e00d      	b.n	80059ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d2:	f7fe fe0d 	bl	80045f0 <HAL_RCC_GetSysClockFreq>
 80059d6:	61f8      	str	r0, [r7, #28]
        break;
 80059d8:	e009      	b.n	80059ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059de:	61fb      	str	r3, [r7, #28]
        break;
 80059e0:	e005      	b.n	80059ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059ec:	bf00      	nop
    }

    if (pclk != 0U)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d019      	beq.n	8005a28 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	085a      	lsrs	r2, r3, #1
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	441a      	add	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b0f      	cmp	r3, #15
 8005a0c:	d909      	bls.n	8005a22 <UART_SetConfig+0x546>
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a14:	d205      	bcs.n	8005a22 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60da      	str	r2, [r3, #12]
 8005a20:	e002      	b.n	8005a28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3728      	adds	r7, #40	; 0x28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a42:	bf00      	nop
 8005a44:	40008000 	.word	0x40008000
 8005a48:	00f42400 	.word	0x00f42400

08005a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	f003 0310 	and.w	r3, r3, #16
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01a      	beq.n	8005b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b4a:	d10a      	bne.n	8005b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ba0:	f7fc fa70 	bl	8002084 <HAL_GetTick>
 8005ba4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d10e      	bne.n	8005bd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f82d 	bl	8005c22 <UART_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e023      	b.n	8005c1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d10e      	bne.n	8005bfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f817 	bl	8005c22 <UART_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e00d      	b.n	8005c1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b09c      	sub	sp, #112	; 0x70
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c32:	e0a5      	b.n	8005d80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	f000 80a1 	beq.w	8005d80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3e:	f7fc fa21 	bl	8002084 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d302      	bcc.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d13e      	bne.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c68:	667b      	str	r3, [r7, #100]	; 0x64
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e6      	bne.n	8005c54 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ca6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ca8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e067      	b.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d04f      	beq.n	8005d80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cee:	d147      	bne.n	8005d80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cf8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e6      	bne.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3308      	adds	r3, #8
 8005d4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d4c:	623a      	str	r2, [r7, #32]
 8005d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	69f9      	ldr	r1, [r7, #28]
 8005d52:	6a3a      	ldr	r2, [r7, #32]
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2220      	movs	r2, #32
 8005d64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e010      	b.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69da      	ldr	r2, [r3, #28]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	bf0c      	ite	eq
 8005d90:	2301      	moveq	r3, #1
 8005d92:	2300      	movne	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	f43f af4a 	beq.w	8005c34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3770      	adds	r7, #112	; 0x70
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005daa:	b084      	sub	sp, #16
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	f107 001c 	add.w	r0, r7, #28
 8005db8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fa6f 	bl	80062ac <USB_CoreReset>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d106      	bne.n	8005de6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38
 8005de4:	e005      	b.n	8005df2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dfe:	b004      	add	sp, #16
 8005e00:	4770      	bx	lr

08005e02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f023 0201 	bic.w	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d115      	bne.n	8005e72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e52:	2001      	movs	r0, #1
 8005e54:	f7fc f922 	bl	800209c <HAL_Delay>
      ms++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa16 	bl	8006290 <USB_GetMode>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d01e      	beq.n	8005ea8 <USB_SetCurrentMode+0x84>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b31      	cmp	r3, #49	; 0x31
 8005e6e:	d9f0      	bls.n	8005e52 <USB_SetCurrentMode+0x2e>
 8005e70:	e01a      	b.n	8005ea8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d115      	bne.n	8005ea4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e84:	2001      	movs	r0, #1
 8005e86:	f7fc f909 	bl	800209c <HAL_Delay>
      ms++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f9fd 	bl	8006290 <USB_GetMode>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <USB_SetCurrentMode+0x84>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b31      	cmp	r3, #49	; 0x31
 8005ea0:	d9f0      	bls.n	8005e84 <USB_SetCurrentMode+0x60>
 8005ea2:	e001      	b.n	8005ea8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e005      	b.n	8005eb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b32      	cmp	r3, #50	; 0x32
 8005eac:	d101      	bne.n	8005eb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b086      	sub	sp, #24
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	e009      	b.n	8005ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3340      	adds	r3, #64	; 0x40
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3301      	adds	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b0e      	cmp	r3, #14
 8005ef4:	d9f2      	bls.n	8005edc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11c      	bne.n	8005f36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0a:	f043 0302 	orr.w	r3, r3, #2
 8005f0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e005      	b.n	8005f42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f54:	4619      	mov	r1, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	680b      	ldr	r3, [r1, #0]
 8005f60:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f62:	2103      	movs	r1, #3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f959 	bl	800621c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f6a:	2110      	movs	r1, #16
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8f1 	bl	8006154 <USB_FlushTxFifo>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f91d 	bl	80061bc <USB_FlushRxFifo>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f92:	461a      	mov	r2, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005faa:	461a      	mov	r2, r3
 8005fac:	2300      	movs	r3, #0
 8005fae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	e043      	b.n	800603e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fcc:	d118      	bne.n	8006000 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e013      	b.n	8006012 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	e008      	b.n	8006012 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	461a      	mov	r2, r3
 800600e:	2300      	movs	r3, #0
 8006010:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601e:	461a      	mov	r2, r3
 8006020:	2300      	movs	r3, #0
 8006022:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006030:	461a      	mov	r2, r3
 8006032:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006036:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	3301      	adds	r3, #1
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	429a      	cmp	r2, r3
 8006044:	d3b7      	bcc.n	8005fb6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	e043      	b.n	80060d4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800605e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006062:	d118      	bne.n	8006096 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006076:	461a      	mov	r2, r3
 8006078:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e013      	b.n	80060a8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	461a      	mov	r2, r3
 800608e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	e008      	b.n	80060a8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	461a      	mov	r2, r3
 80060a4:	2300      	movs	r3, #0
 80060a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b4:	461a      	mov	r2, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	461a      	mov	r2, r3
 80060c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	3301      	adds	r3, #1
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d3b7      	bcc.n	800604c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f043 0210 	orr.w	r2, r3, #16
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	4b10      	ldr	r3, [pc, #64]	; (8006150 <USB_DevInit+0x294>)
 8006110:	4313      	orrs	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	f043 0208 	orr.w	r2, r3, #8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d107      	bne.n	800613e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006136:	f043 0304 	orr.w	r3, r3, #4
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800614a:	b004      	add	sp, #16
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	803c3800 	.word	0x803c3800

08006154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3301      	adds	r3, #1
 8006166:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <USB_FlushTxFifo+0x64>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e01b      	b.n	80061ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	daf2      	bge.n	8006162 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	019b      	lsls	r3, r3, #6
 8006184:	f043 0220 	orr.w	r2, r3, #32
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3301      	adds	r3, #1
 8006190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a08      	ldr	r2, [pc, #32]	; (80061b8 <USB_FlushTxFifo+0x64>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d901      	bls.n	800619e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e006      	b.n	80061ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d0f0      	beq.n	800618c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	00030d40 	.word	0x00030d40

080061bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4a11      	ldr	r2, [pc, #68]	; (8006218 <USB_FlushRxFifo+0x5c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e018      	b.n	800620c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	daf2      	bge.n	80061c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2210      	movs	r2, #16
 80061ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3301      	adds	r3, #1
 80061f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a08      	ldr	r2, [pc, #32]	; (8006218 <USB_FlushRxFifo+0x5c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d901      	bls.n	80061fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e006      	b.n	800620c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b10      	cmp	r3, #16
 8006208:	d0f0      	beq.n	80061ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	00030d40 	.word	0x00030d40

0800621c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	68f9      	ldr	r1, [r7, #12]
 8006238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800623c:	4313      	orrs	r3, r2
 800623e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006268:	f023 0303 	bic.w	r3, r3, #3
 800626c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627c:	f043 0302 	orr.w	r3, r3, #2
 8006280:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	f003 0301 	and.w	r3, r3, #1
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4a13      	ldr	r2, [pc, #76]	; (8006310 <USB_CoreReset+0x64>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e01b      	b.n	8006302 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	daf2      	bge.n	80062b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f043 0201 	orr.w	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3301      	adds	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4a09      	ldr	r2, [pc, #36]	; (8006310 <USB_CoreReset+0x64>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d901      	bls.n	80062f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e006      	b.n	8006302 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d0f0      	beq.n	80062e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	00030d40 	.word	0x00030d40

08006314 <__errno>:
 8006314:	4b01      	ldr	r3, [pc, #4]	; (800631c <__errno+0x8>)
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	2000029c 	.word	0x2000029c

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4d0d      	ldr	r5, [pc, #52]	; (8006358 <__libc_init_array+0x38>)
 8006324:	4c0d      	ldr	r4, [pc, #52]	; (800635c <__libc_init_array+0x3c>)
 8006326:	1b64      	subs	r4, r4, r5
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	2600      	movs	r6, #0
 800632c:	42a6      	cmp	r6, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	4d0b      	ldr	r5, [pc, #44]	; (8006360 <__libc_init_array+0x40>)
 8006332:	4c0c      	ldr	r4, [pc, #48]	; (8006364 <__libc_init_array+0x44>)
 8006334:	f000 fcd4 	bl	8006ce0 <_init>
 8006338:	1b64      	subs	r4, r4, r5
 800633a:	10a4      	asrs	r4, r4, #2
 800633c:	2600      	movs	r6, #0
 800633e:	42a6      	cmp	r6, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f855 3b04 	ldr.w	r3, [r5], #4
 8006348:	4798      	blx	r3
 800634a:	3601      	adds	r6, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006352:	4798      	blx	r3
 8006354:	3601      	adds	r6, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	08006dac 	.word	0x08006dac
 800635c:	08006dac 	.word	0x08006dac
 8006360:	08006dac 	.word	0x08006dac
 8006364:	08006db0 	.word	0x08006db0

08006368 <memcpy>:
 8006368:	440a      	add	r2, r1
 800636a:	4291      	cmp	r1, r2
 800636c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006370:	d100      	bne.n	8006374 <memcpy+0xc>
 8006372:	4770      	bx	lr
 8006374:	b510      	push	{r4, lr}
 8006376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800637a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800637e:	4291      	cmp	r1, r2
 8006380:	d1f9      	bne.n	8006376 <memcpy+0xe>
 8006382:	bd10      	pop	{r4, pc}

08006384 <memset>:
 8006384:	4402      	add	r2, r0
 8006386:	4603      	mov	r3, r0
 8006388:	4293      	cmp	r3, r2
 800638a:	d100      	bne.n	800638e <memset+0xa>
 800638c:	4770      	bx	lr
 800638e:	f803 1b01 	strb.w	r1, [r3], #1
 8006392:	e7f9      	b.n	8006388 <memset+0x4>

08006394 <sniprintf>:
 8006394:	b40c      	push	{r2, r3}
 8006396:	b530      	push	{r4, r5, lr}
 8006398:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <sniprintf+0x64>)
 800639a:	1e0c      	subs	r4, r1, #0
 800639c:	681d      	ldr	r5, [r3, #0]
 800639e:	b09d      	sub	sp, #116	; 0x74
 80063a0:	da08      	bge.n	80063b4 <sniprintf+0x20>
 80063a2:	238b      	movs	r3, #139	; 0x8b
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	f04f 30ff 	mov.w	r0, #4294967295
 80063aa:	b01d      	add	sp, #116	; 0x74
 80063ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063b0:	b002      	add	sp, #8
 80063b2:	4770      	bx	lr
 80063b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80063b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80063bc:	bf14      	ite	ne
 80063be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80063c2:	4623      	moveq	r3, r4
 80063c4:	9304      	str	r3, [sp, #16]
 80063c6:	9307      	str	r3, [sp, #28]
 80063c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063cc:	9002      	str	r0, [sp, #8]
 80063ce:	9006      	str	r0, [sp, #24]
 80063d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80063d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063d6:	ab21      	add	r3, sp, #132	; 0x84
 80063d8:	a902      	add	r1, sp, #8
 80063da:	4628      	mov	r0, r5
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	f000 f869 	bl	80064b4 <_svfiprintf_r>
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	bfbc      	itt	lt
 80063e6:	238b      	movlt	r3, #139	; 0x8b
 80063e8:	602b      	strlt	r3, [r5, #0]
 80063ea:	2c00      	cmp	r4, #0
 80063ec:	d0dd      	beq.n	80063aa <sniprintf+0x16>
 80063ee:	9b02      	ldr	r3, [sp, #8]
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e7d9      	b.n	80063aa <sniprintf+0x16>
 80063f6:	bf00      	nop
 80063f8:	2000029c 	.word	0x2000029c

080063fc <__ssputs_r>:
 80063fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	688e      	ldr	r6, [r1, #8]
 8006402:	429e      	cmp	r6, r3
 8006404:	4682      	mov	sl, r0
 8006406:	460c      	mov	r4, r1
 8006408:	4690      	mov	r8, r2
 800640a:	461f      	mov	r7, r3
 800640c:	d838      	bhi.n	8006480 <__ssputs_r+0x84>
 800640e:	898a      	ldrh	r2, [r1, #12]
 8006410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006414:	d032      	beq.n	800647c <__ssputs_r+0x80>
 8006416:	6825      	ldr	r5, [r4, #0]
 8006418:	6909      	ldr	r1, [r1, #16]
 800641a:	eba5 0901 	sub.w	r9, r5, r1
 800641e:	6965      	ldr	r5, [r4, #20]
 8006420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006428:	3301      	adds	r3, #1
 800642a:	444b      	add	r3, r9
 800642c:	106d      	asrs	r5, r5, #1
 800642e:	429d      	cmp	r5, r3
 8006430:	bf38      	it	cc
 8006432:	461d      	movcc	r5, r3
 8006434:	0553      	lsls	r3, r2, #21
 8006436:	d531      	bpl.n	800649c <__ssputs_r+0xa0>
 8006438:	4629      	mov	r1, r5
 800643a:	f000 fb55 	bl	8006ae8 <_malloc_r>
 800643e:	4606      	mov	r6, r0
 8006440:	b950      	cbnz	r0, 8006458 <__ssputs_r+0x5c>
 8006442:	230c      	movs	r3, #12
 8006444:	f8ca 3000 	str.w	r3, [sl]
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644e:	81a3      	strh	r3, [r4, #12]
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	6921      	ldr	r1, [r4, #16]
 800645a:	464a      	mov	r2, r9
 800645c:	f7ff ff84 	bl	8006368 <memcpy>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	6126      	str	r6, [r4, #16]
 800646e:	6165      	str	r5, [r4, #20]
 8006470:	444e      	add	r6, r9
 8006472:	eba5 0509 	sub.w	r5, r5, r9
 8006476:	6026      	str	r6, [r4, #0]
 8006478:	60a5      	str	r5, [r4, #8]
 800647a:	463e      	mov	r6, r7
 800647c:	42be      	cmp	r6, r7
 800647e:	d900      	bls.n	8006482 <__ssputs_r+0x86>
 8006480:	463e      	mov	r6, r7
 8006482:	6820      	ldr	r0, [r4, #0]
 8006484:	4632      	mov	r2, r6
 8006486:	4641      	mov	r1, r8
 8006488:	f000 faa8 	bl	80069dc <memmove>
 800648c:	68a3      	ldr	r3, [r4, #8]
 800648e:	1b9b      	subs	r3, r3, r6
 8006490:	60a3      	str	r3, [r4, #8]
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	4433      	add	r3, r6
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	2000      	movs	r0, #0
 800649a:	e7db      	b.n	8006454 <__ssputs_r+0x58>
 800649c:	462a      	mov	r2, r5
 800649e:	f000 fb97 	bl	8006bd0 <_realloc_r>
 80064a2:	4606      	mov	r6, r0
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d1e1      	bne.n	800646c <__ssputs_r+0x70>
 80064a8:	6921      	ldr	r1, [r4, #16]
 80064aa:	4650      	mov	r0, sl
 80064ac:	f000 fab0 	bl	8006a10 <_free_r>
 80064b0:	e7c7      	b.n	8006442 <__ssputs_r+0x46>
	...

080064b4 <_svfiprintf_r>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	4698      	mov	r8, r3
 80064ba:	898b      	ldrh	r3, [r1, #12]
 80064bc:	061b      	lsls	r3, r3, #24
 80064be:	b09d      	sub	sp, #116	; 0x74
 80064c0:	4607      	mov	r7, r0
 80064c2:	460d      	mov	r5, r1
 80064c4:	4614      	mov	r4, r2
 80064c6:	d50e      	bpl.n	80064e6 <_svfiprintf_r+0x32>
 80064c8:	690b      	ldr	r3, [r1, #16]
 80064ca:	b963      	cbnz	r3, 80064e6 <_svfiprintf_r+0x32>
 80064cc:	2140      	movs	r1, #64	; 0x40
 80064ce:	f000 fb0b 	bl	8006ae8 <_malloc_r>
 80064d2:	6028      	str	r0, [r5, #0]
 80064d4:	6128      	str	r0, [r5, #16]
 80064d6:	b920      	cbnz	r0, 80064e2 <_svfiprintf_r+0x2e>
 80064d8:	230c      	movs	r3, #12
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	f04f 30ff 	mov.w	r0, #4294967295
 80064e0:	e0d1      	b.n	8006686 <_svfiprintf_r+0x1d2>
 80064e2:	2340      	movs	r3, #64	; 0x40
 80064e4:	616b      	str	r3, [r5, #20]
 80064e6:	2300      	movs	r3, #0
 80064e8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ea:	2320      	movs	r3, #32
 80064ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064f4:	2330      	movs	r3, #48	; 0x30
 80064f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066a0 <_svfiprintf_r+0x1ec>
 80064fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064fe:	f04f 0901 	mov.w	r9, #1
 8006502:	4623      	mov	r3, r4
 8006504:	469a      	mov	sl, r3
 8006506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800650a:	b10a      	cbz	r2, 8006510 <_svfiprintf_r+0x5c>
 800650c:	2a25      	cmp	r2, #37	; 0x25
 800650e:	d1f9      	bne.n	8006504 <_svfiprintf_r+0x50>
 8006510:	ebba 0b04 	subs.w	fp, sl, r4
 8006514:	d00b      	beq.n	800652e <_svfiprintf_r+0x7a>
 8006516:	465b      	mov	r3, fp
 8006518:	4622      	mov	r2, r4
 800651a:	4629      	mov	r1, r5
 800651c:	4638      	mov	r0, r7
 800651e:	f7ff ff6d 	bl	80063fc <__ssputs_r>
 8006522:	3001      	adds	r0, #1
 8006524:	f000 80aa 	beq.w	800667c <_svfiprintf_r+0x1c8>
 8006528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800652a:	445a      	add	r2, fp
 800652c:	9209      	str	r2, [sp, #36]	; 0x24
 800652e:	f89a 3000 	ldrb.w	r3, [sl]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80a2 	beq.w	800667c <_svfiprintf_r+0x1c8>
 8006538:	2300      	movs	r3, #0
 800653a:	f04f 32ff 	mov.w	r2, #4294967295
 800653e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006542:	f10a 0a01 	add.w	sl, sl, #1
 8006546:	9304      	str	r3, [sp, #16]
 8006548:	9307      	str	r3, [sp, #28]
 800654a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800654e:	931a      	str	r3, [sp, #104]	; 0x68
 8006550:	4654      	mov	r4, sl
 8006552:	2205      	movs	r2, #5
 8006554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006558:	4851      	ldr	r0, [pc, #324]	; (80066a0 <_svfiprintf_r+0x1ec>)
 800655a:	f7f9 fe39 	bl	80001d0 <memchr>
 800655e:	9a04      	ldr	r2, [sp, #16]
 8006560:	b9d8      	cbnz	r0, 800659a <_svfiprintf_r+0xe6>
 8006562:	06d0      	lsls	r0, r2, #27
 8006564:	bf44      	itt	mi
 8006566:	2320      	movmi	r3, #32
 8006568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800656c:	0711      	lsls	r1, r2, #28
 800656e:	bf44      	itt	mi
 8006570:	232b      	movmi	r3, #43	; 0x2b
 8006572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006576:	f89a 3000 	ldrb.w	r3, [sl]
 800657a:	2b2a      	cmp	r3, #42	; 0x2a
 800657c:	d015      	beq.n	80065aa <_svfiprintf_r+0xf6>
 800657e:	9a07      	ldr	r2, [sp, #28]
 8006580:	4654      	mov	r4, sl
 8006582:	2000      	movs	r0, #0
 8006584:	f04f 0c0a 	mov.w	ip, #10
 8006588:	4621      	mov	r1, r4
 800658a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800658e:	3b30      	subs	r3, #48	; 0x30
 8006590:	2b09      	cmp	r3, #9
 8006592:	d94e      	bls.n	8006632 <_svfiprintf_r+0x17e>
 8006594:	b1b0      	cbz	r0, 80065c4 <_svfiprintf_r+0x110>
 8006596:	9207      	str	r2, [sp, #28]
 8006598:	e014      	b.n	80065c4 <_svfiprintf_r+0x110>
 800659a:	eba0 0308 	sub.w	r3, r0, r8
 800659e:	fa09 f303 	lsl.w	r3, r9, r3
 80065a2:	4313      	orrs	r3, r2
 80065a4:	9304      	str	r3, [sp, #16]
 80065a6:	46a2      	mov	sl, r4
 80065a8:	e7d2      	b.n	8006550 <_svfiprintf_r+0x9c>
 80065aa:	9b03      	ldr	r3, [sp, #12]
 80065ac:	1d19      	adds	r1, r3, #4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	9103      	str	r1, [sp, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bfbb      	ittet	lt
 80065b6:	425b      	neglt	r3, r3
 80065b8:	f042 0202 	orrlt.w	r2, r2, #2
 80065bc:	9307      	strge	r3, [sp, #28]
 80065be:	9307      	strlt	r3, [sp, #28]
 80065c0:	bfb8      	it	lt
 80065c2:	9204      	strlt	r2, [sp, #16]
 80065c4:	7823      	ldrb	r3, [r4, #0]
 80065c6:	2b2e      	cmp	r3, #46	; 0x2e
 80065c8:	d10c      	bne.n	80065e4 <_svfiprintf_r+0x130>
 80065ca:	7863      	ldrb	r3, [r4, #1]
 80065cc:	2b2a      	cmp	r3, #42	; 0x2a
 80065ce:	d135      	bne.n	800663c <_svfiprintf_r+0x188>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	1d1a      	adds	r2, r3, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	9203      	str	r2, [sp, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bfb8      	it	lt
 80065dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80065e0:	3402      	adds	r4, #2
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066b0 <_svfiprintf_r+0x1fc>
 80065e8:	7821      	ldrb	r1, [r4, #0]
 80065ea:	2203      	movs	r2, #3
 80065ec:	4650      	mov	r0, sl
 80065ee:	f7f9 fdef 	bl	80001d0 <memchr>
 80065f2:	b140      	cbz	r0, 8006606 <_svfiprintf_r+0x152>
 80065f4:	2340      	movs	r3, #64	; 0x40
 80065f6:	eba0 000a 	sub.w	r0, r0, sl
 80065fa:	fa03 f000 	lsl.w	r0, r3, r0
 80065fe:	9b04      	ldr	r3, [sp, #16]
 8006600:	4303      	orrs	r3, r0
 8006602:	3401      	adds	r4, #1
 8006604:	9304      	str	r3, [sp, #16]
 8006606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800660a:	4826      	ldr	r0, [pc, #152]	; (80066a4 <_svfiprintf_r+0x1f0>)
 800660c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006610:	2206      	movs	r2, #6
 8006612:	f7f9 fddd 	bl	80001d0 <memchr>
 8006616:	2800      	cmp	r0, #0
 8006618:	d038      	beq.n	800668c <_svfiprintf_r+0x1d8>
 800661a:	4b23      	ldr	r3, [pc, #140]	; (80066a8 <_svfiprintf_r+0x1f4>)
 800661c:	bb1b      	cbnz	r3, 8006666 <_svfiprintf_r+0x1b2>
 800661e:	9b03      	ldr	r3, [sp, #12]
 8006620:	3307      	adds	r3, #7
 8006622:	f023 0307 	bic.w	r3, r3, #7
 8006626:	3308      	adds	r3, #8
 8006628:	9303      	str	r3, [sp, #12]
 800662a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800662c:	4433      	add	r3, r6
 800662e:	9309      	str	r3, [sp, #36]	; 0x24
 8006630:	e767      	b.n	8006502 <_svfiprintf_r+0x4e>
 8006632:	fb0c 3202 	mla	r2, ip, r2, r3
 8006636:	460c      	mov	r4, r1
 8006638:	2001      	movs	r0, #1
 800663a:	e7a5      	b.n	8006588 <_svfiprintf_r+0xd4>
 800663c:	2300      	movs	r3, #0
 800663e:	3401      	adds	r4, #1
 8006640:	9305      	str	r3, [sp, #20]
 8006642:	4619      	mov	r1, r3
 8006644:	f04f 0c0a 	mov.w	ip, #10
 8006648:	4620      	mov	r0, r4
 800664a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800664e:	3a30      	subs	r2, #48	; 0x30
 8006650:	2a09      	cmp	r2, #9
 8006652:	d903      	bls.n	800665c <_svfiprintf_r+0x1a8>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0c5      	beq.n	80065e4 <_svfiprintf_r+0x130>
 8006658:	9105      	str	r1, [sp, #20]
 800665a:	e7c3      	b.n	80065e4 <_svfiprintf_r+0x130>
 800665c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006660:	4604      	mov	r4, r0
 8006662:	2301      	movs	r3, #1
 8006664:	e7f0      	b.n	8006648 <_svfiprintf_r+0x194>
 8006666:	ab03      	add	r3, sp, #12
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	462a      	mov	r2, r5
 800666c:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <_svfiprintf_r+0x1f8>)
 800666e:	a904      	add	r1, sp, #16
 8006670:	4638      	mov	r0, r7
 8006672:	f3af 8000 	nop.w
 8006676:	1c42      	adds	r2, r0, #1
 8006678:	4606      	mov	r6, r0
 800667a:	d1d6      	bne.n	800662a <_svfiprintf_r+0x176>
 800667c:	89ab      	ldrh	r3, [r5, #12]
 800667e:	065b      	lsls	r3, r3, #25
 8006680:	f53f af2c 	bmi.w	80064dc <_svfiprintf_r+0x28>
 8006684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006686:	b01d      	add	sp, #116	; 0x74
 8006688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800668c:	ab03      	add	r3, sp, #12
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	462a      	mov	r2, r5
 8006692:	4b06      	ldr	r3, [pc, #24]	; (80066ac <_svfiprintf_r+0x1f8>)
 8006694:	a904      	add	r1, sp, #16
 8006696:	4638      	mov	r0, r7
 8006698:	f000 f87a 	bl	8006790 <_printf_i>
 800669c:	e7eb      	b.n	8006676 <_svfiprintf_r+0x1c2>
 800669e:	bf00      	nop
 80066a0:	08006d70 	.word	0x08006d70
 80066a4:	08006d7a 	.word	0x08006d7a
 80066a8:	00000000 	.word	0x00000000
 80066ac:	080063fd 	.word	0x080063fd
 80066b0:	08006d76 	.word	0x08006d76

080066b4 <_printf_common>:
 80066b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b8:	4616      	mov	r6, r2
 80066ba:	4699      	mov	r9, r3
 80066bc:	688a      	ldr	r2, [r1, #8]
 80066be:	690b      	ldr	r3, [r1, #16]
 80066c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066c4:	4293      	cmp	r3, r2
 80066c6:	bfb8      	it	lt
 80066c8:	4613      	movlt	r3, r2
 80066ca:	6033      	str	r3, [r6, #0]
 80066cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066d0:	4607      	mov	r7, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	b10a      	cbz	r2, 80066da <_printf_common+0x26>
 80066d6:	3301      	adds	r3, #1
 80066d8:	6033      	str	r3, [r6, #0]
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	0699      	lsls	r1, r3, #26
 80066de:	bf42      	ittt	mi
 80066e0:	6833      	ldrmi	r3, [r6, #0]
 80066e2:	3302      	addmi	r3, #2
 80066e4:	6033      	strmi	r3, [r6, #0]
 80066e6:	6825      	ldr	r5, [r4, #0]
 80066e8:	f015 0506 	ands.w	r5, r5, #6
 80066ec:	d106      	bne.n	80066fc <_printf_common+0x48>
 80066ee:	f104 0a19 	add.w	sl, r4, #25
 80066f2:	68e3      	ldr	r3, [r4, #12]
 80066f4:	6832      	ldr	r2, [r6, #0]
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dc26      	bgt.n	800674a <_printf_common+0x96>
 80066fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006700:	1e13      	subs	r3, r2, #0
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	bf18      	it	ne
 8006706:	2301      	movne	r3, #1
 8006708:	0692      	lsls	r2, r2, #26
 800670a:	d42b      	bmi.n	8006764 <_printf_common+0xb0>
 800670c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006710:	4649      	mov	r1, r9
 8006712:	4638      	mov	r0, r7
 8006714:	47c0      	blx	r8
 8006716:	3001      	adds	r0, #1
 8006718:	d01e      	beq.n	8006758 <_printf_common+0xa4>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	68e5      	ldr	r5, [r4, #12]
 800671e:	6832      	ldr	r2, [r6, #0]
 8006720:	f003 0306 	and.w	r3, r3, #6
 8006724:	2b04      	cmp	r3, #4
 8006726:	bf08      	it	eq
 8006728:	1aad      	subeq	r5, r5, r2
 800672a:	68a3      	ldr	r3, [r4, #8]
 800672c:	6922      	ldr	r2, [r4, #16]
 800672e:	bf0c      	ite	eq
 8006730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006734:	2500      	movne	r5, #0
 8006736:	4293      	cmp	r3, r2
 8006738:	bfc4      	itt	gt
 800673a:	1a9b      	subgt	r3, r3, r2
 800673c:	18ed      	addgt	r5, r5, r3
 800673e:	2600      	movs	r6, #0
 8006740:	341a      	adds	r4, #26
 8006742:	42b5      	cmp	r5, r6
 8006744:	d11a      	bne.n	800677c <_printf_common+0xc8>
 8006746:	2000      	movs	r0, #0
 8006748:	e008      	b.n	800675c <_printf_common+0xa8>
 800674a:	2301      	movs	r3, #1
 800674c:	4652      	mov	r2, sl
 800674e:	4649      	mov	r1, r9
 8006750:	4638      	mov	r0, r7
 8006752:	47c0      	blx	r8
 8006754:	3001      	adds	r0, #1
 8006756:	d103      	bne.n	8006760 <_printf_common+0xac>
 8006758:	f04f 30ff 	mov.w	r0, #4294967295
 800675c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006760:	3501      	adds	r5, #1
 8006762:	e7c6      	b.n	80066f2 <_printf_common+0x3e>
 8006764:	18e1      	adds	r1, r4, r3
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	2030      	movs	r0, #48	; 0x30
 800676a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800676e:	4422      	add	r2, r4
 8006770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006778:	3302      	adds	r3, #2
 800677a:	e7c7      	b.n	800670c <_printf_common+0x58>
 800677c:	2301      	movs	r3, #1
 800677e:	4622      	mov	r2, r4
 8006780:	4649      	mov	r1, r9
 8006782:	4638      	mov	r0, r7
 8006784:	47c0      	blx	r8
 8006786:	3001      	adds	r0, #1
 8006788:	d0e6      	beq.n	8006758 <_printf_common+0xa4>
 800678a:	3601      	adds	r6, #1
 800678c:	e7d9      	b.n	8006742 <_printf_common+0x8e>
	...

08006790 <_printf_i>:
 8006790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006794:	7e0f      	ldrb	r7, [r1, #24]
 8006796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006798:	2f78      	cmp	r7, #120	; 0x78
 800679a:	4691      	mov	r9, r2
 800679c:	4680      	mov	r8, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	469a      	mov	sl, r3
 80067a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067a6:	d807      	bhi.n	80067b8 <_printf_i+0x28>
 80067a8:	2f62      	cmp	r7, #98	; 0x62
 80067aa:	d80a      	bhi.n	80067c2 <_printf_i+0x32>
 80067ac:	2f00      	cmp	r7, #0
 80067ae:	f000 80d8 	beq.w	8006962 <_printf_i+0x1d2>
 80067b2:	2f58      	cmp	r7, #88	; 0x58
 80067b4:	f000 80a3 	beq.w	80068fe <_printf_i+0x16e>
 80067b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067c0:	e03a      	b.n	8006838 <_printf_i+0xa8>
 80067c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067c6:	2b15      	cmp	r3, #21
 80067c8:	d8f6      	bhi.n	80067b8 <_printf_i+0x28>
 80067ca:	a101      	add	r1, pc, #4	; (adr r1, 80067d0 <_printf_i+0x40>)
 80067cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067d0:	08006829 	.word	0x08006829
 80067d4:	0800683d 	.word	0x0800683d
 80067d8:	080067b9 	.word	0x080067b9
 80067dc:	080067b9 	.word	0x080067b9
 80067e0:	080067b9 	.word	0x080067b9
 80067e4:	080067b9 	.word	0x080067b9
 80067e8:	0800683d 	.word	0x0800683d
 80067ec:	080067b9 	.word	0x080067b9
 80067f0:	080067b9 	.word	0x080067b9
 80067f4:	080067b9 	.word	0x080067b9
 80067f8:	080067b9 	.word	0x080067b9
 80067fc:	08006949 	.word	0x08006949
 8006800:	0800686d 	.word	0x0800686d
 8006804:	0800692b 	.word	0x0800692b
 8006808:	080067b9 	.word	0x080067b9
 800680c:	080067b9 	.word	0x080067b9
 8006810:	0800696b 	.word	0x0800696b
 8006814:	080067b9 	.word	0x080067b9
 8006818:	0800686d 	.word	0x0800686d
 800681c:	080067b9 	.word	0x080067b9
 8006820:	080067b9 	.word	0x080067b9
 8006824:	08006933 	.word	0x08006933
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	1d1a      	adds	r2, r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	602a      	str	r2, [r5, #0]
 8006830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006838:	2301      	movs	r3, #1
 800683a:	e0a3      	b.n	8006984 <_printf_i+0x1f4>
 800683c:	6820      	ldr	r0, [r4, #0]
 800683e:	6829      	ldr	r1, [r5, #0]
 8006840:	0606      	lsls	r6, r0, #24
 8006842:	f101 0304 	add.w	r3, r1, #4
 8006846:	d50a      	bpl.n	800685e <_printf_i+0xce>
 8006848:	680e      	ldr	r6, [r1, #0]
 800684a:	602b      	str	r3, [r5, #0]
 800684c:	2e00      	cmp	r6, #0
 800684e:	da03      	bge.n	8006858 <_printf_i+0xc8>
 8006850:	232d      	movs	r3, #45	; 0x2d
 8006852:	4276      	negs	r6, r6
 8006854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006858:	485e      	ldr	r0, [pc, #376]	; (80069d4 <_printf_i+0x244>)
 800685a:	230a      	movs	r3, #10
 800685c:	e019      	b.n	8006892 <_printf_i+0x102>
 800685e:	680e      	ldr	r6, [r1, #0]
 8006860:	602b      	str	r3, [r5, #0]
 8006862:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006866:	bf18      	it	ne
 8006868:	b236      	sxthne	r6, r6
 800686a:	e7ef      	b.n	800684c <_printf_i+0xbc>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	1d19      	adds	r1, r3, #4
 8006872:	6029      	str	r1, [r5, #0]
 8006874:	0601      	lsls	r1, r0, #24
 8006876:	d501      	bpl.n	800687c <_printf_i+0xec>
 8006878:	681e      	ldr	r6, [r3, #0]
 800687a:	e002      	b.n	8006882 <_printf_i+0xf2>
 800687c:	0646      	lsls	r6, r0, #25
 800687e:	d5fb      	bpl.n	8006878 <_printf_i+0xe8>
 8006880:	881e      	ldrh	r6, [r3, #0]
 8006882:	4854      	ldr	r0, [pc, #336]	; (80069d4 <_printf_i+0x244>)
 8006884:	2f6f      	cmp	r7, #111	; 0x6f
 8006886:	bf0c      	ite	eq
 8006888:	2308      	moveq	r3, #8
 800688a:	230a      	movne	r3, #10
 800688c:	2100      	movs	r1, #0
 800688e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006892:	6865      	ldr	r5, [r4, #4]
 8006894:	60a5      	str	r5, [r4, #8]
 8006896:	2d00      	cmp	r5, #0
 8006898:	bfa2      	ittt	ge
 800689a:	6821      	ldrge	r1, [r4, #0]
 800689c:	f021 0104 	bicge.w	r1, r1, #4
 80068a0:	6021      	strge	r1, [r4, #0]
 80068a2:	b90e      	cbnz	r6, 80068a8 <_printf_i+0x118>
 80068a4:	2d00      	cmp	r5, #0
 80068a6:	d04d      	beq.n	8006944 <_printf_i+0x1b4>
 80068a8:	4615      	mov	r5, r2
 80068aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80068ae:	fb03 6711 	mls	r7, r3, r1, r6
 80068b2:	5dc7      	ldrb	r7, [r0, r7]
 80068b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068b8:	4637      	mov	r7, r6
 80068ba:	42bb      	cmp	r3, r7
 80068bc:	460e      	mov	r6, r1
 80068be:	d9f4      	bls.n	80068aa <_printf_i+0x11a>
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d10b      	bne.n	80068dc <_printf_i+0x14c>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	07de      	lsls	r6, r3, #31
 80068c8:	d508      	bpl.n	80068dc <_printf_i+0x14c>
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	6861      	ldr	r1, [r4, #4]
 80068ce:	4299      	cmp	r1, r3
 80068d0:	bfde      	ittt	le
 80068d2:	2330      	movle	r3, #48	; 0x30
 80068d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068dc:	1b52      	subs	r2, r2, r5
 80068de:	6122      	str	r2, [r4, #16]
 80068e0:	f8cd a000 	str.w	sl, [sp]
 80068e4:	464b      	mov	r3, r9
 80068e6:	aa03      	add	r2, sp, #12
 80068e8:	4621      	mov	r1, r4
 80068ea:	4640      	mov	r0, r8
 80068ec:	f7ff fee2 	bl	80066b4 <_printf_common>
 80068f0:	3001      	adds	r0, #1
 80068f2:	d14c      	bne.n	800698e <_printf_i+0x1fe>
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
 80068f8:	b004      	add	sp, #16
 80068fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fe:	4835      	ldr	r0, [pc, #212]	; (80069d4 <_printf_i+0x244>)
 8006900:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006904:	6829      	ldr	r1, [r5, #0]
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	f851 6b04 	ldr.w	r6, [r1], #4
 800690c:	6029      	str	r1, [r5, #0]
 800690e:	061d      	lsls	r5, r3, #24
 8006910:	d514      	bpl.n	800693c <_printf_i+0x1ac>
 8006912:	07df      	lsls	r7, r3, #31
 8006914:	bf44      	itt	mi
 8006916:	f043 0320 	orrmi.w	r3, r3, #32
 800691a:	6023      	strmi	r3, [r4, #0]
 800691c:	b91e      	cbnz	r6, 8006926 <_printf_i+0x196>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	f023 0320 	bic.w	r3, r3, #32
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	2310      	movs	r3, #16
 8006928:	e7b0      	b.n	800688c <_printf_i+0xfc>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	f043 0320 	orr.w	r3, r3, #32
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	2378      	movs	r3, #120	; 0x78
 8006934:	4828      	ldr	r0, [pc, #160]	; (80069d8 <_printf_i+0x248>)
 8006936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800693a:	e7e3      	b.n	8006904 <_printf_i+0x174>
 800693c:	0659      	lsls	r1, r3, #25
 800693e:	bf48      	it	mi
 8006940:	b2b6      	uxthmi	r6, r6
 8006942:	e7e6      	b.n	8006912 <_printf_i+0x182>
 8006944:	4615      	mov	r5, r2
 8006946:	e7bb      	b.n	80068c0 <_printf_i+0x130>
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	6826      	ldr	r6, [r4, #0]
 800694c:	6961      	ldr	r1, [r4, #20]
 800694e:	1d18      	adds	r0, r3, #4
 8006950:	6028      	str	r0, [r5, #0]
 8006952:	0635      	lsls	r5, r6, #24
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	d501      	bpl.n	800695c <_printf_i+0x1cc>
 8006958:	6019      	str	r1, [r3, #0]
 800695a:	e002      	b.n	8006962 <_printf_i+0x1d2>
 800695c:	0670      	lsls	r0, r6, #25
 800695e:	d5fb      	bpl.n	8006958 <_printf_i+0x1c8>
 8006960:	8019      	strh	r1, [r3, #0]
 8006962:	2300      	movs	r3, #0
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	4615      	mov	r5, r2
 8006968:	e7ba      	b.n	80068e0 <_printf_i+0x150>
 800696a:	682b      	ldr	r3, [r5, #0]
 800696c:	1d1a      	adds	r2, r3, #4
 800696e:	602a      	str	r2, [r5, #0]
 8006970:	681d      	ldr	r5, [r3, #0]
 8006972:	6862      	ldr	r2, [r4, #4]
 8006974:	2100      	movs	r1, #0
 8006976:	4628      	mov	r0, r5
 8006978:	f7f9 fc2a 	bl	80001d0 <memchr>
 800697c:	b108      	cbz	r0, 8006982 <_printf_i+0x1f2>
 800697e:	1b40      	subs	r0, r0, r5
 8006980:	6060      	str	r0, [r4, #4]
 8006982:	6863      	ldr	r3, [r4, #4]
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	2300      	movs	r3, #0
 8006988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800698c:	e7a8      	b.n	80068e0 <_printf_i+0x150>
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	462a      	mov	r2, r5
 8006992:	4649      	mov	r1, r9
 8006994:	4640      	mov	r0, r8
 8006996:	47d0      	blx	sl
 8006998:	3001      	adds	r0, #1
 800699a:	d0ab      	beq.n	80068f4 <_printf_i+0x164>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	079b      	lsls	r3, r3, #30
 80069a0:	d413      	bmi.n	80069ca <_printf_i+0x23a>
 80069a2:	68e0      	ldr	r0, [r4, #12]
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	4298      	cmp	r0, r3
 80069a8:	bfb8      	it	lt
 80069aa:	4618      	movlt	r0, r3
 80069ac:	e7a4      	b.n	80068f8 <_printf_i+0x168>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4632      	mov	r2, r6
 80069b2:	4649      	mov	r1, r9
 80069b4:	4640      	mov	r0, r8
 80069b6:	47d0      	blx	sl
 80069b8:	3001      	adds	r0, #1
 80069ba:	d09b      	beq.n	80068f4 <_printf_i+0x164>
 80069bc:	3501      	adds	r5, #1
 80069be:	68e3      	ldr	r3, [r4, #12]
 80069c0:	9903      	ldr	r1, [sp, #12]
 80069c2:	1a5b      	subs	r3, r3, r1
 80069c4:	42ab      	cmp	r3, r5
 80069c6:	dcf2      	bgt.n	80069ae <_printf_i+0x21e>
 80069c8:	e7eb      	b.n	80069a2 <_printf_i+0x212>
 80069ca:	2500      	movs	r5, #0
 80069cc:	f104 0619 	add.w	r6, r4, #25
 80069d0:	e7f5      	b.n	80069be <_printf_i+0x22e>
 80069d2:	bf00      	nop
 80069d4:	08006d81 	.word	0x08006d81
 80069d8:	08006d92 	.word	0x08006d92

080069dc <memmove>:
 80069dc:	4288      	cmp	r0, r1
 80069de:	b510      	push	{r4, lr}
 80069e0:	eb01 0402 	add.w	r4, r1, r2
 80069e4:	d902      	bls.n	80069ec <memmove+0x10>
 80069e6:	4284      	cmp	r4, r0
 80069e8:	4623      	mov	r3, r4
 80069ea:	d807      	bhi.n	80069fc <memmove+0x20>
 80069ec:	1e43      	subs	r3, r0, #1
 80069ee:	42a1      	cmp	r1, r4
 80069f0:	d008      	beq.n	8006a04 <memmove+0x28>
 80069f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069fa:	e7f8      	b.n	80069ee <memmove+0x12>
 80069fc:	4402      	add	r2, r0
 80069fe:	4601      	mov	r1, r0
 8006a00:	428a      	cmp	r2, r1
 8006a02:	d100      	bne.n	8006a06 <memmove+0x2a>
 8006a04:	bd10      	pop	{r4, pc}
 8006a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a0e:	e7f7      	b.n	8006a00 <memmove+0x24>

08006a10 <_free_r>:
 8006a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a12:	2900      	cmp	r1, #0
 8006a14:	d044      	beq.n	8006aa0 <_free_r+0x90>
 8006a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1a:	9001      	str	r0, [sp, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a22:	bfb8      	it	lt
 8006a24:	18e4      	addlt	r4, r4, r3
 8006a26:	f000 f913 	bl	8006c50 <__malloc_lock>
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	; (8006aa4 <_free_r+0x94>)
 8006a2c:	9801      	ldr	r0, [sp, #4]
 8006a2e:	6813      	ldr	r3, [r2, #0]
 8006a30:	b933      	cbnz	r3, 8006a40 <_free_r+0x30>
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	6014      	str	r4, [r2, #0]
 8006a36:	b003      	add	sp, #12
 8006a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a3c:	f000 b90e 	b.w	8006c5c <__malloc_unlock>
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	d908      	bls.n	8006a56 <_free_r+0x46>
 8006a44:	6825      	ldr	r5, [r4, #0]
 8006a46:	1961      	adds	r1, r4, r5
 8006a48:	428b      	cmp	r3, r1
 8006a4a:	bf01      	itttt	eq
 8006a4c:	6819      	ldreq	r1, [r3, #0]
 8006a4e:	685b      	ldreq	r3, [r3, #4]
 8006a50:	1949      	addeq	r1, r1, r5
 8006a52:	6021      	streq	r1, [r4, #0]
 8006a54:	e7ed      	b.n	8006a32 <_free_r+0x22>
 8006a56:	461a      	mov	r2, r3
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	b10b      	cbz	r3, 8006a60 <_free_r+0x50>
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	d9fa      	bls.n	8006a56 <_free_r+0x46>
 8006a60:	6811      	ldr	r1, [r2, #0]
 8006a62:	1855      	adds	r5, r2, r1
 8006a64:	42a5      	cmp	r5, r4
 8006a66:	d10b      	bne.n	8006a80 <_free_r+0x70>
 8006a68:	6824      	ldr	r4, [r4, #0]
 8006a6a:	4421      	add	r1, r4
 8006a6c:	1854      	adds	r4, r2, r1
 8006a6e:	42a3      	cmp	r3, r4
 8006a70:	6011      	str	r1, [r2, #0]
 8006a72:	d1e0      	bne.n	8006a36 <_free_r+0x26>
 8006a74:	681c      	ldr	r4, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	6053      	str	r3, [r2, #4]
 8006a7a:	4421      	add	r1, r4
 8006a7c:	6011      	str	r1, [r2, #0]
 8006a7e:	e7da      	b.n	8006a36 <_free_r+0x26>
 8006a80:	d902      	bls.n	8006a88 <_free_r+0x78>
 8006a82:	230c      	movs	r3, #12
 8006a84:	6003      	str	r3, [r0, #0]
 8006a86:	e7d6      	b.n	8006a36 <_free_r+0x26>
 8006a88:	6825      	ldr	r5, [r4, #0]
 8006a8a:	1961      	adds	r1, r4, r5
 8006a8c:	428b      	cmp	r3, r1
 8006a8e:	bf04      	itt	eq
 8006a90:	6819      	ldreq	r1, [r3, #0]
 8006a92:	685b      	ldreq	r3, [r3, #4]
 8006a94:	6063      	str	r3, [r4, #4]
 8006a96:	bf04      	itt	eq
 8006a98:	1949      	addeq	r1, r1, r5
 8006a9a:	6021      	streq	r1, [r4, #0]
 8006a9c:	6054      	str	r4, [r2, #4]
 8006a9e:	e7ca      	b.n	8006a36 <_free_r+0x26>
 8006aa0:	b003      	add	sp, #12
 8006aa2:	bd30      	pop	{r4, r5, pc}
 8006aa4:	20000b5c 	.word	0x20000b5c

08006aa8 <sbrk_aligned>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	4e0e      	ldr	r6, [pc, #56]	; (8006ae4 <sbrk_aligned+0x3c>)
 8006aac:	460c      	mov	r4, r1
 8006aae:	6831      	ldr	r1, [r6, #0]
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	b911      	cbnz	r1, 8006aba <sbrk_aligned+0x12>
 8006ab4:	f000 f8bc 	bl	8006c30 <_sbrk_r>
 8006ab8:	6030      	str	r0, [r6, #0]
 8006aba:	4621      	mov	r1, r4
 8006abc:	4628      	mov	r0, r5
 8006abe:	f000 f8b7 	bl	8006c30 <_sbrk_r>
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	d00a      	beq.n	8006adc <sbrk_aligned+0x34>
 8006ac6:	1cc4      	adds	r4, r0, #3
 8006ac8:	f024 0403 	bic.w	r4, r4, #3
 8006acc:	42a0      	cmp	r0, r4
 8006ace:	d007      	beq.n	8006ae0 <sbrk_aligned+0x38>
 8006ad0:	1a21      	subs	r1, r4, r0
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 f8ac 	bl	8006c30 <_sbrk_r>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d101      	bne.n	8006ae0 <sbrk_aligned+0x38>
 8006adc:	f04f 34ff 	mov.w	r4, #4294967295
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	20000b60 	.word	0x20000b60

08006ae8 <_malloc_r>:
 8006ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aec:	1ccd      	adds	r5, r1, #3
 8006aee:	f025 0503 	bic.w	r5, r5, #3
 8006af2:	3508      	adds	r5, #8
 8006af4:	2d0c      	cmp	r5, #12
 8006af6:	bf38      	it	cc
 8006af8:	250c      	movcc	r5, #12
 8006afa:	2d00      	cmp	r5, #0
 8006afc:	4607      	mov	r7, r0
 8006afe:	db01      	blt.n	8006b04 <_malloc_r+0x1c>
 8006b00:	42a9      	cmp	r1, r5
 8006b02:	d905      	bls.n	8006b10 <_malloc_r+0x28>
 8006b04:	230c      	movs	r3, #12
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	2600      	movs	r6, #0
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	4e2e      	ldr	r6, [pc, #184]	; (8006bcc <_malloc_r+0xe4>)
 8006b12:	f000 f89d 	bl	8006c50 <__malloc_lock>
 8006b16:	6833      	ldr	r3, [r6, #0]
 8006b18:	461c      	mov	r4, r3
 8006b1a:	bb34      	cbnz	r4, 8006b6a <_malloc_r+0x82>
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f7ff ffc2 	bl	8006aa8 <sbrk_aligned>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	4604      	mov	r4, r0
 8006b28:	d14d      	bne.n	8006bc6 <_malloc_r+0xde>
 8006b2a:	6834      	ldr	r4, [r6, #0]
 8006b2c:	4626      	mov	r6, r4
 8006b2e:	2e00      	cmp	r6, #0
 8006b30:	d140      	bne.n	8006bb4 <_malloc_r+0xcc>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	4631      	mov	r1, r6
 8006b36:	4638      	mov	r0, r7
 8006b38:	eb04 0803 	add.w	r8, r4, r3
 8006b3c:	f000 f878 	bl	8006c30 <_sbrk_r>
 8006b40:	4580      	cmp	r8, r0
 8006b42:	d13a      	bne.n	8006bba <_malloc_r+0xd2>
 8006b44:	6821      	ldr	r1, [r4, #0]
 8006b46:	3503      	adds	r5, #3
 8006b48:	1a6d      	subs	r5, r5, r1
 8006b4a:	f025 0503 	bic.w	r5, r5, #3
 8006b4e:	3508      	adds	r5, #8
 8006b50:	2d0c      	cmp	r5, #12
 8006b52:	bf38      	it	cc
 8006b54:	250c      	movcc	r5, #12
 8006b56:	4629      	mov	r1, r5
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff ffa5 	bl	8006aa8 <sbrk_aligned>
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d02b      	beq.n	8006bba <_malloc_r+0xd2>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	442b      	add	r3, r5
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	e00e      	b.n	8006b88 <_malloc_r+0xa0>
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	1b52      	subs	r2, r2, r5
 8006b6e:	d41e      	bmi.n	8006bae <_malloc_r+0xc6>
 8006b70:	2a0b      	cmp	r2, #11
 8006b72:	d916      	bls.n	8006ba2 <_malloc_r+0xba>
 8006b74:	1961      	adds	r1, r4, r5
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	6025      	str	r5, [r4, #0]
 8006b7a:	bf18      	it	ne
 8006b7c:	6059      	strne	r1, [r3, #4]
 8006b7e:	6863      	ldr	r3, [r4, #4]
 8006b80:	bf08      	it	eq
 8006b82:	6031      	streq	r1, [r6, #0]
 8006b84:	5162      	str	r2, [r4, r5]
 8006b86:	604b      	str	r3, [r1, #4]
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f104 060b 	add.w	r6, r4, #11
 8006b8e:	f000 f865 	bl	8006c5c <__malloc_unlock>
 8006b92:	f026 0607 	bic.w	r6, r6, #7
 8006b96:	1d23      	adds	r3, r4, #4
 8006b98:	1af2      	subs	r2, r6, r3
 8006b9a:	d0b6      	beq.n	8006b0a <_malloc_r+0x22>
 8006b9c:	1b9b      	subs	r3, r3, r6
 8006b9e:	50a3      	str	r3, [r4, r2]
 8006ba0:	e7b3      	b.n	8006b0a <_malloc_r+0x22>
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	bf0c      	ite	eq
 8006ba8:	6032      	streq	r2, [r6, #0]
 8006baa:	605a      	strne	r2, [r3, #4]
 8006bac:	e7ec      	b.n	8006b88 <_malloc_r+0xa0>
 8006bae:	4623      	mov	r3, r4
 8006bb0:	6864      	ldr	r4, [r4, #4]
 8006bb2:	e7b2      	b.n	8006b1a <_malloc_r+0x32>
 8006bb4:	4634      	mov	r4, r6
 8006bb6:	6876      	ldr	r6, [r6, #4]
 8006bb8:	e7b9      	b.n	8006b2e <_malloc_r+0x46>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f000 f84c 	bl	8006c5c <__malloc_unlock>
 8006bc4:	e7a1      	b.n	8006b0a <_malloc_r+0x22>
 8006bc6:	6025      	str	r5, [r4, #0]
 8006bc8:	e7de      	b.n	8006b88 <_malloc_r+0xa0>
 8006bca:	bf00      	nop
 8006bcc:	20000b5c 	.word	0x20000b5c

08006bd0 <_realloc_r>:
 8006bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	460e      	mov	r6, r1
 8006bda:	b921      	cbnz	r1, 8006be6 <_realloc_r+0x16>
 8006bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006be0:	4611      	mov	r1, r2
 8006be2:	f7ff bf81 	b.w	8006ae8 <_malloc_r>
 8006be6:	b92a      	cbnz	r2, 8006bf4 <_realloc_r+0x24>
 8006be8:	f7ff ff12 	bl	8006a10 <_free_r>
 8006bec:	4625      	mov	r5, r4
 8006bee:	4628      	mov	r0, r5
 8006bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf4:	f000 f838 	bl	8006c68 <_malloc_usable_size_r>
 8006bf8:	4284      	cmp	r4, r0
 8006bfa:	4607      	mov	r7, r0
 8006bfc:	d802      	bhi.n	8006c04 <_realloc_r+0x34>
 8006bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c02:	d812      	bhi.n	8006c2a <_realloc_r+0x5a>
 8006c04:	4621      	mov	r1, r4
 8006c06:	4640      	mov	r0, r8
 8006c08:	f7ff ff6e 	bl	8006ae8 <_malloc_r>
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d0ed      	beq.n	8006bee <_realloc_r+0x1e>
 8006c12:	42bc      	cmp	r4, r7
 8006c14:	4622      	mov	r2, r4
 8006c16:	4631      	mov	r1, r6
 8006c18:	bf28      	it	cs
 8006c1a:	463a      	movcs	r2, r7
 8006c1c:	f7ff fba4 	bl	8006368 <memcpy>
 8006c20:	4631      	mov	r1, r6
 8006c22:	4640      	mov	r0, r8
 8006c24:	f7ff fef4 	bl	8006a10 <_free_r>
 8006c28:	e7e1      	b.n	8006bee <_realloc_r+0x1e>
 8006c2a:	4635      	mov	r5, r6
 8006c2c:	e7df      	b.n	8006bee <_realloc_r+0x1e>
	...

08006c30 <_sbrk_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d06      	ldr	r5, [pc, #24]	; (8006c4c <_sbrk_r+0x1c>)
 8006c34:	2300      	movs	r3, #0
 8006c36:	4604      	mov	r4, r0
 8006c38:	4608      	mov	r0, r1
 8006c3a:	602b      	str	r3, [r5, #0]
 8006c3c:	f7fa fe0e 	bl	800185c <_sbrk>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d102      	bne.n	8006c4a <_sbrk_r+0x1a>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	b103      	cbz	r3, 8006c4a <_sbrk_r+0x1a>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	20000b64 	.word	0x20000b64

08006c50 <__malloc_lock>:
 8006c50:	4801      	ldr	r0, [pc, #4]	; (8006c58 <__malloc_lock+0x8>)
 8006c52:	f000 b811 	b.w	8006c78 <__retarget_lock_acquire_recursive>
 8006c56:	bf00      	nop
 8006c58:	20000b68 	.word	0x20000b68

08006c5c <__malloc_unlock>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	; (8006c64 <__malloc_unlock+0x8>)
 8006c5e:	f000 b80c 	b.w	8006c7a <__retarget_lock_release_recursive>
 8006c62:	bf00      	nop
 8006c64:	20000b68 	.word	0x20000b68

08006c68 <_malloc_usable_size_r>:
 8006c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c6c:	1f18      	subs	r0, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bfbc      	itt	lt
 8006c72:	580b      	ldrlt	r3, [r1, r0]
 8006c74:	18c0      	addlt	r0, r0, r3
 8006c76:	4770      	bx	lr

08006c78 <__retarget_lock_acquire_recursive>:
 8006c78:	4770      	bx	lr

08006c7a <__retarget_lock_release_recursive>:
 8006c7a:	4770      	bx	lr

08006c7c <trunc>:
 8006c7c:	ec51 0b10 	vmov	r0, r1, d0
 8006c80:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006c84:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006c88:	2b13      	cmp	r3, #19
 8006c8a:	b5d0      	push	{r4, r6, r7, lr}
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	dc10      	bgt.n	8006cb2 <trunc+0x36>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bfa5      	ittet	ge
 8006c94:	4a11      	ldrge	r2, [pc, #68]	; (8006cdc <trunc+0x60>)
 8006c96:	fa42 f303 	asrge.w	r3, r2, r3
 8006c9a:	2100      	movlt	r1, #0
 8006c9c:	2100      	movge	r1, #0
 8006c9e:	bfb9      	ittee	lt
 8006ca0:	2000      	movlt	r0, #0
 8006ca2:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8006ca6:	2000      	movge	r0, #0
 8006ca8:	ea24 0103 	bicge.w	r1, r4, r3
 8006cac:	ec41 0b10 	vmov	d0, r0, r1
 8006cb0:	bdd0      	pop	{r4, r6, r7, pc}
 8006cb2:	2b33      	cmp	r3, #51	; 0x33
 8006cb4:	dd08      	ble.n	8006cc8 <trunc+0x4c>
 8006cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cba:	d1f7      	bne.n	8006cac <trunc+0x30>
 8006cbc:	ee10 2a10 	vmov	r2, s0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	f7f9 fadb 	bl	800027c <__adddf3>
 8006cc6:	e7f1      	b.n	8006cac <trunc+0x30>
 8006cc8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd0:	fa23 f202 	lsr.w	r2, r3, r2
 8006cd4:	ea20 0602 	bic.w	r6, r0, r2
 8006cd8:	4630      	mov	r0, r6
 8006cda:	e7e7      	b.n	8006cac <trunc+0x30>
 8006cdc:	000fffff 	.word	0x000fffff

08006ce0 <_init>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	bf00      	nop
 8006ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce6:	bc08      	pop	{r3}
 8006ce8:	469e      	mov	lr, r3
 8006cea:	4770      	bx	lr

08006cec <_fini>:
 8006cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cee:	bf00      	nop
 8006cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf2:	bc08      	pop	{r3}
 8006cf4:	469e      	mov	lr, r3
 8006cf6:	4770      	bx	lr
