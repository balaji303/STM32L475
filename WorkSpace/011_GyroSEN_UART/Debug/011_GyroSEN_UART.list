
011_GyroSEN_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b34  08006b34  000202dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b3c  08006b3c  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b40  08006b40  00016b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08006b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  200002dc  08006e20  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  08006e20  00020b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a737  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003207  00000000  00000000  0003aa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  0003dc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  0003f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d96  00000000  00000000  00040918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c95  00000000  00000000  000696ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6c68  00000000  00000000  00083343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179fab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000672c  00000000  00000000  00179ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002dc 	.word	0x200002dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a80 	.word	0x08006a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	08006a80 	.word	0x08006a80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b974 	b.w	8000938 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468e      	mov	lr, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14d      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000676:	428a      	cmp	r2, r1
 8000678:	4694      	mov	ip, r2
 800067a:	d969      	bls.n	8000750 <__udivmoddi4+0xe8>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b152      	cbz	r2, 8000698 <__udivmoddi4+0x30>
 8000682:	fa01 f302 	lsl.w	r3, r1, r2
 8000686:	f1c2 0120 	rsb	r1, r2, #32
 800068a:	fa20 f101 	lsr.w	r1, r0, r1
 800068e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000692:	ea41 0e03 	orr.w	lr, r1, r3
 8000696:	4094      	lsls	r4, r2
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	0c21      	lsrs	r1, r4, #16
 800069e:	fbbe f6f8 	udiv	r6, lr, r8
 80006a2:	fa1f f78c 	uxth.w	r7, ip
 80006a6:	fb08 e316 	mls	r3, r8, r6, lr
 80006aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ae:	fb06 f107 	mul.w	r1, r6, r7
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80006be:	f080 811f 	bcs.w	8000900 <__udivmoddi4+0x298>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 811c 	bls.w	8000900 <__udivmoddi4+0x298>
 80006c8:	3e02      	subs	r6, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d4:	fb08 3310 	mls	r3, r8, r0, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb00 f707 	mul.w	r7, r0, r7
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	d90a      	bls.n	80006fa <__udivmoddi4+0x92>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ec:	f080 810a 	bcs.w	8000904 <__udivmoddi4+0x29c>
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	f240 8107 	bls.w	8000904 <__udivmoddi4+0x29c>
 80006f6:	4464      	add	r4, ip
 80006f8:	3802      	subs	r0, #2
 80006fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006fe:	1be4      	subs	r4, r4, r7
 8000700:	2600      	movs	r6, #0
 8000702:	b11d      	cbz	r5, 800070c <__udivmoddi4+0xa4>
 8000704:	40d4      	lsrs	r4, r2
 8000706:	2300      	movs	r3, #0
 8000708:	e9c5 4300 	strd	r4, r3, [r5]
 800070c:	4631      	mov	r1, r6
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0xc2>
 8000716:	2d00      	cmp	r5, #0
 8000718:	f000 80ef 	beq.w	80008fa <__udivmoddi4+0x292>
 800071c:	2600      	movs	r6, #0
 800071e:	e9c5 0100 	strd	r0, r1, [r5]
 8000722:	4630      	mov	r0, r6
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	fab3 f683 	clz	r6, r3
 800072e:	2e00      	cmp	r6, #0
 8000730:	d14a      	bne.n	80007c8 <__udivmoddi4+0x160>
 8000732:	428b      	cmp	r3, r1
 8000734:	d302      	bcc.n	800073c <__udivmoddi4+0xd4>
 8000736:	4282      	cmp	r2, r0
 8000738:	f200 80f9 	bhi.w	800092e <__udivmoddi4+0x2c6>
 800073c:	1a84      	subs	r4, r0, r2
 800073e:	eb61 0303 	sbc.w	r3, r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	469e      	mov	lr, r3
 8000746:	2d00      	cmp	r5, #0
 8000748:	d0e0      	beq.n	800070c <__udivmoddi4+0xa4>
 800074a:	e9c5 4e00 	strd	r4, lr, [r5]
 800074e:	e7dd      	b.n	800070c <__udivmoddi4+0xa4>
 8000750:	b902      	cbnz	r2, 8000754 <__udivmoddi4+0xec>
 8000752:	deff      	udf	#255	; 0xff
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	2a00      	cmp	r2, #0
 800075a:	f040 8092 	bne.w	8000882 <__udivmoddi4+0x21a>
 800075e:	eba1 010c 	sub.w	r1, r1, ip
 8000762:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000766:	fa1f fe8c 	uxth.w	lr, ip
 800076a:	2601      	movs	r6, #1
 800076c:	0c20      	lsrs	r0, r4, #16
 800076e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000772:	fb07 1113 	mls	r1, r7, r3, r1
 8000776:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800077a:	fb0e f003 	mul.w	r0, lr, r3
 800077e:	4288      	cmp	r0, r1
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x12c>
 8000782:	eb1c 0101 	adds.w	r1, ip, r1
 8000786:	f103 38ff 	add.w	r8, r3, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x12a>
 800078c:	4288      	cmp	r0, r1
 800078e:	f200 80cb 	bhi.w	8000928 <__udivmoddi4+0x2c0>
 8000792:	4643      	mov	r3, r8
 8000794:	1a09      	subs	r1, r1, r0
 8000796:	b2a4      	uxth	r4, r4
 8000798:	fbb1 f0f7 	udiv	r0, r1, r7
 800079c:	fb07 1110 	mls	r1, r7, r0, r1
 80007a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007a4:	fb0e fe00 	mul.w	lr, lr, r0
 80007a8:	45a6      	cmp	lr, r4
 80007aa:	d908      	bls.n	80007be <__udivmoddi4+0x156>
 80007ac:	eb1c 0404 	adds.w	r4, ip, r4
 80007b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007b4:	d202      	bcs.n	80007bc <__udivmoddi4+0x154>
 80007b6:	45a6      	cmp	lr, r4
 80007b8:	f200 80bb 	bhi.w	8000932 <__udivmoddi4+0x2ca>
 80007bc:	4608      	mov	r0, r1
 80007be:	eba4 040e 	sub.w	r4, r4, lr
 80007c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007c6:	e79c      	b.n	8000702 <__udivmoddi4+0x9a>
 80007c8:	f1c6 0720 	rsb	r7, r6, #32
 80007cc:	40b3      	lsls	r3, r6
 80007ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80007d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007d6:	fa20 f407 	lsr.w	r4, r0, r7
 80007da:	fa01 f306 	lsl.w	r3, r1, r6
 80007de:	431c      	orrs	r4, r3
 80007e0:	40f9      	lsrs	r1, r7
 80007e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007e6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ee:	0c20      	lsrs	r0, r4, #16
 80007f0:	fa1f fe8c 	uxth.w	lr, ip
 80007f4:	fb09 1118 	mls	r1, r9, r8, r1
 80007f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000800:	4288      	cmp	r0, r1
 8000802:	fa02 f206 	lsl.w	r2, r2, r6
 8000806:	d90b      	bls.n	8000820 <__udivmoddi4+0x1b8>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000810:	f080 8088 	bcs.w	8000924 <__udivmoddi4+0x2bc>
 8000814:	4288      	cmp	r0, r1
 8000816:	f240 8085 	bls.w	8000924 <__udivmoddi4+0x2bc>
 800081a:	f1a8 0802 	sub.w	r8, r8, #2
 800081e:	4461      	add	r1, ip
 8000820:	1a09      	subs	r1, r1, r0
 8000822:	b2a4      	uxth	r4, r4
 8000824:	fbb1 f0f9 	udiv	r0, r1, r9
 8000828:	fb09 1110 	mls	r1, r9, r0, r1
 800082c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000830:	fb00 fe0e 	mul.w	lr, r0, lr
 8000834:	458e      	cmp	lr, r1
 8000836:	d908      	bls.n	800084a <__udivmoddi4+0x1e2>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000840:	d26c      	bcs.n	800091c <__udivmoddi4+0x2b4>
 8000842:	458e      	cmp	lr, r1
 8000844:	d96a      	bls.n	800091c <__udivmoddi4+0x2b4>
 8000846:	3802      	subs	r0, #2
 8000848:	4461      	add	r1, ip
 800084a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800084e:	fba0 9402 	umull	r9, r4, r0, r2
 8000852:	eba1 010e 	sub.w	r1, r1, lr
 8000856:	42a1      	cmp	r1, r4
 8000858:	46c8      	mov	r8, r9
 800085a:	46a6      	mov	lr, r4
 800085c:	d356      	bcc.n	800090c <__udivmoddi4+0x2a4>
 800085e:	d053      	beq.n	8000908 <__udivmoddi4+0x2a0>
 8000860:	b15d      	cbz	r5, 800087a <__udivmoddi4+0x212>
 8000862:	ebb3 0208 	subs.w	r2, r3, r8
 8000866:	eb61 010e 	sbc.w	r1, r1, lr
 800086a:	fa01 f707 	lsl.w	r7, r1, r7
 800086e:	fa22 f306 	lsr.w	r3, r2, r6
 8000872:	40f1      	lsrs	r1, r6
 8000874:	431f      	orrs	r7, r3
 8000876:	e9c5 7100 	strd	r7, r1, [r5]
 800087a:	2600      	movs	r6, #0
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	40d8      	lsrs	r0, r3
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	fa21 f303 	lsr.w	r3, r1, r3
 8000890:	4091      	lsls	r1, r2
 8000892:	4301      	orrs	r1, r0
 8000894:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000898:	fa1f fe8c 	uxth.w	lr, ip
 800089c:	fbb3 f0f7 	udiv	r0, r3, r7
 80008a0:	fb07 3610 	mls	r6, r7, r0, r3
 80008a4:	0c0b      	lsrs	r3, r1, #16
 80008a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008aa:	fb00 f60e 	mul.w	r6, r0, lr
 80008ae:	429e      	cmp	r6, r3
 80008b0:	fa04 f402 	lsl.w	r4, r4, r2
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x260>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80008be:	d22f      	bcs.n	8000920 <__udivmoddi4+0x2b8>
 80008c0:	429e      	cmp	r6, r3
 80008c2:	d92d      	bls.n	8000920 <__udivmoddi4+0x2b8>
 80008c4:	3802      	subs	r0, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1b9b      	subs	r3, r3, r6
 80008ca:	b289      	uxth	r1, r1
 80008cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008d0:	fb07 3316 	mls	r3, r7, r6, r3
 80008d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d8:	fb06 f30e 	mul.w	r3, r6, lr
 80008dc:	428b      	cmp	r3, r1
 80008de:	d908      	bls.n	80008f2 <__udivmoddi4+0x28a>
 80008e0:	eb1c 0101 	adds.w	r1, ip, r1
 80008e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008e8:	d216      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d914      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008ee:	3e02      	subs	r6, #2
 80008f0:	4461      	add	r1, ip
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008f8:	e738      	b.n	800076c <__udivmoddi4+0x104>
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e705      	b.n	800070c <__udivmoddi4+0xa4>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e3      	b.n	80006cc <__udivmoddi4+0x64>
 8000904:	4618      	mov	r0, r3
 8000906:	e6f8      	b.n	80006fa <__udivmoddi4+0x92>
 8000908:	454b      	cmp	r3, r9
 800090a:	d2a9      	bcs.n	8000860 <__udivmoddi4+0x1f8>
 800090c:	ebb9 0802 	subs.w	r8, r9, r2
 8000910:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000914:	3801      	subs	r0, #1
 8000916:	e7a3      	b.n	8000860 <__udivmoddi4+0x1f8>
 8000918:	4646      	mov	r6, r8
 800091a:	e7ea      	b.n	80008f2 <__udivmoddi4+0x28a>
 800091c:	4620      	mov	r0, r4
 800091e:	e794      	b.n	800084a <__udivmoddi4+0x1e2>
 8000920:	4640      	mov	r0, r8
 8000922:	e7d1      	b.n	80008c8 <__udivmoddi4+0x260>
 8000924:	46d0      	mov	r8, sl
 8000926:	e77b      	b.n	8000820 <__udivmoddi4+0x1b8>
 8000928:	3b02      	subs	r3, #2
 800092a:	4461      	add	r1, ip
 800092c:	e732      	b.n	8000794 <__udivmoddi4+0x12c>
 800092e:	4630      	mov	r0, r6
 8000930:	e709      	b.n	8000746 <__udivmoddi4+0xde>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	e742      	b.n	80007be <__udivmoddi4+0x156>

08000938 <__aeabi_idiv0>:
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b090      	sub	sp, #64	; 0x40
 8000940:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f001 fa07 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f8d7 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 fa9f 	bl	8000e8c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800094e:	f000 f935 	bl	8000bbc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000952:	f000 f96b 	bl	8000c2c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000956:	f000 f9a7 	bl	8000ca8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800095a:	f000 f9cb 	bl	8000cf4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800095e:	f000 fa07 	bl	8000d70 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000962:	f000 fa35 	bl	8000dd0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000966:	f000 fa63 	bl	8000e30 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  float GyroData_f[3];
  int16_t GyroData_i[6];
  HAL_UART_Transmit(&huart1,train,sizeof(train),1000);
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8000972:	4958      	ldr	r1, [pc, #352]	; (8000ad4 <main+0x198>)
 8000974:	4858      	ldr	r0, [pc, #352]	; (8000ad8 <main+0x19c>)
 8000976:	f004 fbec 	bl	8005152 <HAL_UART_Transmit>
  HAL_Delay(100);
 800097a:	2064      	movs	r0, #100	; 0x64
 800097c:	f001 fa5e 	bl	8001e3c <HAL_Delay>
  HAL_UART_Transmit(&huart1,msg0,sizeof(msg0),1000);
 8000980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000984:	2229      	movs	r2, #41	; 0x29
 8000986:	4955      	ldr	r1, [pc, #340]	; (8000adc <main+0x1a0>)
 8000988:	4853      	ldr	r0, [pc, #332]	; (8000ad8 <main+0x19c>)
 800098a:	f004 fbe2 	bl	8005152 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	2232      	movs	r2, #50	; 0x32
 8000994:	4952      	ldr	r1, [pc, #328]	; (8000ae0 <main+0x1a4>)
 8000996:	4850      	ldr	r0, [pc, #320]	; (8000ad8 <main+0x19c>)
 8000998:	f004 fbdb 	bl	8005152 <HAL_UART_Transmit>
  HAL_Delay(100);
 800099c:	2064      	movs	r0, #100	; 0x64
 800099e:	f001 fa4d 	bl	8001e3c <HAL_Delay>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	2229      	movs	r2, #41	; 0x29
 80009a8:	494e      	ldr	r1, [pc, #312]	; (8000ae4 <main+0x1a8>)
 80009aa:	484b      	ldr	r0, [pc, #300]	; (8000ad8 <main+0x19c>)
 80009ac:	f004 fbd1 	bl	8005152 <HAL_UART_Transmit>
  //1. Initialize Gyro sensor
  uint16_t LSM6DSL_InitStruct;
  //CTRL1_XL = 0b0110_0000 = 0X60 //416Hz High performance
  LSM6DSL_InitStruct |= 0x60;
 80009b0:	8bfb      	ldrh	r3, [r7, #30]
 80009b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80009b6:	83fb      	strh	r3, [r7, #30]
  //CTRL3_C = 0b0100_0000_0000 = 0x0400 //Enable Serial Interface
  LSM6DSL_InitStruct |= 0x0400;
 80009b8:	8bfb      	ldrh	r3, [r7, #30]
 80009ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009be:	83fb      	strh	r3, [r7, #30]
  //LSM6DSL_InitStruct |= 0x0460;
  LSM6DSL_GyroInit(LSM6DSL_InitStruct);
 80009c0:	8bfb      	ldrh	r3, [r7, #30]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f8f8 	bl	8001bb8 <LSM6DSL_GyroInit>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 80009c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009cc:	2226      	movs	r2, #38	; 0x26
 80009ce:	4946      	ldr	r1, [pc, #280]	; (8000ae8 <main+0x1ac>)
 80009d0:	4841      	ldr	r0, [pc, #260]	; (8000ad8 <main+0x19c>)
 80009d2:	f004 fbbe 	bl	8005152 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LSM6DSL_GyroReadXYZAngRate(&GyroData_f[0]);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f926 	bl	8001c2c <LSM6DSL_GyroReadXYZAngRate>
	  for(int i=0,j=0;i<3;i++,j++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
 80009e8:	e04d      	b.n	8000a86 <main+0x14a>
	  {
		  GyroData_i[j] = GyroData_f[i];
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	3328      	adds	r3, #40	; 0x28
 80009f0:	443b      	add	r3, r7
 80009f2:	3b1c      	subs	r3, #28
 80009f4:	edd3 7a00 	vldr	s15, [r3]
 80009f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009fc:	ee17 3a90 	vmov	r3, s15
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	6a3b      	ldr	r3, [r7, #32]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	3328      	adds	r3, #40	; 0x28
 8000a08:	443b      	add	r3, r7
 8000a0a:	f823 2c28 	strh.w	r2, [r3, #-40]
		  float tmpFrac = GyroData_f[i] - GyroData_i[j];
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	3328      	adds	r3, #40	; 0x28
 8000a14:	443b      	add	r3, r7
 8000a16:	3b1c      	subs	r3, #28
 8000a18:	ed93 7a00 	vldr	s14, [r3]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	3328      	adds	r3, #40	; 0x28
 8000a22:	443b      	add	r3, r7
 8000a24:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a34:	edc7 7a06 	vstr	s15, [r7, #24]
		  j++;
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
		  GyroData_i[j] = trunc(tmpFrac * 100);
 8000a3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a42:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000aec <main+0x1b0>
 8000a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a4a:	ee17 0a90 	vmov	r0, s15
 8000a4e:	f7ff fd73 	bl	8000538 <__aeabi_f2d>
 8000a52:	4602      	mov	r2, r0
 8000a54:	460b      	mov	r3, r1
 8000a56:	ec43 2b10 	vmov	d0, r2, r3
 8000a5a:	f005 ffdf 	bl	8006a1c <trunc>
 8000a5e:	ec53 2b10 	vmov	r2, r3, d0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	f7ff fdbf 	bl	80005e8 <__aeabi_d2iz>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	3328      	adds	r3, #40	; 0x28
 8000a74:	443b      	add	r3, r7
 8000a76:	f823 2c28 	strh.w	r2, [r3, #-40]
	  for(int i=0,j=0;i<3;i++,j++)
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	3301      	adds	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	ddae      	ble.n	80009ea <main+0xae>
	  }
	  snprintf(str_tmp,100,"X=%d.%02d Y=%d.%02d Z=%d.%02d\n\r", GyroData_i[0], GyroData_i[1], GyroData_i[2], GyroData_i[3], GyroData_i[4], GyroData_i[5] );
 8000a8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a90:	461d      	mov	r5, r3
 8000a92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a96:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a9a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000a9e:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8000aa2:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8000aa6:	9404      	str	r4, [sp, #16]
 8000aa8:	9003      	str	r0, [sp, #12]
 8000aaa:	9102      	str	r1, [sp, #8]
 8000aac:	9201      	str	r2, [sp, #4]
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	462b      	mov	r3, r5
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <main+0x1b4>)
 8000ab4:	2164      	movs	r1, #100	; 0x64
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <main+0x1b8>)
 8000ab8:	f005 fb2e 	bl	8006118 <sniprintf>
	  HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	2264      	movs	r2, #100	; 0x64
 8000ac2:	490c      	ldr	r1, [pc, #48]	; (8000af4 <main+0x1b8>)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <main+0x19c>)
 8000ac6:	f004 fb44 	bl	8005152 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8000aca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ace:	f001 f9b5 	bl	8001e3c <HAL_Delay>
	  LSM6DSL_GyroReadXYZAngRate(&GyroData_f[0]);
 8000ad2:	e780      	b.n	80009d6 <main+0x9a>
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	2000042c 	.word	0x2000042c
 8000adc:	200001b8 	.word	0x200001b8
 8000ae0:	200001e4 	.word	0x200001e4
 8000ae4:	20000218 	.word	0x20000218
 8000ae8:	20000244 	.word	0x20000244
 8000aec:	42c80000 	.word	0x42c80000
 8000af0:	08006a98 	.word	0x08006a98
 8000af4:	20000a40 	.word	0x20000a40

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b096      	sub	sp, #88	; 0x58
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	2244      	movs	r2, #68	; 0x44
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f005 fafe 	bl	8006108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b1e:	f002 fe39 	bl	8003794 <HAL_PWREx_ControlVoltageScaling>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b28:	f000 fb62 	bl	80011f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b2c:	f002 fe14 	bl	8003758 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <SystemClock_Config+0xc0>)
 8000b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b36:	4a20      	ldr	r2, [pc, #128]	; (8000bb8 <SystemClock_Config+0xc0>)
 8000b38:	f023 0318 	bic.w	r3, r3, #24
 8000b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b40:	2314      	movs	r3, #20
 8000b42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b50:	2360      	movs	r3, #96	; 0x60
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b54:	2302      	movs	r3, #2
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b60:	2328      	movs	r3, #40	; 0x28
 8000b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b64:	2307      	movs	r3, #7
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 ff2f 	bl	80039d8 <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b80:	f000 fb36 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 faf7 	bl	8004190 <HAL_RCC_ClockConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ba8:	f000 fb22 	bl	80011f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bac:	f003 fffe 	bl	8004bac <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bb0:	bf00      	nop
 8000bb2:	3758      	adds	r7, #88	; 0x58
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000

08000bbc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000bc2:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <MX_DFSDM1_Init+0x6c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000be6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bea:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_DFSDM1_Init+0x68>)
 8000c12:	f001 fa49 	bl	80020a8 <HAL_DFSDM_ChannelInit>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000c1c:	f000 fae8 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200002f8 	.word	0x200002f8
 8000c28:	40016020 	.word	0x40016020

08000c2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <MX_I2C2_Init+0x78>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c38:	f640 6214 	movw	r2, #3604	; 0xe14
 8000c3c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c6a:	f001 fe02 	bl	8002872 <HAL_I2C_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 fabc 	bl	80011f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c7c:	f002 fb8c 	bl	8003398 <HAL_I2CEx_ConfigAnalogFilter>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c86:	f000 fab3 	bl	80011f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_I2C2_Init+0x74>)
 8000c8e:	f002 fbce 	bl	800342e <HAL_I2CEx_ConfigDigitalFilter>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c98:	f000 faaa 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000330 	.word	0x20000330
 8000ca4:	40005800 	.word	0x40005800

08000ca8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_QUADSPI_Init+0x44>)
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <MX_QUADSPI_Init+0x48>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_QUADSPI_Init+0x44>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_QUADSPI_Init+0x44>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_QUADSPI_Init+0x44>)
 8000cc0:	2210      	movs	r2, #16
 8000cc2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_QUADSPI_Init+0x44>)
 8000cc6:	2217      	movs	r2, #23
 8000cc8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_QUADSPI_Init+0x44>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_QUADSPI_Init+0x44>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_QUADSPI_Init+0x44>)
 8000cd8:	f002 fdc2 	bl	8003860 <HAL_QSPI_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000ce2:	f000 fa85 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000384 	.word	0x20000384
 8000cf0:	a0001000 	.word	0xa0001000

08000cf4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <MX_SPI3_Init+0x78>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d12:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d26:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d42:	2207      	movs	r2, #7
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d4e:	2208      	movs	r2, #8
 8000d50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_SPI3_Init+0x74>)
 8000d54:	f004 f90c 	bl	8004f70 <HAL_SPI_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d5e:	f000 fa47 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200003c8 	.word	0x200003c8
 8000d6c:	40003c00 	.word	0x40003c00

08000d70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <MX_USART1_UART_Init+0x5c>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART1_UART_Init+0x58>)
 8000db4:	f004 f97f 	bl	80050b6 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dbe:	f000 fa17 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000042c 	.word	0x2000042c
 8000dcc:	40013800 	.word	0x40013800

08000dd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000dd6:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <MX_USART3_UART_Init+0x5c>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART3_UART_Init+0x58>)
 8000e14:	f004 f94f 	bl	80050b6 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e1e:	f000 f9e7 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200004b0 	.word	0x200004b0
 8000e2c:	40004800 	.word	0x40004800

08000e30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3e:	2206      	movs	r2, #6
 8000e40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e74:	f002 fb27 	bl	80034c6 <HAL_PCD_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 f9b7 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000534 	.word	0x20000534

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea2:	4bbd      	ldr	r3, [pc, #756]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4abc      	ldr	r2, [pc, #752]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4bba      	ldr	r3, [pc, #744]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4bb7      	ldr	r3, [pc, #732]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4ab6      	ldr	r2, [pc, #728]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4bb4      	ldr	r3, [pc, #720]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4bb1      	ldr	r3, [pc, #708]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4ab0      	ldr	r2, [pc, #704]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4bae      	ldr	r3, [pc, #696]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4bab      	ldr	r3, [pc, #684]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4aaa      	ldr	r2, [pc, #680]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4ba8      	ldr	r3, [pc, #672]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	4ba5      	ldr	r3, [pc, #660]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4aa4      	ldr	r2, [pc, #656]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4ba2      	ldr	r3, [pc, #648]	; (8001198 <MX_GPIO_Init+0x30c>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f20:	489e      	ldr	r0, [pc, #632]	; (800119c <MX_GPIO_Init+0x310>)
 8000f22:	f001 fc6b 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f001 fc64 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f34:	2200      	movs	r2, #0
 8000f36:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f3a:	4899      	ldr	r0, [pc, #612]	; (80011a0 <MX_GPIO_Init+0x314>)
 8000f3c:	f001 fc5e 	bl	80027fc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f46:	4897      	ldr	r0, [pc, #604]	; (80011a4 <MX_GPIO_Init+0x318>)
 8000f48:	f001 fc58 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f52:	4894      	ldr	r0, [pc, #592]	; (80011a4 <MX_GPIO_Init+0x318>)
 8000f54:	f001 fc52 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f5e:	4892      	ldr	r0, [pc, #584]	; (80011a8 <MX_GPIO_Init+0x31c>)
 8000f60:	f001 fc4c 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2120      	movs	r1, #32
 8000f68:	488d      	ldr	r0, [pc, #564]	; (80011a0 <MX_GPIO_Init+0x314>)
 8000f6a:	f001 fc47 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2101      	movs	r1, #1
 8000f72:	488a      	ldr	r0, [pc, #552]	; (800119c <MX_GPIO_Init+0x310>)
 8000f74:	f001 fc42 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f78:	f240 1315 	movw	r3, #277	; 0x115
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4882      	ldr	r0, [pc, #520]	; (800119c <MX_GPIO_Init+0x310>)
 8000f92:	f001 f995 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000f96:	236a      	movs	r3, #106	; 0x6a
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	487c      	ldr	r0, [pc, #496]	; (800119c <MX_GPIO_Init+0x310>)
 8000fac:	f001 f988 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4878      	ldr	r0, [pc, #480]	; (80011a8 <MX_GPIO_Init+0x31c>)
 8000fc8:	f001 f97a 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000fcc:	233f      	movs	r3, #63	; 0x3f
 8000fce:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4872      	ldr	r0, [pc, #456]	; (80011a8 <MX_GPIO_Init+0x31c>)
 8000fe0:	f001 f96e 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f001 f95d 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001006:	f248 1304 	movw	r3, #33028	; 0x8104
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001022:	f001 f94d 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001026:	2308      	movs	r3, #8
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001036:	2301      	movs	r3, #1
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001044:	f001 f93c 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001048:	2310      	movs	r3, #16
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800104c:	230b      	movs	r3, #11
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f001 f92f 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001062:	23e0      	movs	r3, #224	; 0xe0
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001072:	2305      	movs	r3, #5
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f001 f91e 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001084:	2301      	movs	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001088:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4841      	ldr	r0, [pc, #260]	; (80011a0 <MX_GPIO_Init+0x314>)
 800109a:	f001 f911 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800109e:	2302      	movs	r3, #2
 80010a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010a2:	230b      	movs	r3, #11
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	483b      	ldr	r0, [pc, #236]	; (80011a0 <MX_GPIO_Init+0x314>)
 80010b2:	f001 f905 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010b6:	f24f 0334 	movw	r3, #61492	; 0xf034
 80010ba:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4834      	ldr	r0, [pc, #208]	; (80011a0 <MX_GPIO_Init+0x314>)
 80010d0:	f001 f8f6 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80010d4:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80010d8:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	482e      	ldr	r0, [pc, #184]	; (80011a4 <MX_GPIO_Init+0x318>)
 80010ec:	f001 f8e8 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80010f0:	f243 0381 	movw	r3, #12417	; 0x3081
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4826      	ldr	r0, [pc, #152]	; (80011a4 <MX_GPIO_Init+0x318>)
 800110a:	f001 f8d9 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800110e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4820      	ldr	r0, [pc, #128]	; (80011a8 <MX_GPIO_Init+0x31c>)
 8001128:	f001 f8ca 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800112c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001132:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4819      	ldr	r0, [pc, #100]	; (80011a8 <MX_GPIO_Init+0x31c>)
 8001144:	f001 f8bc 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001148:	2302      	movs	r3, #2
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001158:	2305      	movs	r3, #5
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <MX_GPIO_Init+0x318>)
 8001164:	f001 f8ac 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001168:	2378      	movs	r3, #120	; 0x78
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001178:	2307      	movs	r3, #7
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4808      	ldr	r0, [pc, #32]	; (80011a4 <MX_GPIO_Init+0x318>)
 8001184:	f001 f89c 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001188:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118e:	2312      	movs	r3, #18
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	e00a      	b.n	80011ac <MX_GPIO_Init+0x320>
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	48001000 	.word	0x48001000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000c00 	.word	0x48000c00
 80011a8:	48000800 	.word	0x48000800
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011b2:	2304      	movs	r3, #4
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <MX_GPIO_Init+0x360>)
 80011be:	f001 f87f 	bl	80022c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2017      	movs	r0, #23
 80011c8:	f000 ff37 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011cc:	2017      	movs	r0, #23
 80011ce:	f000 ff50 	bl	8002072 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2028      	movs	r0, #40	; 0x28
 80011d8:	f000 ff2f 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011dc:	2028      	movs	r0, #40	; 0x28
 80011de:	f000 ff48 	bl	8002072 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	48000400 	.word	0x48000400

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x44>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_MspInit+0x44>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6613      	str	r3, [r2, #96]	; 0x60
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_MspInit+0x44>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x44>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x44>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6593      	str	r3, [r2, #88]	; 0x58
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x44>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ac      	sub	sp, #176	; 0xb0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2288      	movs	r2, #136	; 0x88
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f004 ff4f 	bl	8006108 <memset>
  if(DFSDM1_Init == 0)
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d142      	bne.n	80012f8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001276:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4618      	mov	r0, r3
 8001284:	f003 f9a8 	bl	80045d8 <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800128e:	f7ff ffaf 	bl	80011f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800129c:	6613      	str	r3, [r2, #96]	; 0x60
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80012c2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80012c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012dc:	2306      	movs	r3, #6
 80012de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80012ea:	f000 ffe9 	bl	80022c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	4a02      	ldr	r2, [pc, #8]	; (8001300 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80012f6:	6013      	str	r3, [r2, #0]
  }

}
 80012f8:	bf00      	nop
 80012fa:	37b0      	adds	r7, #176	; 0xb0
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000aa4 	.word	0x20000aa4
 8001304:	40021000 	.word	0x40021000
 8001308:	48001000 	.word	0x48001000

0800130c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0ac      	sub	sp, #176	; 0xb0
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2288      	movs	r2, #136	; 0x88
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f004 feeb 	bl	8006108 <memset>
  if(hi2c->Instance==I2C2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a21      	ldr	r2, [pc, #132]	; (80013bc <HAL_I2C_MspInit+0xb0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d13b      	bne.n	80013b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001340:	2300      	movs	r3, #0
 8001342:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4618      	mov	r0, r3
 800134a:	f003 f945 	bl	80045d8 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001354:	f7ff ff4c 	bl	80011f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001370:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001378:	2312      	movs	r3, #18
 800137a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137e:	2301      	movs	r3, #1
 8001380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800138a:	2304      	movs	r3, #4
 800138c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001394:	4619      	mov	r1, r3
 8001396:	480b      	ldr	r0, [pc, #44]	; (80013c4 <HAL_I2C_MspInit+0xb8>)
 8001398:	f000 ff92 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 800139e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 80013a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013a6:	6593      	str	r3, [r2, #88]	; 0x58
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_I2C_MspInit+0xb4>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	37b0      	adds	r7, #176	; 0xb0
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40005800 	.word	0x40005800
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000400 	.word	0x48000400

080013c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_I2C_MspDeInit+0x3c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10f      	bne.n	80013fa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_I2C_MspDeInit+0x40>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_I2C_MspDeInit+0x40>)
 80013e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013e4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80013e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <HAL_I2C_MspDeInit+0x44>)
 80013ec:	f001 f912 	bl	8002614 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80013f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_I2C_MspDeInit+0x44>)
 80013f6:	f001 f90d 	bl	8002614 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40005800 	.word	0x40005800
 8001408:	40021000 	.word	0x40021000
 800140c:	48000400 	.word	0x48000400

08001410 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_QSPI_MspInit+0x7c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d128      	bne.n	8001484 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 8001434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6513      	str	r3, [r2, #80]	; 0x50
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 8001440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_QSPI_MspInit+0x80>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001462:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001466:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001474:	230a      	movs	r3, #10
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_QSPI_MspInit+0x84>)
 8001480:	f000 ff1e 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	a0001000 	.word	0xa0001000
 8001490:	40021000 	.word	0x40021000
 8001494:	48001000 	.word	0x48001000

08001498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_SPI_MspInit+0x7c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d128      	bne.n	800150c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	4a16      	ldr	r2, [pc, #88]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c4:	6593      	str	r3, [r2, #88]	; 0x58
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_SPI_MspInit+0x80>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014fc:	2306      	movs	r3, #6
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <HAL_SPI_MspInit+0x84>)
 8001508:	f000 feda 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40003c00 	.word	0x40003c00
 8001518:	40021000 	.word	0x40021000
 800151c:	48000800 	.word	0x48000800

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0ae      	sub	sp, #184	; 0xb8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	2288      	movs	r2, #136	; 0x88
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f004 fde1 	bl	8006108 <memset>
  if(huart->Instance==USART1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a42      	ldr	r2, [pc, #264]	; (8001654 <HAL_UART_MspInit+0x134>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d13b      	bne.n	80015c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001550:	2301      	movs	r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001554:	2300      	movs	r3, #0
 8001556:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4618      	mov	r0, r3
 800155e:	f003 f83b 	bl	80045d8 <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001568:	f7ff fe42 	bl	80011f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <HAL_UART_MspInit+0x138>)
 800156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001570:	4a39      	ldr	r2, [pc, #228]	; (8001658 <HAL_UART_MspInit+0x138>)
 8001572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001576:	6613      	str	r3, [r2, #96]	; 0x60
 8001578:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_UART_MspInit+0x138>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b34      	ldr	r3, [pc, #208]	; (8001658 <HAL_UART_MspInit+0x138>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	4a33      	ldr	r2, [pc, #204]	; (8001658 <HAL_UART_MspInit+0x138>)
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001590:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_UART_MspInit+0x138>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800159c:	23c0      	movs	r3, #192	; 0xc0
 800159e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b4:	2307      	movs	r3, #7
 80015b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015be:	4619      	mov	r1, r3
 80015c0:	4826      	ldr	r0, [pc, #152]	; (800165c <HAL_UART_MspInit+0x13c>)
 80015c2:	f000 fe7d 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015c6:	e040      	b.n	800164a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a24      	ldr	r2, [pc, #144]	; (8001660 <HAL_UART_MspInit+0x140>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d13b      	bne.n	800164a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015d2:	2304      	movs	r3, #4
 80015d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fffa 	bl	80045d8 <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0xce>
      Error_Handler();
 80015ea:	f7ff fe01 	bl	80011f0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_UART_MspInit+0x138>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_UART_MspInit+0x138>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_UART_MspInit+0x138>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_UART_MspInit+0x138>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <HAL_UART_MspInit+0x138>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_UART_MspInit+0x138>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800161e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001638:	2307      	movs	r3, #7
 800163a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <HAL_UART_MspInit+0x144>)
 8001646:	f000 fe3b 	bl	80022c0 <HAL_GPIO_Init>
}
 800164a:	bf00      	nop
 800164c:	37b8      	adds	r7, #184	; 0xb8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40013800 	.word	0x40013800
 8001658:	40021000 	.word	0x40021000
 800165c:	48000400 	.word	0x48000400
 8001660:	40004800 	.word	0x40004800
 8001664:	48000c00 	.word	0x48000c00

08001668 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0ac      	sub	sp, #176	; 0xb0
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2288      	movs	r2, #136	; 0x88
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f004 fd3d 	bl	8006108 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001696:	d17c      	bne.n	8001792 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800169e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016ae:	2318      	movs	r3, #24
 80016b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016b2:	2307      	movs	r3, #7
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 ff85 	bl	80045d8 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80016d4:	f7ff fd8c 	bl	80011f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_PCD_MspInit+0x134>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	4a2f      	ldr	r2, [pc, #188]	; (800179c <HAL_PCD_MspInit+0x134>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_PCD_MspInit+0x134>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80016f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170e:	f000 fdd7 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001712:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800172c:	230a      	movs	r3, #10
 800172e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f000 fdc0 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	4a15      	ldr	r2, [pc, #84]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_PCD_MspInit+0x134>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_PCD_MspInit+0x134>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d114      	bne.n	800178e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	4a0c      	ldr	r2, [pc, #48]	; (800179c <HAL_PCD_MspInit+0x134>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6593      	str	r3, [r2, #88]	; 0x58
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800177c:	f002 f860 	bl	8003840 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_PCD_MspInit+0x134>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800178c:	e001      	b.n	8001792 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800178e:	f002 f857 	bl	8003840 <HAL_PWREx_EnableVddUSB>
}
 8001792:	bf00      	nop
 8001794:	37b0      	adds	r7, #176	; 0xb0
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <NMI_Handler+0x4>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <MemManage_Handler+0x4>

080017b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <UsageFault_Handler+0x4>

080017be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 fb06 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80017f8:	2020      	movs	r0, #32
 80017fa:	f001 f817 	bl	800282c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80017fe:	2040      	movs	r0, #64	; 0x40
 8001800:	f001 f814 	bl	800282c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001804:	2080      	movs	r0, #128	; 0x80
 8001806:	f001 f811 	bl	800282c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800180a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800180e:	f001 f80d 	bl	800282c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}

08001816 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800181a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800181e:	f001 f805 	bl	800282c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001822:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001826:	f001 f801 	bl	800282c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800182a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800182e:	f000 fffd 	bl	800282c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001832:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001836:	f000 fff9 	bl	800282c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800183a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800183e:	f000 fff5 	bl	800282c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f004 fc1c 	bl	80060b4 <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20018000 	.word	0x20018000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	20000aa8 	.word	0x20000aa8
 80018b0:	20000b38 	.word	0x20000b38

080018b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <SystemInit+0x20>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <SystemInit+0x20>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018dc:	f7ff ffea 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <LoopForever+0x6>)
  ldr r1, =_edata
 80018e2:	490d      	ldr	r1, [pc, #52]	; (8001918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <LoopForever+0xe>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f8:	4c0a      	ldr	r4, [pc, #40]	; (8001924 <LoopForever+0x16>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001906:	f004 fbdb 	bl	80060c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800190a:	f7ff f817 	bl	800093c <main>

0800190e <LoopForever>:

LoopForever:
    b LoopForever
 800190e:	e7fe      	b.n	800190e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001910:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 800191c:	08006b44 	.word	0x08006b44
  ldr r2, =_sbss
 8001920:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8001924:	20000b38 	.word	0x20000b38

08001928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC1_2_IRQHandler>
	...

0800192c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <I2Cx_MspInit+0xa8>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	4a26      	ldr	r2, [pc, #152]	; (80019d4 <I2Cx_MspInit+0xa8>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <I2Cx_MspInit+0xa8>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800194c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001950:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001952:	2312      	movs	r3, #18
 8001954:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001956:	2301      	movs	r3, #1
 8001958:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800195e:	2304      	movs	r3, #4
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	481b      	ldr	r0, [pc, #108]	; (80019d8 <I2Cx_MspInit+0xac>)
 800196a:	f000 fca9 	bl	80022c0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4818      	ldr	r0, [pc, #96]	; (80019d8 <I2Cx_MspInit+0xac>)
 8001976:	f000 fca3 	bl	80022c0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <I2Cx_MspInit+0xa8>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <I2Cx_MspInit+0xa8>)
 8001980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001984:	6593      	str	r3, [r2, #88]	; 0x58
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <I2Cx_MspInit+0xa8>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <I2Cx_MspInit+0xa8>)
 8001994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <I2Cx_MspInit+0xa8>)
 8001998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800199c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <I2Cx_MspInit+0xa8>)
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a2:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <I2Cx_MspInit+0xa8>)
 80019a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	210f      	movs	r1, #15
 80019ae:	2021      	movs	r0, #33	; 0x21
 80019b0:	f000 fb43 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80019b4:	2021      	movs	r0, #33	; 0x21
 80019b6:	f000 fb5c 	bl	8002072 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	210f      	movs	r1, #15
 80019be:	2022      	movs	r0, #34	; 0x22
 80019c0:	f000 fb3b 	bl	800203a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80019c4:	2022      	movs	r0, #34	; 0x22
 80019c6:	f000 fb54 	bl	8002072 <HAL_NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	; 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	48000400 	.word	0x48000400

080019dc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <I2Cx_Init+0x54>)
 80019e8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <I2Cx_Init+0x58>)
 80019ee:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff89 	bl	800192c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 ff29 	bl	8002872 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001a20:	2100      	movs	r1, #0
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f001 fcb8 	bl	8003398 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40005800 	.word	0x40005800
 8001a34:	00702681 	.word	0x00702681

08001a38 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af04      	add	r7, sp, #16
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	72fb      	strb	r3, [r7, #11]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	813b      	strh	r3, [r7, #8]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a56:	7afb      	ldrb	r3, [r7, #11]
 8001a58:	b299      	uxth	r1, r3
 8001a5a:	88f8      	ldrh	r0, [r7, #6]
 8001a5c:	893a      	ldrh	r2, [r7, #8]
 8001a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a62:	9302      	str	r3, [sp, #8]
 8001a64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f001 f8d2 	bl	8002c18 <HAL_I2C_Mem_Read>
 8001a74:	4603      	mov	r3, r0
 8001a76:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	4619      	mov	r1, r3
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 f832 	bl	8001aec <I2Cx_Error>
  }
  return status;
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b08a      	sub	sp, #40	; 0x28
 8001a96:	af04      	add	r7, sp, #16
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	4608      	mov	r0, r1
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	72fb      	strb	r3, [r7, #11]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	813b      	strh	r3, [r7, #8]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	b299      	uxth	r1, r3
 8001ab4:	88f8      	ldrh	r0, [r7, #6]
 8001ab6:	893a      	ldrh	r2, [r7, #8]
 8001ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 ff91 	bl	80029f0 <HAL_I2C_Mem_Write>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	4619      	mov	r1, r3
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f805 	bl	8001aec <I2Cx_Error>
  }
  return status;
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 ff49 	bl	8002990 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff6c 	bl	80019dc <I2Cx_Init>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
 8001b16:	460b      	mov	r3, r1
 8001b18:	71bb      	strb	r3, [r7, #6]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	79f9      	ldrb	r1, [r7, #7]
 8001b24:	2301      	movs	r3, #1
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	1d7b      	adds	r3, r7, #5
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <SENSOR_IO_Write+0x30>)
 8001b30:	f7ff ffaf 	bl	8001a92 <I2Cx_WriteMultiple>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000aac 	.word	0x20000aac

08001b40 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	4603      	mov	r3, r0
 8001b48:	460a      	mov	r2, r1
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001b54:	79bb      	ldrb	r3, [r7, #6]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	79f9      	ldrb	r1, [r7, #7]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	f107 030f 	add.w	r3, r7, #15
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	4804      	ldr	r0, [pc, #16]	; (8001b78 <SENSOR_IO_Read+0x38>)
 8001b68:	f7ff ff66 	bl	8001a38 <I2Cx_ReadMultiple>

  return read_value;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000aac 	.word	0x20000aac

08001b7c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	603a      	str	r2, [r7, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	71bb      	strb	r3, [r7, #6]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001b92:	79bb      	ldrb	r3, [r7, #6]
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	79f9      	ldrb	r1, [r7, #7]
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <SENSOR_IO_ReadMultiple+0x38>)
 8001ba4:	f7ff ff48 	bl	8001a38 <I2Cx_ReadMultiple>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	b29b      	uxth	r3, r3
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000aac 	.word	0x20000aac

08001bb8 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001bc6:	2111      	movs	r1, #17
 8001bc8:	20d4      	movs	r0, #212	; 0xd4
 8001bca:	f7ff ffb9 	bl	8001b40 <SENSOR_IO_Read>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001bd6:	7bbb      	ldrb	r3, [r7, #14]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001bde:	7bba      	ldrb	r2, [r7, #14]
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	461a      	mov	r2, r3
 8001bea:	2111      	movs	r1, #17
 8001bec:	20d4      	movs	r0, #212	; 0xd4
 8001bee:	f7ff ff8d 	bl	8001b0c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001bf2:	2112      	movs	r1, #18
 8001bf4:	20d4      	movs	r0, #212	; 0xd4
 8001bf6:	f7ff ffa3 	bl	8001b40 <SENSOR_IO_Read>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001c06:	7bbb      	ldrb	r3, [r7, #14]
 8001c08:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001c0c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001c0e:	7bba      	ldrb	r2, [r7, #14]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001c16:	7bbb      	ldrb	r3, [r7, #14]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2112      	movs	r1, #18
 8001c1c:	20d4      	movs	r0, #212	; 0xd4
 8001c1e:	f7ff ff75 	bl	8001b0c <SENSOR_IO_Write>
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001c42:	2111      	movs	r1, #17
 8001c44:	20d4      	movs	r0, #212	; 0xd4
 8001c46:	f7ff ff7b 	bl	8001b40 <SENSOR_IO_Read>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001c4e:	f107 0208 	add.w	r2, r7, #8
 8001c52:	2306      	movs	r3, #6
 8001c54:	2122      	movs	r1, #34	; 0x22
 8001c56:	20d4      	movs	r0, #212	; 0xd4
 8001c58:	f7ff ff90 	bl	8001b7c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	77fb      	strb	r3, [r7, #31]
 8001c60:	e01c      	b.n	8001c9c <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001c62:	7ffb      	ldrb	r3, [r7, #31]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	3301      	adds	r3, #1
 8001c68:	3320      	adds	r3, #32
 8001c6a:	443b      	add	r3, r7
 8001c6c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	7ffb      	ldrb	r3, [r7, #31]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	3320      	adds	r3, #32
 8001c7c:	443b      	add	r3, r7
 8001c7e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	7ffb      	ldrb	r3, [r7, #31]
 8001c8a:	b212      	sxth	r2, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	3320      	adds	r3, #32
 8001c90:	443b      	add	r3, r7
 8001c92:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001c96:	7ffb      	ldrb	r3, [r7, #31]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	77fb      	strb	r3, [r7, #31]
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d9df      	bls.n	8001c62 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d829      	bhi.n	8001d00 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8001cac:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001ce9 	.word	0x08001ce9
 8001cb8:	08001d01 	.word	0x08001d01
 8001cbc:	08001d01 	.word	0x08001d01
 8001cc0:	08001d01 	.word	0x08001d01
 8001cc4:	08001cef 	.word	0x08001cef
 8001cc8:	08001d01 	.word	0x08001d01
 8001ccc:	08001d01 	.word	0x08001d01
 8001cd0:	08001d01 	.word	0x08001d01
 8001cd4:	08001cf5 	.word	0x08001cf5
 8001cd8:	08001d01 	.word	0x08001d01
 8001cdc:	08001d01 	.word	0x08001d01
 8001ce0:	08001d01 	.word	0x08001d01
 8001ce4:	08001cfb 	.word	0x08001cfb
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001ce8:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8001cea:	61bb      	str	r3, [r7, #24]
    break;
 8001cec:	e008      	b.n	8001d00 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001cf0:	61bb      	str	r3, [r7, #24]
    break;
 8001cf2:	e005      	b.n	8001d00 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001cf6:	61bb      	str	r3, [r7, #24]
    break;
 8001cf8:	e002      	b.n	8001d00 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001cfc:	61bb      	str	r3, [r7, #24]
    break;    
 8001cfe:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	77fb      	strb	r3, [r7, #31]
 8001d04:	e016      	b.n	8001d34 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	3320      	adds	r3, #32
 8001d0c:	443b      	add	r3, r7
 8001d0e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1a:	7ffb      	ldrb	r3, [r7, #31]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001d2e:	7ffb      	ldrb	r3, [r7, #31]
 8001d30:	3301      	adds	r3, #1
 8001d32:	77fb      	strb	r3, [r7, #31]
 8001d34:	7ffb      	ldrb	r3, [r7, #31]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d9e5      	bls.n	8001d06 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	410c0000 	.word	0x410c0000
 8001d48:	418c0000 	.word	0x418c0000
 8001d4c:	420c0000 	.word	0x420c0000
 8001d50:	428c0000 	.word	0x428c0000

08001d54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f000 f960 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f80d 	bl	8001d84 <HAL_InitTick>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	e001      	b.n	8001d7a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d76:	f7ff fa41 	bl	80011fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_InitTick+0x6c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d023      	beq.n	8001de0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_InitTick+0x70>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_InitTick+0x6c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f96d 	bl	800208e <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d809      	bhi.n	8001dd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f000 f937 	bl	800203a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_InitTick+0x74>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e007      	b.n	8001de4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e004      	b.n	8001de4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e001      	b.n	8001de4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000274 	.word	0x20000274
 8001df4:	2000026c 	.word	0x2000026c
 8001df8:	20000270 	.word	0x20000270

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000274 	.word	0x20000274
 8001e20:	20000b00 	.word	0x20000b00

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000b00 	.word	0x20000b00

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000274 	.word	0x20000274

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4907      	ldr	r1, [pc, #28]	; (8001f20 <__NVIC_EnableIRQ+0x38>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ff8e 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff29 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff3e 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff8e 	bl	8001f78 <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5d 	bl	8001f24 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff31 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffa2 	bl	8001fe0 <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0ac      	b.n	8002214 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f8b2 	bl	8002228 <DFSDM_GetChannelFromInstance>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a55      	ldr	r2, [pc, #340]	; (800221c <HAL_DFSDM_ChannelInit+0x174>)
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e09f      	b.n	8002214 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff f8b5 	bl	8001244 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80020da:	4b51      	ldr	r3, [pc, #324]	; (8002220 <HAL_DFSDM_ChannelInit+0x178>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a4f      	ldr	r2, [pc, #316]	; (8002220 <HAL_DFSDM_ChannelInit+0x178>)
 80020e2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80020e4:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <HAL_DFSDM_ChannelInit+0x178>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d125      	bne.n	8002138 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80020ec:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <HAL_DFSDM_ChannelInit+0x17c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a4c      	ldr	r2, [pc, #304]	; (8002224 <HAL_DFSDM_ChannelInit+0x17c>)
 80020f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020f6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80020f8:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_DFSDM_ChannelInit+0x17c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4948      	ldr	r1, [pc, #288]	; (8002224 <HAL_DFSDM_ChannelInit+0x17c>)
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_DFSDM_ChannelInit+0x17c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a46      	ldr	r2, [pc, #280]	; (8002224 <HAL_DFSDM_ChannelInit+0x17c>)
 800210c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002110:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	791b      	ldrb	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800211a:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_DFSDM_ChannelInit+0x17c>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	3b01      	subs	r3, #1
 8002124:	041b      	lsls	r3, r3, #16
 8002126:	493f      	ldr	r1, [pc, #252]	; (8002224 <HAL_DFSDM_ChannelInit+0x17c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800212c:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_DFSDM_ChannelInit+0x17c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <HAL_DFSDM_ChannelInit+0x17c>)
 8002132:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002136:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002146:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002156:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800215c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 020f 	bic.w	r2, r2, #15
 8002174:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800219c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	3b01      	subs	r3, #1
 80021ae:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f002 0207 	and.w	r2, r2, #7
 80021c8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021f4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f810 	bl	8002228 <DFSDM_GetChannelFromInstance>
 8002208:	4602      	mov	r2, r0
 800220a:	4904      	ldr	r1, [pc, #16]	; (800221c <HAL_DFSDM_ChannelInit+0x174>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000b08 	.word	0x20000b08
 8002220:	20000b04 	.word	0x20000b04
 8002224:	40016000 	.word	0x40016000

08002228 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <DFSDM_GetChannelFromInstance+0x7c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d102      	bne.n	800223e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e02b      	b.n	8002296 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <DFSDM_GetChannelFromInstance+0x80>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d102      	bne.n	800224c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e024      	b.n	8002296 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a17      	ldr	r2, [pc, #92]	; (80022ac <DFSDM_GetChannelFromInstance+0x84>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d102      	bne.n	800225a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002254:	2302      	movs	r3, #2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e01d      	b.n	8002296 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <DFSDM_GetChannelFromInstance+0x88>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d102      	bne.n	8002268 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002262:	2304      	movs	r3, #4
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e016      	b.n	8002296 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <DFSDM_GetChannelFromInstance+0x8c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d102      	bne.n	8002276 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002270:	2305      	movs	r3, #5
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e00f      	b.n	8002296 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a0f      	ldr	r2, [pc, #60]	; (80022b8 <DFSDM_GetChannelFromInstance+0x90>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d102      	bne.n	8002284 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800227e:	2306      	movs	r3, #6
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e008      	b.n	8002296 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <DFSDM_GetChannelFromInstance+0x94>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d102      	bne.n	8002292 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800228c:	2307      	movs	r3, #7
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e001      	b.n	8002296 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002292:	2303      	movs	r3, #3
 8002294:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40016000 	.word	0x40016000
 80022a8:	40016020 	.word	0x40016020
 80022ac:	40016040 	.word	0x40016040
 80022b0:	40016080 	.word	0x40016080
 80022b4:	400160a0 	.word	0x400160a0
 80022b8:	400160c0 	.word	0x400160c0
 80022bc:	400160e0 	.word	0x400160e0

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ce:	e17f      	b.n	80025d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8171 	beq.w	80025ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d005      	beq.n	8002300 <HAL_GPIO_Init+0x40>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d130      	bne.n	8002362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002336:	2201      	movs	r2, #1
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 0201 	and.w	r2, r3, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b03      	cmp	r3, #3
 800236c:	d118      	bne.n	80023a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002374:	2201      	movs	r2, #1
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	08db      	lsrs	r3, r3, #3
 800238a:	f003 0201 	and.w	r2, r3, #1
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d017      	beq.n	80023dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d123      	bne.n	8002430 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	220f      	movs	r2, #15
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	6939      	ldr	r1, [r7, #16]
 800242c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0203 	and.w	r2, r3, #3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80ac 	beq.w	80025ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	4b5f      	ldr	r3, [pc, #380]	; (80025f0 <HAL_GPIO_Init+0x330>)
 8002474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002476:	4a5e      	ldr	r2, [pc, #376]	; (80025f0 <HAL_GPIO_Init+0x330>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6613      	str	r3, [r2, #96]	; 0x60
 800247e:	4b5c      	ldr	r3, [pc, #368]	; (80025f0 <HAL_GPIO_Init+0x330>)
 8002480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800248a:	4a5a      	ldr	r2, [pc, #360]	; (80025f4 <HAL_GPIO_Init+0x334>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024b4:	d025      	beq.n	8002502 <HAL_GPIO_Init+0x242>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4f      	ldr	r2, [pc, #316]	; (80025f8 <HAL_GPIO_Init+0x338>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01f      	beq.n	80024fe <HAL_GPIO_Init+0x23e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4e      	ldr	r2, [pc, #312]	; (80025fc <HAL_GPIO_Init+0x33c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d019      	beq.n	80024fa <HAL_GPIO_Init+0x23a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4d      	ldr	r2, [pc, #308]	; (8002600 <HAL_GPIO_Init+0x340>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_GPIO_Init+0x236>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4c      	ldr	r2, [pc, #304]	; (8002604 <HAL_GPIO_Init+0x344>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <HAL_GPIO_Init+0x232>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4b      	ldr	r2, [pc, #300]	; (8002608 <HAL_GPIO_Init+0x348>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x22e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4a      	ldr	r2, [pc, #296]	; (800260c <HAL_GPIO_Init+0x34c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_Init+0x22a>
 80024e6:	2306      	movs	r3, #6
 80024e8:	e00c      	b.n	8002504 <HAL_GPIO_Init+0x244>
 80024ea:	2307      	movs	r3, #7
 80024ec:	e00a      	b.n	8002504 <HAL_GPIO_Init+0x244>
 80024ee:	2305      	movs	r3, #5
 80024f0:	e008      	b.n	8002504 <HAL_GPIO_Init+0x244>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x244>
 80024f6:	2303      	movs	r3, #3
 80024f8:	e004      	b.n	8002504 <HAL_GPIO_Init+0x244>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e002      	b.n	8002504 <HAL_GPIO_Init+0x244>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_GPIO_Init+0x244>
 8002502:	2300      	movs	r3, #0
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	f002 0203 	and.w	r2, r2, #3
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	4093      	lsls	r3, r2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002514:	4937      	ldr	r1, [pc, #220]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	3302      	adds	r3, #2
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_GPIO_Init+0x350>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002546:	4a32      	ldr	r2, [pc, #200]	; (8002610 <HAL_GPIO_Init+0x350>)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_GPIO_Init+0x350>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002570:	4a27      	ldr	r2, [pc, #156]	; (8002610 <HAL_GPIO_Init+0x350>)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_GPIO_Init+0x350>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800259a:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_GPIO_Init+0x350>)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_GPIO_Init+0x350>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025c4:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_GPIO_Init+0x350>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3301      	adds	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa22 f303 	lsr.w	r3, r2, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f47f ae78 	bne.w	80022d0 <HAL_GPIO_Init+0x10>
  }
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010000 	.word	0x40010000
 80025f8:	48000400 	.word	0x48000400
 80025fc:	48000800 	.word	0x48000800
 8002600:	48000c00 	.word	0x48000c00
 8002604:	48001000 	.word	0x48001000
 8002608:	48001400 	.word	0x48001400
 800260c:	48001800 	.word	0x48001800
 8002610:	40010400 	.word	0x40010400

08002614 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002622:	e0cd      	b.n	80027c0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002624:	2201      	movs	r2, #1
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80c0 	beq.w	80027ba <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800263a:	4a68      	ldr	r2, [pc, #416]	; (80027dc <HAL_GPIO_DeInit+0x1c8>)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	220f      	movs	r2, #15
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002662:	d025      	beq.n	80026b0 <HAL_GPIO_DeInit+0x9c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a5e      	ldr	r2, [pc, #376]	; (80027e0 <HAL_GPIO_DeInit+0x1cc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d01f      	beq.n	80026ac <HAL_GPIO_DeInit+0x98>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a5d      	ldr	r2, [pc, #372]	; (80027e4 <HAL_GPIO_DeInit+0x1d0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d019      	beq.n	80026a8 <HAL_GPIO_DeInit+0x94>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a5c      	ldr	r2, [pc, #368]	; (80027e8 <HAL_GPIO_DeInit+0x1d4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_GPIO_DeInit+0x90>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a5b      	ldr	r2, [pc, #364]	; (80027ec <HAL_GPIO_DeInit+0x1d8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00d      	beq.n	80026a0 <HAL_GPIO_DeInit+0x8c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a5a      	ldr	r2, [pc, #360]	; (80027f0 <HAL_GPIO_DeInit+0x1dc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <HAL_GPIO_DeInit+0x88>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a59      	ldr	r2, [pc, #356]	; (80027f4 <HAL_GPIO_DeInit+0x1e0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_GPIO_DeInit+0x84>
 8002694:	2306      	movs	r3, #6
 8002696:	e00c      	b.n	80026b2 <HAL_GPIO_DeInit+0x9e>
 8002698:	2307      	movs	r3, #7
 800269a:	e00a      	b.n	80026b2 <HAL_GPIO_DeInit+0x9e>
 800269c:	2305      	movs	r3, #5
 800269e:	e008      	b.n	80026b2 <HAL_GPIO_DeInit+0x9e>
 80026a0:	2304      	movs	r3, #4
 80026a2:	e006      	b.n	80026b2 <HAL_GPIO_DeInit+0x9e>
 80026a4:	2303      	movs	r3, #3
 80026a6:	e004      	b.n	80026b2 <HAL_GPIO_DeInit+0x9e>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e002      	b.n	80026b2 <HAL_GPIO_DeInit+0x9e>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_GPIO_DeInit+0x9e>
 80026b0:	2300      	movs	r3, #0
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	f002 0203 	and.w	r2, r2, #3
 80026b8:	0092      	lsls	r2, r2, #2
 80026ba:	4093      	lsls	r3, r2
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d132      	bne.n	8002728 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80026c2:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <HAL_GPIO_DeInit+0x1e4>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	494b      	ldr	r1, [pc, #300]	; (80027f8 <HAL_GPIO_DeInit+0x1e4>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80026d0:	4b49      	ldr	r3, [pc, #292]	; (80027f8 <HAL_GPIO_DeInit+0x1e4>)
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	4947      	ldr	r1, [pc, #284]	; (80027f8 <HAL_GPIO_DeInit+0x1e4>)
 80026da:	4013      	ands	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80026de:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <HAL_GPIO_DeInit+0x1e4>)
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	4944      	ldr	r1, [pc, #272]	; (80027f8 <HAL_GPIO_DeInit+0x1e4>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80026ec:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <HAL_GPIO_DeInit+0x1e4>)
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	4940      	ldr	r1, [pc, #256]	; (80027f8 <HAL_GPIO_DeInit+0x1e4>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	220f      	movs	r2, #15
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800270a:	4a34      	ldr	r2, [pc, #208]	; (80027dc <HAL_GPIO_DeInit+0x1c8>)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	3302      	adds	r3, #2
 8002712:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43da      	mvns	r2, r3
 800271a:	4830      	ldr	r0, [pc, #192]	; (80027dc <HAL_GPIO_DeInit+0x1c8>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	400a      	ands	r2, r1
 8002722:	3302      	adds	r3, #2
 8002724:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2103      	movs	r1, #3
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	08da      	lsrs	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	220f      	movs	r2, #15
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	08d2      	lsrs	r2, r2, #3
 800275c:	4019      	ands	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3208      	adds	r2, #8
 8002762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2103      	movs	r1, #3
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	2101      	movs	r1, #1
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	401a      	ands	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	2103      	movs	r1, #3
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	401a      	ands	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027aa:	2101      	movs	r1, #1
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	401a      	ands	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f47f af2b 	bne.w	8002624 <HAL_GPIO_DeInit+0x10>
  }
}
 80027ce:	bf00      	nop
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40010000 	.word	0x40010000
 80027e0:	48000400 	.word	0x48000400
 80027e4:	48000800 	.word	0x48000800
 80027e8:	48000c00 	.word	0x48000c00
 80027ec:	48001000 	.word	0x48001000
 80027f0:	48001400 	.word	0x48001400
 80027f4:	48001800 	.word	0x48001800
 80027f8:	40010400 	.word	0x40010400

080027fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
 8002808:	4613      	mov	r3, r2
 800280a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800280c:	787b      	ldrb	r3, [r7, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002818:	e002      	b.n	8002820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f806 	bl	800285c <HAL_GPIO_EXTI_Callback>
  }
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e081      	b.n	8002988 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d106      	bne.n	800289e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7fe fd37 	bl	800130c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2224      	movs	r2, #36	; 0x24
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d107      	bne.n	80028ec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	e006      	b.n	80028fa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d104      	bne.n	800290c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800290a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800291a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800292e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69d9      	ldr	r1, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e021      	b.n	80029e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2224      	movs	r2, #36	; 0x24
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fd04 	bl	80013c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	4608      	mov	r0, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	817b      	strh	r3, [r7, #10]
 8002a02:	460b      	mov	r3, r1
 8002a04:	813b      	strh	r3, [r7, #8]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	f040 80f9 	bne.w	8002c0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x34>
 8002a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0ed      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Mem_Write+0x4e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e0e6      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a46:	f7ff f9ed 	bl	8001e24 <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2319      	movs	r3, #25
 8002a52:	2201      	movs	r2, #1
 8002a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fac3 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0d1      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2221      	movs	r2, #33	; 0x21
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2240      	movs	r2, #64	; 0x40
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a90:	88f8      	ldrh	r0, [r7, #6]
 8002a92:	893a      	ldrh	r2, [r7, #8]
 8002a94:	8979      	ldrh	r1, [r7, #10]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f9d3 	bl	8002e4c <I2C_RequestMemoryWrite>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0a9      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2bff      	cmp	r3, #255	; 0xff
 8002ac0:	d90e      	bls.n	8002ae0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	22ff      	movs	r2, #255	; 0xff
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	8979      	ldrh	r1, [r7, #10]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fc2b 	bl	8003334 <I2C_TransferConfig>
 8002ade:	e00f      	b.n	8002b00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	8979      	ldrh	r1, [r7, #10]
 8002af2:	2300      	movs	r3, #0
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fc1a 	bl	8003334 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 faad 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e07b      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d034      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d130      	bne.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fa3f 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e04d      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2bff      	cmp	r3, #255	; 0xff
 8002b78:	d90e      	bls.n	8002b98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	22ff      	movs	r2, #255	; 0xff
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fbcf 	bl	8003334 <I2C_TransferConfig>
 8002b96:	e00f      	b.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fbbe 	bl	8003334 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d19e      	bne.n	8002b00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fa8c 	bl	80030e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e01a      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_I2C_Mem_Write+0x224>)
 8002bea:	400b      	ands	r3, r1
 8002bec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	fe00e800 	.word	0xfe00e800

08002c18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	817b      	strh	r3, [r7, #10]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	813b      	strh	r3, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	f040 80fd 	bne.w	8002e3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x34>
 8002c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d105      	bne.n	8002c58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0f1      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Mem_Read+0x4e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0ea      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c6e:	f7ff f8d9 	bl	8001e24 <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2319      	movs	r3, #25
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f9af 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0d5      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2222      	movs	r2, #34	; 0x22
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cb8:	88f8      	ldrh	r0, [r7, #6]
 8002cba:	893a      	ldrh	r2, [r7, #8]
 8002cbc:	8979      	ldrh	r1, [r7, #10]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f913 	bl	8002ef4 <I2C_RequestMemoryRead>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0ad      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2bff      	cmp	r3, #255	; 0xff
 8002ce8:	d90e      	bls.n	8002d08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <HAL_I2C_Mem_Read+0x22c>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fb17 	bl	8003334 <I2C_TransferConfig>
 8002d06:	e00f      	b.n	8002d28 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_I2C_Mem_Read+0x22c>)
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fb06 	bl	8003334 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2104      	movs	r1, #4
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f956 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07c      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d034      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d130      	bne.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f927 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e04d      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d90e      	bls.n	8002dc8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	8979      	ldrh	r1, [r7, #10]
 8002db8:	2300      	movs	r3, #0
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fab7 	bl	8003334 <I2C_TransferConfig>
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 faa6 	bl	8003334 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d19a      	bne.n	8002d28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f974 	bl	80030e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e01a      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_I2C_Mem_Read+0x230>)
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	80002400 	.word	0x80002400
 8002e48:	fe00e800 	.word	0xfe00e800

08002e4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	817b      	strh	r3, [r7, #10]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	813b      	strh	r3, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	8979      	ldrh	r1, [r7, #10]
 8002e6c:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <I2C_RequestMemoryWrite+0xa4>)
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fa5d 	bl	8003334 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f8f0 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e02c      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e94:	893b      	ldrh	r3, [r7, #8]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e9e:	e015      	b.n	8002ecc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	69b9      	ldr	r1, [r7, #24]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f8d6 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e012      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec2:	893b      	ldrh	r3, [r7, #8]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f884 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	80002000 	.word	0x80002000

08002ef4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	460b      	mov	r3, r1
 8002f08:	813b      	strh	r3, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	8979      	ldrh	r1, [r7, #10]
 8002f14:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <I2C_RequestMemoryRead+0xa4>)
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fa0a 	bl	8003334 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	69b9      	ldr	r1, [r7, #24]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f89d 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e02c      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d105      	bne.n	8002f46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3a:	893b      	ldrh	r3, [r7, #8]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
 8002f44:	e015      	b.n	8002f72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f883 	bl	8003064 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e012      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f68:	893b      	ldrh	r3, [r7, #8]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2140      	movs	r1, #64	; 0x40
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f831 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	80002000 	.word	0x80002000

08002f9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d103      	bne.n	8002fba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d007      	beq.n	8002fd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	619a      	str	r2, [r3, #24]
  }
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff4:	e022      	b.n	800303c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d01e      	beq.n	800303c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffe:	f7fe ff11 	bl	8001e24 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d302      	bcc.n	8003014 <I2C_WaitOnFlagUntilTimeout+0x30>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d113      	bne.n	800303c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e00f      	b.n	800305c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4013      	ands	r3, r2
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	429a      	cmp	r2, r3
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	429a      	cmp	r2, r3
 8003058:	d0cd      	beq.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003070:	e02c      	b.n	80030cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f870 	bl	800315c <I2C_IsErrorOccurred>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e02a      	b.n	80030dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d01e      	beq.n	80030cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7fe fec9 	bl	8001e24 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d113      	bne.n	80030cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e007      	b.n	80030dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d1cb      	bne.n	8003072 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f0:	e028      	b.n	8003144 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f830 	bl	800315c <I2C_IsErrorOccurred>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e026      	b.n	8003154 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7fe fe8d 	bl	8001e24 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	d302      	bcc.n	800311c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d113      	bne.n	8003144 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e007      	b.n	8003154 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b20      	cmp	r3, #32
 8003150:	d1cf      	bne.n	80030f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d075      	beq.n	8003274 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2210      	movs	r2, #16
 800318e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003190:	e056      	b.n	8003240 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d052      	beq.n	8003240 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe fe43 	bl	8001e24 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_IsErrorOccurred+0x54>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d147      	bne.n	8003240 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d2:	d12e      	bne.n	8003232 <I2C_IsErrorOccurred+0xd6>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031da:	d02a      	beq.n	8003232 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d027      	beq.n	8003232 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031f2:	f7fe fe17 	bl	8001e24 <HAL_GetTick>
 80031f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f8:	e01b      	b.n	8003232 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031fa:	f7fe fe13 	bl	8001e24 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b19      	cmp	r3, #25
 8003206:	d914      	bls.n	8003232 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b20      	cmp	r3, #32
 800323e:	d1dc      	bne.n	80031fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b20      	cmp	r3, #32
 800324c:	d003      	beq.n	8003256 <I2C_IsErrorOccurred+0xfa>
 800324e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003252:	2b00      	cmp	r3, #0
 8003254:	d09d      	beq.n	8003192 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2220      	movs	r2, #32
 8003264:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003296:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f043 0308 	orr.w	r3, r3, #8
 80032ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80032e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01c      	beq.n	8003324 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7ff fe56 	bl	8002f9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <I2C_IsErrorOccurred+0x1d4>)
 80032fc:	400b      	ands	r3, r1
 80032fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	431a      	orrs	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003328:	4618      	mov	r0, r3
 800332a:	3728      	adds	r7, #40	; 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	fe00e800 	.word	0xfe00e800

08003334 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	817b      	strh	r3, [r7, #10]
 8003342:	4613      	mov	r3, r2
 8003344:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800334c:	7a7b      	ldrb	r3, [r7, #9]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003354:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	4313      	orrs	r3, r2
 800335e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003362:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	0d5b      	lsrs	r3, r3, #21
 800336e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <I2C_TransferConfig+0x60>)
 8003374:	430b      	orrs	r3, r1
 8003376:	43db      	mvns	r3, r3
 8003378:	ea02 0103 	and.w	r1, r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	03ff63ff 	.word	0x03ff63ff

08003398 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d138      	bne.n	8003420 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e032      	b.n	8003422 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b20      	cmp	r3, #32
 8003442:	d139      	bne.n	80034b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800344e:	2302      	movs	r3, #2
 8003450:	e033      	b.n	80034ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2224      	movs	r2, #36	; 0x24
 800345e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003480:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c8:	b08f      	sub	sp, #60	; 0x3c
 80034ca:	af0a      	add	r7, sp, #40	; 0x28
 80034cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e116      	b.n	8003706 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fe f8b8 	bl	8001668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2203      	movs	r2, #3
 80034fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f002 fb43 	bl	8005ba2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	687e      	ldr	r6, [r7, #4]
 8003524:	466d      	mov	r5, sp
 8003526:	f106 0410 	add.w	r4, r6, #16
 800352a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003532:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003536:	e885 0003 	stmia.w	r5, {r0, r1}
 800353a:	1d33      	adds	r3, r6, #4
 800353c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800353e:	6838      	ldr	r0, [r7, #0]
 8003540:	f002 fb03 	bl	8005b4a <USB_CoreInit>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e0d7      	b.n	8003706 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f002 fb31 	bl	8005bc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	e04a      	b.n	80035fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	333d      	adds	r3, #61	; 0x3d
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	333c      	adds	r3, #60	; 0x3c
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	b298      	uxth	r0, r3
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	3344      	adds	r3, #68	; 0x44
 80035a4:	4602      	mov	r2, r0
 80035a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3340      	adds	r3, #64	; 0x40
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3348      	adds	r3, #72	; 0x48
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334c      	adds	r3, #76	; 0x4c
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3354      	adds	r3, #84	; 0x54
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	3301      	adds	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	d3af      	bcc.n	8003568 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	e044      	b.n	8003698 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	3301      	adds	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d3b5      	bcc.n	800360e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	687e      	ldr	r6, [r7, #4]
 80036aa:	466d      	mov	r5, sp
 80036ac:	f106 0410 	add.w	r4, r6, #16
 80036b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80036c0:	1d33      	adds	r3, r6, #4
 80036c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c4:	6838      	ldr	r0, [r7, #0]
 80036c6:	f002 fac9 	bl	8005c5c <USB_DevInit>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e014      	b.n	8003706 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d102      	bne.n	80036fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f80a 	bl	800370e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f002 fc75 	bl	8005fee <USB_DevDisconnect>

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800370e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003740:	f043 0303 	orr.w	r3, r3, #3
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003766:	6013      	str	r3, [r2, #0]
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40007000 	.word	0x40007000

08003778 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <HAL_PWREx_GetVoltageRange+0x18>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40007000 	.word	0x40007000

08003794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a2:	d130      	bne.n	8003806 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a4:	4b23      	ldr	r3, [pc, #140]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b0:	d038      	beq.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037ba:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2232      	movs	r2, #50	; 0x32
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	4a1b      	ldr	r2, [pc, #108]	; (800383c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0c9b      	lsrs	r3, r3, #18
 80037d4:	3301      	adds	r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d8:	e002      	b.n	80037e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3b01      	subs	r3, #1
 80037de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ec:	d102      	bne.n	80037f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1f2      	bne.n	80037da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003800:	d110      	bne.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e00f      	b.n	8003826 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800380e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003812:	d007      	beq.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800381c:	4a05      	ldr	r2, [pc, #20]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003822:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40007000 	.word	0x40007000
 8003838:	2000026c 	.word	0x2000026c
 800383c:	431bde83 	.word	0x431bde83

08003840 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_PWREx_EnableVddUSB+0x1c>)
 800384a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800384e:	6053      	str	r3, [r2, #4]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40007000 	.word	0x40007000

08003860 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7fe fadc 	bl	8001e24 <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e063      	b.n	8003940 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fd fdbf 	bl	8001410 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003892:	f241 3188 	movw	r1, #5000	; 0x1388
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f858 	bl	800394c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	021a      	lsls	r2, r3, #8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	2120      	movs	r1, #32
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f850 	bl	8003968 <QSPI_WaitFlagStateUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d131      	bne.n	8003936 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038dc:	f023 0310 	bic.w	r3, r3, #16
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6852      	ldr	r2, [r2, #4]
 80038e4:	0611      	lsls	r1, r2, #24
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_QSPI_Init+0xe8>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6912      	ldr	r2, [r2, #16]
 8003902:	0411      	lsls	r1, r2, #16
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6952      	ldr	r2, [r2, #20]
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6992      	ldr	r2, [r2, #24]
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800393e:	7afb      	ldrb	r3, [r7, #11]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	ffe0f8fe 	.word	0xffe0f8fe

0800394c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003978:	e01a      	b.n	80039b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d016      	beq.n	80039b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7fe fa4f 	bl	8001e24 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10b      	bne.n	80039b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2204      	movs	r2, #4
 800399c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e00e      	b.n	80039ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf14      	ite	ne
 80039be:	2301      	movne	r3, #1
 80039c0:	2300      	moveq	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d1d6      	bne.n	800397a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e3ca      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ea:	4b97      	ldr	r3, [pc, #604]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f4:	4b94      	ldr	r3, [pc, #592]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80e4 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_RCC_OscConfig+0x4a>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	f040 808b 	bne.w	8003b30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	f040 8087 	bne.w	8003b30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a22:	4b89      	ldr	r3, [pc, #548]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_RCC_OscConfig+0x62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e3a2      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1a      	ldr	r2, [r3, #32]
 8003a3e:	4b82      	ldr	r3, [pc, #520]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d004      	beq.n	8003a54 <HAL_RCC_OscConfig+0x7c>
 8003a4a:	4b7f      	ldr	r3, [pc, #508]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a52:	e005      	b.n	8003a60 <HAL_RCC_OscConfig+0x88>
 8003a54:	4b7c      	ldr	r3, [pc, #496]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d223      	bcs.n	8003aac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fd55 	bl	8004518 <RCC_SetFlashLatencyFromMSIRange>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e383      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a78:	4b73      	ldr	r3, [pc, #460]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a72      	ldr	r2, [pc, #456]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	f043 0308 	orr.w	r3, r3, #8
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b70      	ldr	r3, [pc, #448]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	496d      	ldr	r1, [pc, #436]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a96:	4b6c      	ldr	r3, [pc, #432]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	4968      	ldr	r1, [pc, #416]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
 8003aaa:	e025      	b.n	8003af8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aac:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a65      	ldr	r2, [pc, #404]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ab2:	f043 0308 	orr.w	r3, r3, #8
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b63      	ldr	r3, [pc, #396]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4960      	ldr	r1, [pc, #384]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aca:	4b5f      	ldr	r3, [pc, #380]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	495b      	ldr	r1, [pc, #364]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fd15 	bl	8004518 <RCC_SetFlashLatencyFromMSIRange>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e343      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003af8:	f000 fc4a 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b52      	ldr	r3, [pc, #328]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	4950      	ldr	r1, [pc, #320]	; (8003c4c <HAL_RCC_OscConfig+0x274>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
 8003b14:	4a4e      	ldr	r2, [pc, #312]	; (8003c50 <HAL_RCC_OscConfig+0x278>)
 8003b16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b18:	4b4e      	ldr	r3, [pc, #312]	; (8003c54 <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe f931 	bl	8001d84 <HAL_InitTick>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d052      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	e327      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d032      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b38:	4b43      	ldr	r3, [pc, #268]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a42      	ldr	r2, [pc, #264]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b44:	f7fe f96e 	bl	8001e24 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b4c:	f7fe f96a 	bl	8001e24 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e310      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b5e:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b6a:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a36      	ldr	r2, [pc, #216]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b70:	f043 0308 	orr.w	r3, r3, #8
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	4931      	ldr	r1, [pc, #196]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b88:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	492c      	ldr	r1, [pc, #176]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]
 8003b9c:	e01a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b9e:	4b2a      	ldr	r3, [pc, #168]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a29      	ldr	r2, [pc, #164]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003baa:	f7fe f93b 	bl	8001e24 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bb2:	f7fe f937 	bl	8001e24 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e2dd      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x1da>
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d074      	beq.n	8003cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d005      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x21a>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b0c      	cmp	r3, #12
 8003bea:	d10e      	bne.n	8003c0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d10b      	bne.n	8003c0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d064      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x2f0>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d160      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e2ba      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c12:	d106      	bne.n	8003c22 <HAL_RCC_OscConfig+0x24a>
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	e026      	b.n	8003c70 <HAL_RCC_OscConfig+0x298>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c2a:	d115      	bne.n	8003c58 <HAL_RCC_OscConfig+0x280>
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a05      	ldr	r2, [pc, #20]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a02      	ldr	r2, [pc, #8]	; (8003c48 <HAL_RCC_OscConfig+0x270>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e014      	b.n	8003c70 <HAL_RCC_OscConfig+0x298>
 8003c46:	bf00      	nop
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08006ab8 	.word	0x08006ab8
 8003c50:	2000026c 	.word	0x2000026c
 8003c54:	20000270 	.word	0x20000270
 8003c58:	4ba0      	ldr	r3, [pc, #640]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a9f      	ldr	r2, [pc, #636]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b9d      	ldr	r3, [pc, #628]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a9c      	ldr	r2, [pc, #624]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe f8d4 	bl	8001e24 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe f8d0 	bl	8001e24 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e276      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c92:	4b92      	ldr	r3, [pc, #584]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x2a8>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe f8c0 	bl	8001e24 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fe f8bc 	bl	8001e24 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e262      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cba:	4b88      	ldr	r3, [pc, #544]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x2d0>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d060      	beq.n	8003d98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x310>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d119      	bne.n	8003d16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d116      	bne.n	8003d16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce8:	4b7c      	ldr	r3, [pc, #496]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_OscConfig+0x328>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e23f      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d00:	4b76      	ldr	r3, [pc, #472]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	4973      	ldr	r1, [pc, #460]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d14:	e040      	b.n	8003d98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d023      	beq.n	8003d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d1e:	4b6f      	ldr	r3, [pc, #444]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a6e      	ldr	r2, [pc, #440]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fe f87b 	bl	8001e24 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fe f877 	bl	8001e24 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e21d      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d44:	4b65      	ldr	r3, [pc, #404]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b62      	ldr	r3, [pc, #392]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	495f      	ldr	r1, [pc, #380]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
 8003d64:	e018      	b.n	8003d98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d66:	4b5d      	ldr	r3, [pc, #372]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a5c      	ldr	r2, [pc, #368]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fe f857 	bl	8001e24 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d7a:	f7fe f853 	bl	8001e24 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e1f9      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d8c:	4b53      	ldr	r3, [pc, #332]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d03c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dac:	4b4b      	ldr	r3, [pc, #300]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db2:	4a4a      	ldr	r2, [pc, #296]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fe f832 	bl	8001e24 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fe f82e 	bl	8001e24 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1d4      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd6:	4b41      	ldr	r3, [pc, #260]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ef      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x3ec>
 8003de4:	e01b      	b.n	8003e1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de6:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dec:	4a3b      	ldr	r2, [pc, #236]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df6:	f7fe f815 	bl	8001e24 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fe f811 	bl	8001e24 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e1b7      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e10:	4b32      	ldr	r3, [pc, #200]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ef      	bne.n	8003dfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80a6 	beq.w	8003f78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e40:	4a26      	ldr	r2, [pc, #152]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e46:	6593      	str	r3, [r2, #88]	; 0x58
 8003e48:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e54:	2301      	movs	r3, #1
 8003e56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <HAL_RCC_OscConfig+0x508>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d118      	bne.n	8003e96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e64:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <HAL_RCC_OscConfig+0x508>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <HAL_RCC_OscConfig+0x508>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e70:	f7fd ffd8 	bl	8001e24 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e78:	f7fd ffd4 	bl	8001e24 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e17a      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <HAL_RCC_OscConfig+0x508>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d108      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4d8>
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eae:	e029      	b.n	8003f04 <HAL_RCC_OscConfig+0x52c>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b05      	cmp	r3, #5
 8003eb6:	d115      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x50c>
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebe:	4a07      	ldr	r2, [pc, #28]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003ec0:	f043 0304 	orr.w	r3, r3, #4
 8003ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	4a03      	ldr	r2, [pc, #12]	; (8003edc <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed8:	e014      	b.n	8003f04 <HAL_RCC_OscConfig+0x52c>
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	4b9c      	ldr	r3, [pc, #624]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	4a9b      	ldr	r2, [pc, #620]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ef4:	4b98      	ldr	r3, [pc, #608]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	4a97      	ldr	r2, [pc, #604]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d016      	beq.n	8003f3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fd ff8a 	bl	8001e24 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f14:	f7fd ff86 	bl	8001e24 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e12a      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2a:	4b8b      	ldr	r3, [pc, #556]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0ed      	beq.n	8003f14 <HAL_RCC_OscConfig+0x53c>
 8003f38:	e015      	b.n	8003f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3a:	f7fd ff73 	bl	8001e24 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f42:	f7fd ff6f 	bl	8001e24 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e113      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f58:	4b7f      	ldr	r3, [pc, #508]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1ed      	bne.n	8003f42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f66:	7ffb      	ldrb	r3, [r7, #31]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6c:	4b7a      	ldr	r3, [pc, #488]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	4a79      	ldr	r2, [pc, #484]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8003f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80fe 	beq.w	800417e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	f040 80d0 	bne.w	800412c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f8c:	4b72      	ldr	r3, [pc, #456]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0203 	and.w	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d130      	bne.n	8004002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	3b01      	subs	r3, #1
 8003fac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d127      	bne.n	8004002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d11f      	bne.n	8004002 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fcc:	2a07      	cmp	r2, #7
 8003fce:	bf14      	ite	ne
 8003fd0:	2201      	movne	r2, #1
 8003fd2:	2200      	moveq	r2, #0
 8003fd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d113      	bne.n	8004002 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d109      	bne.n	8004002 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d06e      	beq.n	80040e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d069      	beq.n	80040dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004008:	4b53      	ldr	r3, [pc, #332]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d105      	bne.n	8004020 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004014:	4b50      	ldr	r3, [pc, #320]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0ad      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004024:	4b4c      	ldr	r3, [pc, #304]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a4b      	ldr	r2, [pc, #300]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 800402a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004030:	f7fd fef8 	bl	8001e24 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd fef4 	bl	8001e24 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e09a      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404a:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004056:	4b40      	ldr	r3, [pc, #256]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	4b40      	ldr	r3, [pc, #256]	; (800415c <HAL_RCC_OscConfig+0x784>)
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004066:	3a01      	subs	r2, #1
 8004068:	0112      	lsls	r2, r2, #4
 800406a:	4311      	orrs	r1, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004070:	0212      	lsls	r2, r2, #8
 8004072:	4311      	orrs	r1, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004078:	0852      	lsrs	r2, r2, #1
 800407a:	3a01      	subs	r2, #1
 800407c:	0552      	lsls	r2, r2, #21
 800407e:	4311      	orrs	r1, r2
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004084:	0852      	lsrs	r2, r2, #1
 8004086:	3a01      	subs	r2, #1
 8004088:	0652      	lsls	r2, r2, #25
 800408a:	4311      	orrs	r1, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004090:	0912      	lsrs	r2, r2, #4
 8004092:	0452      	lsls	r2, r2, #17
 8004094:	430a      	orrs	r2, r1
 8004096:	4930      	ldr	r1, [pc, #192]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8004098:	4313      	orrs	r3, r2
 800409a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800409c:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2d      	ldr	r2, [pc, #180]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 80040a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 80040ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040b4:	f7fd feb6 	bl	8001e24 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fd feb2 	bl	8001e24 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e058      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ce:	4b22      	ldr	r3, [pc, #136]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040da:	e050      	b.n	800417e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e04f      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d148      	bne.n	800417e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040ec:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a19      	ldr	r2, [pc, #100]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 80040f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a16      	ldr	r2, [pc, #88]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 80040fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004102:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004104:	f7fd fe8e 	bl	8001e24 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd fe8a 	bl	8001e24 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e030      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x734>
 800412a:	e028      	b.n	800417e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d023      	beq.n	800417a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a08      	ldr	r2, [pc, #32]	; (8004158 <HAL_RCC_OscConfig+0x780>)
 8004138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fd fe71 	bl	8001e24 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004144:	e00c      	b.n	8004160 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004146:	f7fd fe6d 	bl	8001e24 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d905      	bls.n	8004160 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e013      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
 8004158:	40021000 	.word	0x40021000
 800415c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_RCC_OscConfig+0x7b0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ec      	bne.n	8004146 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_RCC_OscConfig+0x7b0>)
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	4905      	ldr	r1, [pc, #20]	; (8004188 <HAL_RCC_OscConfig+0x7b0>)
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_RCC_OscConfig+0x7b4>)
 8004174:	4013      	ands	r3, r2
 8004176:	60cb      	str	r3, [r1, #12]
 8004178:	e001      	b.n	800417e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40021000 	.word	0x40021000
 800418c:	feeefffc 	.word	0xfeeefffc

08004190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0e7      	b.n	8004374 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b75      	ldr	r3, [pc, #468]	; (800437c <HAL_RCC_ClockConfig+0x1ec>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d910      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b72      	ldr	r3, [pc, #456]	; (800437c <HAL_RCC_ClockConfig+0x1ec>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 0207 	bic.w	r2, r3, #7
 80041ba:	4970      	ldr	r1, [pc, #448]	; (800437c <HAL_RCC_ClockConfig+0x1ec>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b6e      	ldr	r3, [pc, #440]	; (800437c <HAL_RCC_ClockConfig+0x1ec>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0cf      	b.n	8004374 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	4b66      	ldr	r3, [pc, #408]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d908      	bls.n	8004202 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f0:	4b63      	ldr	r3, [pc, #396]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4960      	ldr	r1, [pc, #384]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d04c      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004216:	4b5a      	ldr	r3, [pc, #360]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d121      	bne.n	8004266 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e0a6      	b.n	8004374 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800422e:	4b54      	ldr	r3, [pc, #336]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d115      	bne.n	8004266 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e09a      	b.n	8004374 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004246:	4b4e      	ldr	r3, [pc, #312]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e08e      	b.n	8004374 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004256:	4b4a      	ldr	r3, [pc, #296]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e086      	b.n	8004374 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004266:	4b46      	ldr	r3, [pc, #280]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 0203 	bic.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4943      	ldr	r1, [pc, #268]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004274:	4313      	orrs	r3, r2
 8004276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004278:	f7fd fdd4 	bl	8001e24 <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fd fdd0 	bl	8001e24 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e06e      	b.n	8004374 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b3a      	ldr	r3, [pc, #232]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 020c 	and.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1eb      	bne.n	8004280 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	4b31      	ldr	r3, [pc, #196]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d208      	bcs.n	80042d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c4:	4b2e      	ldr	r3, [pc, #184]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	492b      	ldr	r1, [pc, #172]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_RCC_ClockConfig+0x1ec>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d210      	bcs.n	8004306 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_RCC_ClockConfig+0x1ec>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 0207 	bic.w	r2, r3, #7
 80042ec:	4923      	ldr	r1, [pc, #140]	; (800437c <HAL_RCC_ClockConfig+0x1ec>)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f4:	4b21      	ldr	r3, [pc, #132]	; (800437c <HAL_RCC_ClockConfig+0x1ec>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d001      	beq.n	8004306 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e036      	b.n	8004374 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004312:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	4918      	ldr	r1, [pc, #96]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d009      	beq.n	8004344 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004330:	4b13      	ldr	r3, [pc, #76]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4910      	ldr	r1, [pc, #64]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 8004340:	4313      	orrs	r3, r2
 8004342:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004344:	f000 f824 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <HAL_RCC_ClockConfig+0x1f0>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	490b      	ldr	r1, [pc, #44]	; (8004384 <HAL_RCC_ClockConfig+0x1f4>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	4a09      	ldr	r2, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1f8>)
 8004362:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_ClockConfig+0x1fc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fd fd0b 	bl	8001d84 <HAL_InitTick>
 800436e:	4603      	mov	r3, r0
 8004370:	72fb      	strb	r3, [r7, #11]

  return status;
 8004372:	7afb      	ldrb	r3, [r7, #11]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40022000 	.word	0x40022000
 8004380:	40021000 	.word	0x40021000
 8004384:	08006ab8 	.word	0x08006ab8
 8004388:	2000026c 	.word	0x2000026c
 800438c:	20000270 	.word	0x20000270

08004390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004390:	b480      	push	{r7}
 8004392:	b089      	sub	sp, #36	; 0x24
 8004394:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800439e:	4b3e      	ldr	r3, [pc, #248]	; (8004498 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043a8:	4b3b      	ldr	r3, [pc, #236]	; (8004498 <HAL_RCC_GetSysClockFreq+0x108>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x34>
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b0c      	cmp	r3, #12
 80043bc:	d121      	bne.n	8004402 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d11e      	bne.n	8004402 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043c4:	4b34      	ldr	r3, [pc, #208]	; (8004498 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043d0:	4b31      	ldr	r3, [pc, #196]	; (8004498 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	e005      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043ec:	4a2b      	ldr	r2, [pc, #172]	; (800449c <HAL_RCC_GetSysClockFreq+0x10c>)
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10d      	bne.n	8004418 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d102      	bne.n	800440e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004408:	4b25      	ldr	r3, [pc, #148]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	e004      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d101      	bne.n	8004418 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004414:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004416:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b0c      	cmp	r3, #12
 800441c:	d134      	bne.n	8004488 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800441e:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <HAL_RCC_GetSysClockFreq+0x108>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d003      	beq.n	8004436 <HAL_RCC_GetSysClockFreq+0xa6>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d003      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0xac>
 8004434:	e005      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004436:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004438:	617b      	str	r3, [r7, #20]
      break;
 800443a:	e005      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800443c:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800443e:	617b      	str	r3, [r7, #20]
      break;
 8004440:	e002      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	617b      	str	r3, [r7, #20]
      break;
 8004446:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_RCC_GetSysClockFreq+0x108>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	3301      	adds	r3, #1
 8004454:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <HAL_RCC_GetSysClockFreq+0x108>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	fb03 f202 	mul.w	r2, r3, r2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <HAL_RCC_GetSysClockFreq+0x108>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	0e5b      	lsrs	r3, r3, #25
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	3301      	adds	r3, #1
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004488:	69bb      	ldr	r3, [r7, #24]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3724      	adds	r7, #36	; 0x24
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	08006ad0 	.word	0x08006ad0
 80044a0:	00f42400 	.word	0x00f42400
 80044a4:	007a1200 	.word	0x007a1200

080044a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	2000026c 	.word	0x2000026c

080044c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044c4:	f7ff fff0 	bl	80044a8 <HAL_RCC_GetHCLKFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	4904      	ldr	r1, [pc, #16]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000
 80044e8:	08006ac8 	.word	0x08006ac8

080044ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044f0:	f7ff ffda 	bl	80044a8 <HAL_RCC_GetHCLKFreq>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	0adb      	lsrs	r3, r3, #11
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	4904      	ldr	r1, [pc, #16]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004502:	5ccb      	ldrb	r3, [r1, r3]
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40021000 	.word	0x40021000
 8004514:	08006ac8 	.word	0x08006ac8

08004518 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004524:	4b2a      	ldr	r3, [pc, #168]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004530:	f7ff f922 	bl	8003778 <HAL_PWREx_GetVoltageRange>
 8004534:	6178      	str	r0, [r7, #20]
 8004536:	e014      	b.n	8004562 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004538:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	4a24      	ldr	r2, [pc, #144]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004542:	6593      	str	r3, [r2, #88]	; 0x58
 8004544:	4b22      	ldr	r3, [pc, #136]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004550:	f7ff f912 	bl	8003778 <HAL_PWREx_GetVoltageRange>
 8004554:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004556:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800455c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004560:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004568:	d10b      	bne.n	8004582 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b80      	cmp	r3, #128	; 0x80
 800456e:	d919      	bls.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2ba0      	cmp	r3, #160	; 0xa0
 8004574:	d902      	bls.n	800457c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004576:	2302      	movs	r3, #2
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	e013      	b.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800457c:	2301      	movs	r3, #1
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e010      	b.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b80      	cmp	r3, #128	; 0x80
 8004586:	d902      	bls.n	800458e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004588:	2303      	movs	r3, #3
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	e00a      	b.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b80      	cmp	r3, #128	; 0x80
 8004592:	d102      	bne.n	800459a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004594:	2302      	movs	r3, #2
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	e004      	b.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b70      	cmp	r3, #112	; 0x70
 800459e:	d101      	bne.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045a0:	2301      	movs	r3, #1
 80045a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 0207 	bic.w	r2, r3, #7
 80045ac:	4909      	ldr	r1, [pc, #36]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d001      	beq.n	80045c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40022000 	.word	0x40022000

080045d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045e0:	2300      	movs	r3, #0
 80045e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045e4:	2300      	movs	r3, #0
 80045e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d041      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045fc:	d02a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004602:	d824      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004608:	d008      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800460a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800460e:	d81e      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004618:	d010      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800461a:	e018      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800461c:	4b86      	ldr	r3, [pc, #536]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a85      	ldr	r2, [pc, #532]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004626:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004628:	e015      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f000 facb 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800463a:	e00c      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3320      	adds	r3, #32
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fbb6 	bl	8004db4 <RCCEx_PLLSAI2_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800464c:	e003      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	74fb      	strb	r3, [r7, #19]
      break;
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004656:	7cfb      	ldrb	r3, [r7, #19]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800465c:	4b76      	ldr	r3, [pc, #472]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466a:	4973      	ldr	r1, [pc, #460]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004672:	e001      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d041      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004688:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800468c:	d02a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800468e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004692:	d824      	bhi.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004694:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004698:	d008      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800469a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800469e:	d81e      	bhi.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046a8:	d010      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046aa:	e018      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046ac:	4b62      	ldr	r3, [pc, #392]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a61      	ldr	r2, [pc, #388]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046b8:	e015      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3304      	adds	r3, #4
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fa83 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ca:	e00c      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3320      	adds	r3, #32
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fb6e 	bl	8004db4 <RCCEx_PLLSAI2_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046dc:	e003      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	74fb      	strb	r3, [r7, #19]
      break;
 80046e2:	e000      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046ec:	4b52      	ldr	r3, [pc, #328]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046fa:	494f      	ldr	r1, [pc, #316]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004702:	e001      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 80a0 	beq.w	8004856 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004716:	2300      	movs	r3, #0
 8004718:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800471a:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004730:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	4a40      	ldr	r2, [pc, #256]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	6593      	str	r3, [r2, #88]	; 0x58
 800473c:	4b3e      	ldr	r3, [pc, #248]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004748:	2301      	movs	r3, #1
 800474a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800474c:	4b3b      	ldr	r3, [pc, #236]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3a      	ldr	r2, [pc, #232]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004756:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004758:	f7fd fb64 	bl	8001e24 <HAL_GetTick>
 800475c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800475e:	e009      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004760:	f7fd fb60 	bl	8001e24 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d902      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	74fb      	strb	r3, [r7, #19]
        break;
 8004772:	e005      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004774:	4b31      	ldr	r3, [pc, #196]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ef      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d15c      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004786:	4b2c      	ldr	r3, [pc, #176]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004790:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01f      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d019      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047b0:	4b21      	ldr	r3, [pc, #132]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	4a20      	ldr	r2, [pc, #128]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047c0:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fd fb1f 	bl	8001e24 <HAL_GetTick>
 80047e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e8:	e00b      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fd fb1b 	bl	8001e24 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d902      	bls.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004800:	e006      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ec      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10c      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004826:	4904      	ldr	r1, [pc, #16]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800482e:	e009      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	74bb      	strb	r3, [r7, #18]
 8004834:	e006      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004844:	7c7b      	ldrb	r3, [r7, #17]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d105      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4b9e      	ldr	r3, [pc, #632]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	4a9d      	ldr	r2, [pc, #628]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004862:	4b98      	ldr	r3, [pc, #608]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f023 0203 	bic.w	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	4994      	ldr	r1, [pc, #592]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004884:	4b8f      	ldr	r3, [pc, #572]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f023 020c 	bic.w	r2, r3, #12
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	498c      	ldr	r1, [pc, #560]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048a6:	4b87      	ldr	r3, [pc, #540]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	4983      	ldr	r1, [pc, #524]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048c8:	4b7e      	ldr	r3, [pc, #504]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	497b      	ldr	r1, [pc, #492]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ea:	4b76      	ldr	r3, [pc, #472]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f8:	4972      	ldr	r1, [pc, #456]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800490c:	4b6d      	ldr	r3, [pc, #436]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491a:	496a      	ldr	r1, [pc, #424]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800492e:	4b65      	ldr	r3, [pc, #404]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493c:	4961      	ldr	r1, [pc, #388]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004950:	4b5c      	ldr	r3, [pc, #368]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495e:	4959      	ldr	r1, [pc, #356]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004972:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004980:	4950      	ldr	r1, [pc, #320]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004994:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	4948      	ldr	r1, [pc, #288]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049b6:	4b43      	ldr	r3, [pc, #268]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c4:	493f      	ldr	r1, [pc, #252]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d028      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049d8:	4b3a      	ldr	r3, [pc, #232]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049e6:	4937      	ldr	r1, [pc, #220]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049f6:	d106      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f8:	4b32      	ldr	r3, [pc, #200]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4a31      	ldr	r2, [pc, #196]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a02:	60d3      	str	r3, [r2, #12]
 8004a04:	e011      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a0e:	d10c      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	2101      	movs	r1, #1
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 f8d8 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a26:	7cfb      	ldrb	r3, [r7, #19]
 8004a28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d028      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a36:	4b23      	ldr	r3, [pc, #140]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	491f      	ldr	r1, [pc, #124]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a54:	d106      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a56:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a60:	60d3      	str	r3, [r2, #12]
 8004a62:	e011      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3304      	adds	r3, #4
 8004a72:	2101      	movs	r1, #1
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 f8a9 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a84:	7cfb      	ldrb	r3, [r7, #19]
 8004a86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02b      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa2:	4908      	ldr	r1, [pc, #32]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab2:	d109      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4a02      	ldr	r2, [pc, #8]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004abe:	60d3      	str	r3, [r2, #12]
 8004ac0:	e014      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004acc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 f877 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ae2:	7cfb      	ldrb	r3, [r7, #19]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ae8:	7cfb      	ldrb	r3, [r7, #19]
 8004aea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004af8:	4b2b      	ldr	r3, [pc, #172]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b06:	4928      	ldr	r1, [pc, #160]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b16:	d10d      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f854 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d014      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b2e:	7cfb      	ldrb	r3, [r7, #19]
 8004b30:	74bb      	strb	r3, [r7, #18]
 8004b32:	e011      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3320      	adds	r3, #32
 8004b42:	2102      	movs	r1, #2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f935 	bl	8004db4 <RCCEx_PLLSAI2_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b4e:	7cfb      	ldrb	r3, [r7, #19]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b64:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b72:	490d      	ldr	r1, [pc, #52]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00b      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b96:	4904      	ldr	r1, [pc, #16]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000

08004bac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004bb6:	f043 0304 	orr.w	r3, r3, #4
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000

08004bcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bda:	4b75      	ldr	r3, [pc, #468]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004be6:	4b72      	ldr	r3, [pc, #456]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0203 	and.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d10d      	bne.n	8004c12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bfe:	4b6c      	ldr	r3, [pc, #432]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d047      	beq.n	8004ca2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	e044      	b.n	8004ca2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d018      	beq.n	8004c52 <RCCEx_PLLSAI1_Config+0x86>
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d825      	bhi.n	8004c70 <RCCEx_PLLSAI1_Config+0xa4>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d002      	beq.n	8004c2e <RCCEx_PLLSAI1_Config+0x62>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d009      	beq.n	8004c40 <RCCEx_PLLSAI1_Config+0x74>
 8004c2c:	e020      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c2e:	4b60      	ldr	r3, [pc, #384]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11d      	bne.n	8004c76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3e:	e01a      	b.n	8004c76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c40:	4b5b      	ldr	r3, [pc, #364]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d116      	bne.n	8004c7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e013      	b.n	8004c7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c52:	4b57      	ldr	r3, [pc, #348]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c5e:	4b54      	ldr	r3, [pc, #336]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c6e:	e006      	b.n	8004c7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      break;
 8004c74:	e004      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c76:	bf00      	nop
 8004c78:	e002      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e000      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c86:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	4944      	ldr	r1, [pc, #272]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d17d      	bne.n	8004da4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ca8:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a40      	ldr	r2, [pc, #256]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb4:	f7fd f8b6 	bl	8001e24 <HAL_GetTick>
 8004cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cba:	e009      	b.n	8004cd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cbc:	f7fd f8b2 	bl	8001e24 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d902      	bls.n	8004cd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cce:	e005      	b.n	8004cdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cd0:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ef      	bne.n	8004cbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d160      	bne.n	8004da4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d111      	bne.n	8004d0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce8:	4b31      	ldr	r3, [pc, #196]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6892      	ldr	r2, [r2, #8]
 8004cf8:	0211      	lsls	r1, r2, #8
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68d2      	ldr	r2, [r2, #12]
 8004cfe:	0912      	lsrs	r2, r2, #4
 8004d00:	0452      	lsls	r2, r2, #17
 8004d02:	430a      	orrs	r2, r1
 8004d04:	492a      	ldr	r1, [pc, #168]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	610b      	str	r3, [r1, #16]
 8004d0a:	e027      	b.n	8004d5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d112      	bne.n	8004d38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d12:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6892      	ldr	r2, [r2, #8]
 8004d22:	0211      	lsls	r1, r2, #8
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6912      	ldr	r2, [r2, #16]
 8004d28:	0852      	lsrs	r2, r2, #1
 8004d2a:	3a01      	subs	r2, #1
 8004d2c:	0552      	lsls	r2, r2, #21
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	491f      	ldr	r1, [pc, #124]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	610b      	str	r3, [r1, #16]
 8004d36:	e011      	b.n	8004d5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d38:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6892      	ldr	r2, [r2, #8]
 8004d48:	0211      	lsls	r1, r2, #8
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6952      	ldr	r2, [r2, #20]
 8004d4e:	0852      	lsrs	r2, r2, #1
 8004d50:	3a01      	subs	r2, #1
 8004d52:	0652      	lsls	r2, r2, #25
 8004d54:	430a      	orrs	r2, r1
 8004d56:	4916      	ldr	r1, [pc, #88]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d5c:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fd f85c 	bl	8001e24 <HAL_GetTick>
 8004d6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d6e:	e009      	b.n	8004d84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d70:	f7fd f858 	bl	8001e24 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d902      	bls.n	8004d84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	73fb      	strb	r3, [r7, #15]
          break;
 8004d82:	e005      	b.n	8004d90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ef      	beq.n	8004d70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	4904      	ldr	r1, [pc, #16]	; (8004db0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000

08004db4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d018      	beq.n	8004e00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dce:	4b67      	ldr	r3, [pc, #412]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0203 	and.w	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d10d      	bne.n	8004dfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
       ||
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004de6:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	091b      	lsrs	r3, r3, #4
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
       ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d047      	beq.n	8004e8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
 8004dfe:	e044      	b.n	8004e8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d018      	beq.n	8004e3a <RCCEx_PLLSAI2_Config+0x86>
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d825      	bhi.n	8004e58 <RCCEx_PLLSAI2_Config+0xa4>
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d002      	beq.n	8004e16 <RCCEx_PLLSAI2_Config+0x62>
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d009      	beq.n	8004e28 <RCCEx_PLLSAI2_Config+0x74>
 8004e14:	e020      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e16:	4b55      	ldr	r3, [pc, #340]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11d      	bne.n	8004e5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e26:	e01a      	b.n	8004e5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e28:	4b50      	ldr	r3, [pc, #320]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d116      	bne.n	8004e62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e38:	e013      	b.n	8004e62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e3a:	4b4c      	ldr	r3, [pc, #304]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10f      	bne.n	8004e66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e46:	4b49      	ldr	r3, [pc, #292]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e56:	e006      	b.n	8004e66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5c:	e004      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e66:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10d      	bne.n	8004e8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e6e:	4b3f      	ldr	r3, [pc, #252]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	430b      	orrs	r3, r1
 8004e84:	4939      	ldr	r1, [pc, #228]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d167      	bne.n	8004f60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a35      	ldr	r2, [pc, #212]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9c:	f7fc ffc2 	bl	8001e24 <HAL_GetTick>
 8004ea0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ea2:	e009      	b.n	8004eb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ea4:	f7fc ffbe 	bl	8001e24 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d902      	bls.n	8004eb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb6:	e005      	b.n	8004ec4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eb8:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ef      	bne.n	8004ea4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d14a      	bne.n	8004f60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d111      	bne.n	8004ef4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ed0:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6892      	ldr	r2, [r2, #8]
 8004ee0:	0211      	lsls	r1, r2, #8
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	68d2      	ldr	r2, [r2, #12]
 8004ee6:	0912      	lsrs	r2, r2, #4
 8004ee8:	0452      	lsls	r2, r2, #17
 8004eea:	430a      	orrs	r2, r1
 8004eec:	491f      	ldr	r1, [pc, #124]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	614b      	str	r3, [r1, #20]
 8004ef2:	e011      	b.n	8004f18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ef4:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004efc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6892      	ldr	r2, [r2, #8]
 8004f04:	0211      	lsls	r1, r2, #8
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6912      	ldr	r2, [r2, #16]
 8004f0a:	0852      	lsrs	r2, r2, #1
 8004f0c:	3a01      	subs	r2, #1
 8004f0e:	0652      	lsls	r2, r2, #25
 8004f10:	430a      	orrs	r2, r1
 8004f12:	4916      	ldr	r1, [pc, #88]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f18:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f24:	f7fc ff7e 	bl	8001e24 <HAL_GetTick>
 8004f28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f2a:	e009      	b.n	8004f40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f2c:	f7fc ff7a 	bl	8001e24 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d902      	bls.n	8004f40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f3e:	e005      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ef      	beq.n	8004f2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	4904      	ldr	r1, [pc, #16]	; (8004f6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40021000 	.word	0x40021000

08004f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e095      	b.n	80050ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d108      	bne.n	8004f9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f92:	d009      	beq.n	8004fa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	61da      	str	r2, [r3, #28]
 8004f9a:	e005      	b.n	8004fa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fc fa68 	bl	8001498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fe8:	d902      	bls.n	8004ff0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e002      	b.n	8004ff6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ff4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ffe:	d007      	beq.n	8005010 <HAL_SPI_Init+0xa0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005008:	d002      	beq.n	8005010 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	ea42 0103 	orr.w	r1, r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	0c1b      	lsrs	r3, r3, #16
 800506c:	f003 0204 	and.w	r2, r3, #4
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800508c:	ea42 0103 	orr.w	r1, r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e040      	b.n	800514a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fc fa21 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2224      	movs	r2, #36	; 0x24
 80050e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0201 	bic.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f8c1 	bl	800527c <UART_SetConfig>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e022      	b.n	800514a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fb6d 	bl	80057ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005120:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005130:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fbf4 	bl	8005930 <UART_CheckIdleState>
 8005148:	4603      	mov	r3, r0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b08a      	sub	sp, #40	; 0x28
 8005156:	af02      	add	r7, sp, #8
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005166:	2b20      	cmp	r3, #32
 8005168:	f040 8082 	bne.w	8005270 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_UART_Transmit+0x26>
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e07a      	b.n	8005272 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_UART_Transmit+0x38>
 8005186:	2302      	movs	r3, #2
 8005188:	e073      	b.n	8005272 <HAL_UART_Transmit+0x120>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2221      	movs	r2, #33	; 0x21
 800519e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051a0:	f7fc fe40 	bl	8001e24 <HAL_GetTick>
 80051a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	88fa      	ldrh	r2, [r7, #6]
 80051aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	88fa      	ldrh	r2, [r7, #6]
 80051b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051be:	d108      	bne.n	80051d2 <HAL_UART_Transmit+0x80>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	e003      	b.n	80051da <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051e2:	e02d      	b.n	8005240 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	2180      	movs	r1, #128	; 0x80
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fbe7 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e039      	b.n	8005272 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	881a      	ldrh	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005210:	b292      	uxth	r2, r2
 8005212:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	3302      	adds	r3, #2
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	e008      	b.n	800522e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	781a      	ldrb	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	b292      	uxth	r2, r2
 8005226:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	3301      	adds	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1cb      	bne.n	80051e4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2200      	movs	r2, #0
 8005254:	2140      	movs	r1, #64	; 0x40
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fbb3 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e005      	b.n	8005272 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	e000      	b.n	8005272 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005270:	2302      	movs	r3, #2
  }
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800527c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005280:	b08a      	sub	sp, #40	; 0x28
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	431a      	orrs	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4ba4      	ldr	r3, [pc, #656]	; (800553c <UART_SetConfig+0x2c0>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a99      	ldr	r2, [pc, #612]	; (8005540 <UART_SetConfig+0x2c4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	4313      	orrs	r3, r2
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a90      	ldr	r2, [pc, #576]	; (8005544 <UART_SetConfig+0x2c8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d126      	bne.n	8005354 <UART_SetConfig+0xd8>
 8005306:	4b90      	ldr	r3, [pc, #576]	; (8005548 <UART_SetConfig+0x2cc>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b03      	cmp	r3, #3
 8005312:	d81b      	bhi.n	800534c <UART_SetConfig+0xd0>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <UART_SetConfig+0xa0>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	0800532d 	.word	0x0800532d
 8005320:	0800533d 	.word	0x0800533d
 8005324:	08005335 	.word	0x08005335
 8005328:	08005345 	.word	0x08005345
 800532c:	2301      	movs	r3, #1
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005332:	e116      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005334:	2302      	movs	r3, #2
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533a:	e112      	b.n	8005562 <UART_SetConfig+0x2e6>
 800533c:	2304      	movs	r3, #4
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005342:	e10e      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005344:	2308      	movs	r3, #8
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534a:	e10a      	b.n	8005562 <UART_SetConfig+0x2e6>
 800534c:	2310      	movs	r3, #16
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005352:	e106      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a7c      	ldr	r2, [pc, #496]	; (800554c <UART_SetConfig+0x2d0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d138      	bne.n	80053d0 <UART_SetConfig+0x154>
 800535e:	4b7a      	ldr	r3, [pc, #488]	; (8005548 <UART_SetConfig+0x2cc>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d82d      	bhi.n	80053c8 <UART_SetConfig+0x14c>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <UART_SetConfig+0xf8>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	080053a9 	.word	0x080053a9
 8005378:	080053c9 	.word	0x080053c9
 800537c:	080053c9 	.word	0x080053c9
 8005380:	080053c9 	.word	0x080053c9
 8005384:	080053b9 	.word	0x080053b9
 8005388:	080053c9 	.word	0x080053c9
 800538c:	080053c9 	.word	0x080053c9
 8005390:	080053c9 	.word	0x080053c9
 8005394:	080053b1 	.word	0x080053b1
 8005398:	080053c9 	.word	0x080053c9
 800539c:	080053c9 	.word	0x080053c9
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053c1 	.word	0x080053c1
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ae:	e0d8      	b.n	8005562 <UART_SetConfig+0x2e6>
 80053b0:	2302      	movs	r3, #2
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b6:	e0d4      	b.n	8005562 <UART_SetConfig+0x2e6>
 80053b8:	2304      	movs	r3, #4
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053be:	e0d0      	b.n	8005562 <UART_SetConfig+0x2e6>
 80053c0:	2308      	movs	r3, #8
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c6:	e0cc      	b.n	8005562 <UART_SetConfig+0x2e6>
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ce:	e0c8      	b.n	8005562 <UART_SetConfig+0x2e6>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a5e      	ldr	r2, [pc, #376]	; (8005550 <UART_SetConfig+0x2d4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d125      	bne.n	8005426 <UART_SetConfig+0x1aa>
 80053da:	4b5b      	ldr	r3, [pc, #364]	; (8005548 <UART_SetConfig+0x2cc>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053e4:	2b30      	cmp	r3, #48	; 0x30
 80053e6:	d016      	beq.n	8005416 <UART_SetConfig+0x19a>
 80053e8:	2b30      	cmp	r3, #48	; 0x30
 80053ea:	d818      	bhi.n	800541e <UART_SetConfig+0x1a2>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d00a      	beq.n	8005406 <UART_SetConfig+0x18a>
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d814      	bhi.n	800541e <UART_SetConfig+0x1a2>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <UART_SetConfig+0x182>
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d008      	beq.n	800540e <UART_SetConfig+0x192>
 80053fc:	e00f      	b.n	800541e <UART_SetConfig+0x1a2>
 80053fe:	2300      	movs	r3, #0
 8005400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005404:	e0ad      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005406:	2302      	movs	r3, #2
 8005408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540c:	e0a9      	b.n	8005562 <UART_SetConfig+0x2e6>
 800540e:	2304      	movs	r3, #4
 8005410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005414:	e0a5      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005416:	2308      	movs	r3, #8
 8005418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541c:	e0a1      	b.n	8005562 <UART_SetConfig+0x2e6>
 800541e:	2310      	movs	r3, #16
 8005420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005424:	e09d      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a4a      	ldr	r2, [pc, #296]	; (8005554 <UART_SetConfig+0x2d8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d125      	bne.n	800547c <UART_SetConfig+0x200>
 8005430:	4b45      	ldr	r3, [pc, #276]	; (8005548 <UART_SetConfig+0x2cc>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800543a:	2bc0      	cmp	r3, #192	; 0xc0
 800543c:	d016      	beq.n	800546c <UART_SetConfig+0x1f0>
 800543e:	2bc0      	cmp	r3, #192	; 0xc0
 8005440:	d818      	bhi.n	8005474 <UART_SetConfig+0x1f8>
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d00a      	beq.n	800545c <UART_SetConfig+0x1e0>
 8005446:	2b80      	cmp	r3, #128	; 0x80
 8005448:	d814      	bhi.n	8005474 <UART_SetConfig+0x1f8>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <UART_SetConfig+0x1d8>
 800544e:	2b40      	cmp	r3, #64	; 0x40
 8005450:	d008      	beq.n	8005464 <UART_SetConfig+0x1e8>
 8005452:	e00f      	b.n	8005474 <UART_SetConfig+0x1f8>
 8005454:	2300      	movs	r3, #0
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545a:	e082      	b.n	8005562 <UART_SetConfig+0x2e6>
 800545c:	2302      	movs	r3, #2
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e07e      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e07a      	b.n	8005562 <UART_SetConfig+0x2e6>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e076      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e072      	b.n	8005562 <UART_SetConfig+0x2e6>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a35      	ldr	r2, [pc, #212]	; (8005558 <UART_SetConfig+0x2dc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d12a      	bne.n	80054dc <UART_SetConfig+0x260>
 8005486:	4b30      	ldr	r3, [pc, #192]	; (8005548 <UART_SetConfig+0x2cc>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005494:	d01a      	beq.n	80054cc <UART_SetConfig+0x250>
 8005496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800549a:	d81b      	bhi.n	80054d4 <UART_SetConfig+0x258>
 800549c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a0:	d00c      	beq.n	80054bc <UART_SetConfig+0x240>
 80054a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a6:	d815      	bhi.n	80054d4 <UART_SetConfig+0x258>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <UART_SetConfig+0x238>
 80054ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b0:	d008      	beq.n	80054c4 <UART_SetConfig+0x248>
 80054b2:	e00f      	b.n	80054d4 <UART_SetConfig+0x258>
 80054b4:	2300      	movs	r3, #0
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ba:	e052      	b.n	8005562 <UART_SetConfig+0x2e6>
 80054bc:	2302      	movs	r3, #2
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e04e      	b.n	8005562 <UART_SetConfig+0x2e6>
 80054c4:	2304      	movs	r3, #4
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ca:	e04a      	b.n	8005562 <UART_SetConfig+0x2e6>
 80054cc:	2308      	movs	r3, #8
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d2:	e046      	b.n	8005562 <UART_SetConfig+0x2e6>
 80054d4:	2310      	movs	r3, #16
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e042      	b.n	8005562 <UART_SetConfig+0x2e6>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a17      	ldr	r2, [pc, #92]	; (8005540 <UART_SetConfig+0x2c4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d13a      	bne.n	800555c <UART_SetConfig+0x2e0>
 80054e6:	4b18      	ldr	r3, [pc, #96]	; (8005548 <UART_SetConfig+0x2cc>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054f4:	d01a      	beq.n	800552c <UART_SetConfig+0x2b0>
 80054f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054fa:	d81b      	bhi.n	8005534 <UART_SetConfig+0x2b8>
 80054fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005500:	d00c      	beq.n	800551c <UART_SetConfig+0x2a0>
 8005502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005506:	d815      	bhi.n	8005534 <UART_SetConfig+0x2b8>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <UART_SetConfig+0x298>
 800550c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005510:	d008      	beq.n	8005524 <UART_SetConfig+0x2a8>
 8005512:	e00f      	b.n	8005534 <UART_SetConfig+0x2b8>
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551a:	e022      	b.n	8005562 <UART_SetConfig+0x2e6>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005522:	e01e      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552a:	e01a      	b.n	8005562 <UART_SetConfig+0x2e6>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005532:	e016      	b.n	8005562 <UART_SetConfig+0x2e6>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553a:	e012      	b.n	8005562 <UART_SetConfig+0x2e6>
 800553c:	efff69f3 	.word	0xefff69f3
 8005540:	40008000 	.word	0x40008000
 8005544:	40013800 	.word	0x40013800
 8005548:	40021000 	.word	0x40021000
 800554c:	40004400 	.word	0x40004400
 8005550:	40004800 	.word	0x40004800
 8005554:	40004c00 	.word	0x40004c00
 8005558:	40005000 	.word	0x40005000
 800555c:	2310      	movs	r3, #16
 800555e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a9f      	ldr	r2, [pc, #636]	; (80057e4 <UART_SetConfig+0x568>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d17a      	bne.n	8005662 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800556c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005570:	2b08      	cmp	r3, #8
 8005572:	d824      	bhi.n	80055be <UART_SetConfig+0x342>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <UART_SetConfig+0x300>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055a1 	.word	0x080055a1
 8005580:	080055bf 	.word	0x080055bf
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055bf 	.word	0x080055bf
 800558c:	080055af 	.word	0x080055af
 8005590:	080055bf 	.word	0x080055bf
 8005594:	080055bf 	.word	0x080055bf
 8005598:	080055bf 	.word	0x080055bf
 800559c:	080055b7 	.word	0x080055b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a0:	f7fe ff8e 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 80055a4:	61f8      	str	r0, [r7, #28]
        break;
 80055a6:	e010      	b.n	80055ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a8:	4b8f      	ldr	r3, [pc, #572]	; (80057e8 <UART_SetConfig+0x56c>)
 80055aa:	61fb      	str	r3, [r7, #28]
        break;
 80055ac:	e00d      	b.n	80055ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ae:	f7fe feef 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 80055b2:	61f8      	str	r0, [r7, #28]
        break;
 80055b4:	e009      	b.n	80055ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ba:	61fb      	str	r3, [r7, #28]
        break;
 80055bc:	e005      	b.n	80055ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80fb 	beq.w	80057c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	4413      	add	r3, r2
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d305      	bcc.n	80055ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d903      	bls.n	80055f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055f4:	e0e8      	b.n	80057c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	2200      	movs	r2, #0
 80055fa:	461c      	mov	r4, r3
 80055fc:	4615      	mov	r5, r2
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	022b      	lsls	r3, r5, #8
 8005608:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800560c:	0222      	lsls	r2, r4, #8
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	6849      	ldr	r1, [r1, #4]
 8005612:	0849      	lsrs	r1, r1, #1
 8005614:	2000      	movs	r0, #0
 8005616:	4688      	mov	r8, r1
 8005618:	4681      	mov	r9, r0
 800561a:	eb12 0a08 	adds.w	sl, r2, r8
 800561e:	eb43 0b09 	adc.w	fp, r3, r9
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005630:	4650      	mov	r0, sl
 8005632:	4659      	mov	r1, fp
 8005634:	f7fb f800 	bl	8000638 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4613      	mov	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005646:	d308      	bcc.n	800565a <UART_SetConfig+0x3de>
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800564e:	d204      	bcs.n	800565a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	60da      	str	r2, [r3, #12]
 8005658:	e0b6      	b.n	80057c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005660:	e0b2      	b.n	80057c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566a:	d15e      	bne.n	800572a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800566c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005670:	2b08      	cmp	r3, #8
 8005672:	d828      	bhi.n	80056c6 <UART_SetConfig+0x44a>
 8005674:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x400>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056bf 	.word	0x080056bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fe ff0e 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 80056a4:	61f8      	str	r0, [r7, #28]
        break;
 80056a6:	e014      	b.n	80056d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7fe ff20 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 80056ac:	61f8      	str	r0, [r7, #28]
        break;
 80056ae:	e010      	b.n	80056d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b4d      	ldr	r3, [pc, #308]	; (80057e8 <UART_SetConfig+0x56c>)
 80056b2:	61fb      	str	r3, [r7, #28]
        break;
 80056b4:	e00d      	b.n	80056d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b6:	f7fe fe6b 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 80056ba:	61f8      	str	r0, [r7, #28]
        break;
 80056bc:	e009      	b.n	80056d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c2:	61fb      	str	r3, [r7, #28]
        break;
 80056c4:	e005      	b.n	80056d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d077      	beq.n	80057c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	005a      	lsls	r2, r3, #1
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	441a      	add	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b0f      	cmp	r3, #15
 80056f2:	d916      	bls.n	8005722 <UART_SetConfig+0x4a6>
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fa:	d212      	bcs.n	8005722 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f023 030f 	bic.w	r3, r3, #15
 8005704:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	b29a      	uxth	r2, r3
 8005712:	8afb      	ldrh	r3, [r7, #22]
 8005714:	4313      	orrs	r3, r2
 8005716:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	8afa      	ldrh	r2, [r7, #22]
 800571e:	60da      	str	r2, [r3, #12]
 8005720:	e052      	b.n	80057c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005728:	e04e      	b.n	80057c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800572a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800572e:	2b08      	cmp	r3, #8
 8005730:	d827      	bhi.n	8005782 <UART_SetConfig+0x506>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <UART_SetConfig+0x4bc>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	0800575d 	.word	0x0800575d
 800573c:	08005765 	.word	0x08005765
 8005740:	0800576d 	.word	0x0800576d
 8005744:	08005783 	.word	0x08005783
 8005748:	08005773 	.word	0x08005773
 800574c:	08005783 	.word	0x08005783
 8005750:	08005783 	.word	0x08005783
 8005754:	08005783 	.word	0x08005783
 8005758:	0800577b 	.word	0x0800577b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800575c:	f7fe feb0 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 8005760:	61f8      	str	r0, [r7, #28]
        break;
 8005762:	e014      	b.n	800578e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005764:	f7fe fec2 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 8005768:	61f8      	str	r0, [r7, #28]
        break;
 800576a:	e010      	b.n	800578e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800576c:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <UART_SetConfig+0x56c>)
 800576e:	61fb      	str	r3, [r7, #28]
        break;
 8005770:	e00d      	b.n	800578e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005772:	f7fe fe0d 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 8005776:	61f8      	str	r0, [r7, #28]
        break;
 8005778:	e009      	b.n	800578e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800577e:	61fb      	str	r3, [r7, #28]
        break;
 8005780:	e005      	b.n	800578e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800578c:	bf00      	nop
    }

    if (pclk != 0U)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d019      	beq.n	80057c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	085a      	lsrs	r2, r3, #1
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	441a      	add	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b0f      	cmp	r3, #15
 80057ac:	d909      	bls.n	80057c2 <UART_SetConfig+0x546>
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b4:	d205      	bcs.n	80057c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60da      	str	r2, [r3, #12]
 80057c0:	e002      	b.n	80057c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80057d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3728      	adds	r7, #40	; 0x28
 80057dc:	46bd      	mov	sp, r7
 80057de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e2:	bf00      	nop
 80057e4:	40008000 	.word	0x40008000
 80057e8:	00f42400 	.word	0x00f42400

080057ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01a      	beq.n	8005902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ea:	d10a      	bne.n	8005902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  }
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005940:	f7fc fa70 	bl	8001e24 <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b08      	cmp	r3, #8
 8005952:	d10e      	bne.n	8005972 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f82d 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e023      	b.n	80059ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b04      	cmp	r3, #4
 800597e:	d10e      	bne.n	800599e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f817 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e00d      	b.n	80059ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b09c      	sub	sp, #112	; 0x70
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d2:	e0a5      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	f000 80a1 	beq.w	8005b20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fc fa21 	bl	8001e24 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80059ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d13e      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a08:	667b      	str	r3, [r7, #100]	; 0x64
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e6      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a46:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e067      	b.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d04f      	beq.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a8e:	d147      	bne.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a98:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e6      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	613b      	str	r3, [r7, #16]
   return(result);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aec:	623a      	str	r2, [r7, #32]
 8005aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	69f9      	ldr	r1, [r7, #28]
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e010      	b.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69da      	ldr	r2, [r3, #28]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	f43f af4a 	beq.w	80059d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3770      	adds	r7, #112	; 0x70
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	f107 001c 	add.w	r0, r7, #28
 8005b58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fa6f 	bl	800604c <USB_CoreReset>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d106      	bne.n	8005b86 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38
 8005b84:	e005      	b.n	8005b92 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b9e:	b004      	add	sp, #16
 8005ba0:	4770      	bx	lr

08005ba2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f023 0201 	bic.w	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d115      	bne.n	8005c12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	f7fc f922 	bl	8001e3c <HAL_Delay>
      ms++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fa16 	bl	8006030 <USB_GetMode>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d01e      	beq.n	8005c48 <USB_SetCurrentMode+0x84>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b31      	cmp	r3, #49	; 0x31
 8005c0e:	d9f0      	bls.n	8005bf2 <USB_SetCurrentMode+0x2e>
 8005c10:	e01a      	b.n	8005c48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d115      	bne.n	8005c44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c24:	2001      	movs	r0, #1
 8005c26:	f7fc f909 	bl	8001e3c <HAL_Delay>
      ms++;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f9fd 	bl	8006030 <USB_GetMode>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <USB_SetCurrentMode+0x84>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b31      	cmp	r3, #49	; 0x31
 8005c40:	d9f0      	bls.n	8005c24 <USB_SetCurrentMode+0x60>
 8005c42:	e001      	b.n	8005c48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e005      	b.n	8005c54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b32      	cmp	r3, #50	; 0x32
 8005c4c:	d101      	bne.n	8005c52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b086      	sub	sp, #24
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e009      	b.n	8005c90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	3340      	adds	r3, #64	; 0x40
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	2200      	movs	r2, #0
 8005c88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b0e      	cmp	r3, #14
 8005c94:	d9f2      	bls.n	8005c7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d11c      	bne.n	8005cd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005caa:	f043 0302 	orr.w	r3, r3, #2
 8005cae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e005      	b.n	8005ce2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2300      	movs	r3, #0
 8005cec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	680b      	ldr	r3, [r1, #0]
 8005d00:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d02:	2103      	movs	r1, #3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f959 	bl	8005fbc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d0a:	2110      	movs	r1, #16
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f8f1 	bl	8005ef4 <USB_FlushTxFifo>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f91d 	bl	8005f5c <USB_FlushRxFifo>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d32:	461a      	mov	r2, r3
 8005d34:	2300      	movs	r3, #0
 8005d36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2300      	movs	r3, #0
 8005d42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	e043      	b.n	8005dde <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d6c:	d118      	bne.n	8005da0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	461a      	mov	r2, r3
 8005d82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	e013      	b.n	8005db2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	461a      	mov	r2, r3
 8005d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e008      	b.n	8005db2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	461a      	mov	r2, r3
 8005dae:	2300      	movs	r3, #0
 8005db0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d3b7      	bcc.n	8005d56 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	e043      	b.n	8005e74 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e02:	d118      	bne.n	8005e36 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	461a      	mov	r2, r3
 8005e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	e013      	b.n	8005e48 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e008      	b.n	8005e48 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	461a      	mov	r2, r3
 8005e44:	2300      	movs	r3, #0
 8005e46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e54:	461a      	mov	r2, r3
 8005e56:	2300      	movs	r3, #0
 8005e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	461a      	mov	r2, r3
 8005e68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	3301      	adds	r3, #1
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d3b7      	bcc.n	8005dec <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	f043 0210 	orr.w	r2, r3, #16
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <USB_DevInit+0x294>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	f043 0208 	orr.w	r2, r3, #8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d107      	bne.n	8005ede <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed6:	f043 0304 	orr.w	r3, r3, #4
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eea:	b004      	add	sp, #16
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	803c3800 	.word	0x803c3800

08005ef4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4a13      	ldr	r2, [pc, #76]	; (8005f58 <USB_FlushTxFifo+0x64>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d901      	bls.n	8005f14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e01b      	b.n	8005f4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	daf2      	bge.n	8005f02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	019b      	lsls	r3, r3, #6
 8005f24:	f043 0220 	orr.w	r2, r3, #32
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4a08      	ldr	r2, [pc, #32]	; (8005f58 <USB_FlushTxFifo+0x64>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e006      	b.n	8005f4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d0f0      	beq.n	8005f2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	00030d40 	.word	0x00030d40

08005f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a11      	ldr	r2, [pc, #68]	; (8005fb8 <USB_FlushRxFifo+0x5c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e018      	b.n	8005fac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	daf2      	bge.n	8005f68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2210      	movs	r2, #16
 8005f8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <USB_FlushRxFifo+0x5c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e006      	b.n	8005fac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d0f0      	beq.n	8005f8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	00030d40 	.word	0x00030d40

08005fbc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006008:	f023 0303 	bic.w	r3, r3, #3
 800600c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601c:	f043 0302 	orr.w	r3, r3, #2
 8006020:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	f003 0301 	and.w	r3, r3, #1
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3301      	adds	r3, #1
 800605c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <USB_CoreReset+0x64>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d901      	bls.n	800606a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e01b      	b.n	80060a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	daf2      	bge.n	8006058 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f043 0201 	orr.w	r2, r3, #1
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3301      	adds	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4a09      	ldr	r2, [pc, #36]	; (80060b0 <USB_CoreReset+0x64>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d901      	bls.n	8006094 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e006      	b.n	80060a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b01      	cmp	r3, #1
 800609e:	d0f0      	beq.n	8006082 <USB_CoreReset+0x36>

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	00030d40 	.word	0x00030d40

080060b4 <__errno>:
 80060b4:	4b01      	ldr	r3, [pc, #4]	; (80060bc <__errno+0x8>)
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20000278 	.word	0x20000278

080060c0 <__libc_init_array>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4d0d      	ldr	r5, [pc, #52]	; (80060f8 <__libc_init_array+0x38>)
 80060c4:	4c0d      	ldr	r4, [pc, #52]	; (80060fc <__libc_init_array+0x3c>)
 80060c6:	1b64      	subs	r4, r4, r5
 80060c8:	10a4      	asrs	r4, r4, #2
 80060ca:	2600      	movs	r6, #0
 80060cc:	42a6      	cmp	r6, r4
 80060ce:	d109      	bne.n	80060e4 <__libc_init_array+0x24>
 80060d0:	4d0b      	ldr	r5, [pc, #44]	; (8006100 <__libc_init_array+0x40>)
 80060d2:	4c0c      	ldr	r4, [pc, #48]	; (8006104 <__libc_init_array+0x44>)
 80060d4:	f000 fcd4 	bl	8006a80 <_init>
 80060d8:	1b64      	subs	r4, r4, r5
 80060da:	10a4      	asrs	r4, r4, #2
 80060dc:	2600      	movs	r6, #0
 80060de:	42a6      	cmp	r6, r4
 80060e0:	d105      	bne.n	80060ee <__libc_init_array+0x2e>
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e8:	4798      	blx	r3
 80060ea:	3601      	adds	r6, #1
 80060ec:	e7ee      	b.n	80060cc <__libc_init_array+0xc>
 80060ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f2:	4798      	blx	r3
 80060f4:	3601      	adds	r6, #1
 80060f6:	e7f2      	b.n	80060de <__libc_init_array+0x1e>
 80060f8:	08006b3c 	.word	0x08006b3c
 80060fc:	08006b3c 	.word	0x08006b3c
 8006100:	08006b3c 	.word	0x08006b3c
 8006104:	08006b40 	.word	0x08006b40

08006108 <memset>:
 8006108:	4402      	add	r2, r0
 800610a:	4603      	mov	r3, r0
 800610c:	4293      	cmp	r3, r2
 800610e:	d100      	bne.n	8006112 <memset+0xa>
 8006110:	4770      	bx	lr
 8006112:	f803 1b01 	strb.w	r1, [r3], #1
 8006116:	e7f9      	b.n	800610c <memset+0x4>

08006118 <sniprintf>:
 8006118:	b40c      	push	{r2, r3}
 800611a:	b530      	push	{r4, r5, lr}
 800611c:	4b17      	ldr	r3, [pc, #92]	; (800617c <sniprintf+0x64>)
 800611e:	1e0c      	subs	r4, r1, #0
 8006120:	681d      	ldr	r5, [r3, #0]
 8006122:	b09d      	sub	sp, #116	; 0x74
 8006124:	da08      	bge.n	8006138 <sniprintf+0x20>
 8006126:	238b      	movs	r3, #139	; 0x8b
 8006128:	602b      	str	r3, [r5, #0]
 800612a:	f04f 30ff 	mov.w	r0, #4294967295
 800612e:	b01d      	add	sp, #116	; 0x74
 8006130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006134:	b002      	add	sp, #8
 8006136:	4770      	bx	lr
 8006138:	f44f 7302 	mov.w	r3, #520	; 0x208
 800613c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006140:	bf14      	ite	ne
 8006142:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006146:	4623      	moveq	r3, r4
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	9307      	str	r3, [sp, #28]
 800614c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006150:	9002      	str	r0, [sp, #8]
 8006152:	9006      	str	r0, [sp, #24]
 8006154:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006158:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800615a:	ab21      	add	r3, sp, #132	; 0x84
 800615c:	a902      	add	r1, sp, #8
 800615e:	4628      	mov	r0, r5
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	f000 f869 	bl	8006238 <_svfiprintf_r>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	bfbc      	itt	lt
 800616a:	238b      	movlt	r3, #139	; 0x8b
 800616c:	602b      	strlt	r3, [r5, #0]
 800616e:	2c00      	cmp	r4, #0
 8006170:	d0dd      	beq.n	800612e <sniprintf+0x16>
 8006172:	9b02      	ldr	r3, [sp, #8]
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	e7d9      	b.n	800612e <sniprintf+0x16>
 800617a:	bf00      	nop
 800617c:	20000278 	.word	0x20000278

08006180 <__ssputs_r>:
 8006180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	688e      	ldr	r6, [r1, #8]
 8006186:	429e      	cmp	r6, r3
 8006188:	4682      	mov	sl, r0
 800618a:	460c      	mov	r4, r1
 800618c:	4690      	mov	r8, r2
 800618e:	461f      	mov	r7, r3
 8006190:	d838      	bhi.n	8006204 <__ssputs_r+0x84>
 8006192:	898a      	ldrh	r2, [r1, #12]
 8006194:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006198:	d032      	beq.n	8006200 <__ssputs_r+0x80>
 800619a:	6825      	ldr	r5, [r4, #0]
 800619c:	6909      	ldr	r1, [r1, #16]
 800619e:	eba5 0901 	sub.w	r9, r5, r1
 80061a2:	6965      	ldr	r5, [r4, #20]
 80061a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061ac:	3301      	adds	r3, #1
 80061ae:	444b      	add	r3, r9
 80061b0:	106d      	asrs	r5, r5, #1
 80061b2:	429d      	cmp	r5, r3
 80061b4:	bf38      	it	cc
 80061b6:	461d      	movcc	r5, r3
 80061b8:	0553      	lsls	r3, r2, #21
 80061ba:	d531      	bpl.n	8006220 <__ssputs_r+0xa0>
 80061bc:	4629      	mov	r1, r5
 80061be:	f000 fb63 	bl	8006888 <_malloc_r>
 80061c2:	4606      	mov	r6, r0
 80061c4:	b950      	cbnz	r0, 80061dc <__ssputs_r+0x5c>
 80061c6:	230c      	movs	r3, #12
 80061c8:	f8ca 3000 	str.w	r3, [sl]
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061dc:	6921      	ldr	r1, [r4, #16]
 80061de:	464a      	mov	r2, r9
 80061e0:	f000 fabe 	bl	8006760 <memcpy>
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	6126      	str	r6, [r4, #16]
 80061f2:	6165      	str	r5, [r4, #20]
 80061f4:	444e      	add	r6, r9
 80061f6:	eba5 0509 	sub.w	r5, r5, r9
 80061fa:	6026      	str	r6, [r4, #0]
 80061fc:	60a5      	str	r5, [r4, #8]
 80061fe:	463e      	mov	r6, r7
 8006200:	42be      	cmp	r6, r7
 8006202:	d900      	bls.n	8006206 <__ssputs_r+0x86>
 8006204:	463e      	mov	r6, r7
 8006206:	6820      	ldr	r0, [r4, #0]
 8006208:	4632      	mov	r2, r6
 800620a:	4641      	mov	r1, r8
 800620c:	f000 fab6 	bl	800677c <memmove>
 8006210:	68a3      	ldr	r3, [r4, #8]
 8006212:	1b9b      	subs	r3, r3, r6
 8006214:	60a3      	str	r3, [r4, #8]
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	4433      	add	r3, r6
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	2000      	movs	r0, #0
 800621e:	e7db      	b.n	80061d8 <__ssputs_r+0x58>
 8006220:	462a      	mov	r2, r5
 8006222:	f000 fba5 	bl	8006970 <_realloc_r>
 8006226:	4606      	mov	r6, r0
 8006228:	2800      	cmp	r0, #0
 800622a:	d1e1      	bne.n	80061f0 <__ssputs_r+0x70>
 800622c:	6921      	ldr	r1, [r4, #16]
 800622e:	4650      	mov	r0, sl
 8006230:	f000 fabe 	bl	80067b0 <_free_r>
 8006234:	e7c7      	b.n	80061c6 <__ssputs_r+0x46>
	...

08006238 <_svfiprintf_r>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	4698      	mov	r8, r3
 800623e:	898b      	ldrh	r3, [r1, #12]
 8006240:	061b      	lsls	r3, r3, #24
 8006242:	b09d      	sub	sp, #116	; 0x74
 8006244:	4607      	mov	r7, r0
 8006246:	460d      	mov	r5, r1
 8006248:	4614      	mov	r4, r2
 800624a:	d50e      	bpl.n	800626a <_svfiprintf_r+0x32>
 800624c:	690b      	ldr	r3, [r1, #16]
 800624e:	b963      	cbnz	r3, 800626a <_svfiprintf_r+0x32>
 8006250:	2140      	movs	r1, #64	; 0x40
 8006252:	f000 fb19 	bl	8006888 <_malloc_r>
 8006256:	6028      	str	r0, [r5, #0]
 8006258:	6128      	str	r0, [r5, #16]
 800625a:	b920      	cbnz	r0, 8006266 <_svfiprintf_r+0x2e>
 800625c:	230c      	movs	r3, #12
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	e0d1      	b.n	800640a <_svfiprintf_r+0x1d2>
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	616b      	str	r3, [r5, #20]
 800626a:	2300      	movs	r3, #0
 800626c:	9309      	str	r3, [sp, #36]	; 0x24
 800626e:	2320      	movs	r3, #32
 8006270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006274:	f8cd 800c 	str.w	r8, [sp, #12]
 8006278:	2330      	movs	r3, #48	; 0x30
 800627a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006424 <_svfiprintf_r+0x1ec>
 800627e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006282:	f04f 0901 	mov.w	r9, #1
 8006286:	4623      	mov	r3, r4
 8006288:	469a      	mov	sl, r3
 800628a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800628e:	b10a      	cbz	r2, 8006294 <_svfiprintf_r+0x5c>
 8006290:	2a25      	cmp	r2, #37	; 0x25
 8006292:	d1f9      	bne.n	8006288 <_svfiprintf_r+0x50>
 8006294:	ebba 0b04 	subs.w	fp, sl, r4
 8006298:	d00b      	beq.n	80062b2 <_svfiprintf_r+0x7a>
 800629a:	465b      	mov	r3, fp
 800629c:	4622      	mov	r2, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ff6d 	bl	8006180 <__ssputs_r>
 80062a6:	3001      	adds	r0, #1
 80062a8:	f000 80aa 	beq.w	8006400 <_svfiprintf_r+0x1c8>
 80062ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ae:	445a      	add	r2, fp
 80062b0:	9209      	str	r2, [sp, #36]	; 0x24
 80062b2:	f89a 3000 	ldrb.w	r3, [sl]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80a2 	beq.w	8006400 <_svfiprintf_r+0x1c8>
 80062bc:	2300      	movs	r3, #0
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c6:	f10a 0a01 	add.w	sl, sl, #1
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	9307      	str	r3, [sp, #28]
 80062ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062d2:	931a      	str	r3, [sp, #104]	; 0x68
 80062d4:	4654      	mov	r4, sl
 80062d6:	2205      	movs	r2, #5
 80062d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062dc:	4851      	ldr	r0, [pc, #324]	; (8006424 <_svfiprintf_r+0x1ec>)
 80062de:	f7f9 ff77 	bl	80001d0 <memchr>
 80062e2:	9a04      	ldr	r2, [sp, #16]
 80062e4:	b9d8      	cbnz	r0, 800631e <_svfiprintf_r+0xe6>
 80062e6:	06d0      	lsls	r0, r2, #27
 80062e8:	bf44      	itt	mi
 80062ea:	2320      	movmi	r3, #32
 80062ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f0:	0711      	lsls	r1, r2, #28
 80062f2:	bf44      	itt	mi
 80062f4:	232b      	movmi	r3, #43	; 0x2b
 80062f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062fa:	f89a 3000 	ldrb.w	r3, [sl]
 80062fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006300:	d015      	beq.n	800632e <_svfiprintf_r+0xf6>
 8006302:	9a07      	ldr	r2, [sp, #28]
 8006304:	4654      	mov	r4, sl
 8006306:	2000      	movs	r0, #0
 8006308:	f04f 0c0a 	mov.w	ip, #10
 800630c:	4621      	mov	r1, r4
 800630e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006312:	3b30      	subs	r3, #48	; 0x30
 8006314:	2b09      	cmp	r3, #9
 8006316:	d94e      	bls.n	80063b6 <_svfiprintf_r+0x17e>
 8006318:	b1b0      	cbz	r0, 8006348 <_svfiprintf_r+0x110>
 800631a:	9207      	str	r2, [sp, #28]
 800631c:	e014      	b.n	8006348 <_svfiprintf_r+0x110>
 800631e:	eba0 0308 	sub.w	r3, r0, r8
 8006322:	fa09 f303 	lsl.w	r3, r9, r3
 8006326:	4313      	orrs	r3, r2
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	46a2      	mov	sl, r4
 800632c:	e7d2      	b.n	80062d4 <_svfiprintf_r+0x9c>
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	1d19      	adds	r1, r3, #4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	9103      	str	r1, [sp, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	bfbb      	ittet	lt
 800633a:	425b      	neglt	r3, r3
 800633c:	f042 0202 	orrlt.w	r2, r2, #2
 8006340:	9307      	strge	r3, [sp, #28]
 8006342:	9307      	strlt	r3, [sp, #28]
 8006344:	bfb8      	it	lt
 8006346:	9204      	strlt	r2, [sp, #16]
 8006348:	7823      	ldrb	r3, [r4, #0]
 800634a:	2b2e      	cmp	r3, #46	; 0x2e
 800634c:	d10c      	bne.n	8006368 <_svfiprintf_r+0x130>
 800634e:	7863      	ldrb	r3, [r4, #1]
 8006350:	2b2a      	cmp	r3, #42	; 0x2a
 8006352:	d135      	bne.n	80063c0 <_svfiprintf_r+0x188>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	1d1a      	adds	r2, r3, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	9203      	str	r2, [sp, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfb8      	it	lt
 8006360:	f04f 33ff 	movlt.w	r3, #4294967295
 8006364:	3402      	adds	r4, #2
 8006366:	9305      	str	r3, [sp, #20]
 8006368:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006434 <_svfiprintf_r+0x1fc>
 800636c:	7821      	ldrb	r1, [r4, #0]
 800636e:	2203      	movs	r2, #3
 8006370:	4650      	mov	r0, sl
 8006372:	f7f9 ff2d 	bl	80001d0 <memchr>
 8006376:	b140      	cbz	r0, 800638a <_svfiprintf_r+0x152>
 8006378:	2340      	movs	r3, #64	; 0x40
 800637a:	eba0 000a 	sub.w	r0, r0, sl
 800637e:	fa03 f000 	lsl.w	r0, r3, r0
 8006382:	9b04      	ldr	r3, [sp, #16]
 8006384:	4303      	orrs	r3, r0
 8006386:	3401      	adds	r4, #1
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638e:	4826      	ldr	r0, [pc, #152]	; (8006428 <_svfiprintf_r+0x1f0>)
 8006390:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006394:	2206      	movs	r2, #6
 8006396:	f7f9 ff1b 	bl	80001d0 <memchr>
 800639a:	2800      	cmp	r0, #0
 800639c:	d038      	beq.n	8006410 <_svfiprintf_r+0x1d8>
 800639e:	4b23      	ldr	r3, [pc, #140]	; (800642c <_svfiprintf_r+0x1f4>)
 80063a0:	bb1b      	cbnz	r3, 80063ea <_svfiprintf_r+0x1b2>
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	3307      	adds	r3, #7
 80063a6:	f023 0307 	bic.w	r3, r3, #7
 80063aa:	3308      	adds	r3, #8
 80063ac:	9303      	str	r3, [sp, #12]
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	4433      	add	r3, r6
 80063b2:	9309      	str	r3, [sp, #36]	; 0x24
 80063b4:	e767      	b.n	8006286 <_svfiprintf_r+0x4e>
 80063b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ba:	460c      	mov	r4, r1
 80063bc:	2001      	movs	r0, #1
 80063be:	e7a5      	b.n	800630c <_svfiprintf_r+0xd4>
 80063c0:	2300      	movs	r3, #0
 80063c2:	3401      	adds	r4, #1
 80063c4:	9305      	str	r3, [sp, #20]
 80063c6:	4619      	mov	r1, r3
 80063c8:	f04f 0c0a 	mov.w	ip, #10
 80063cc:	4620      	mov	r0, r4
 80063ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d2:	3a30      	subs	r2, #48	; 0x30
 80063d4:	2a09      	cmp	r2, #9
 80063d6:	d903      	bls.n	80063e0 <_svfiprintf_r+0x1a8>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0c5      	beq.n	8006368 <_svfiprintf_r+0x130>
 80063dc:	9105      	str	r1, [sp, #20]
 80063de:	e7c3      	b.n	8006368 <_svfiprintf_r+0x130>
 80063e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80063e4:	4604      	mov	r4, r0
 80063e6:	2301      	movs	r3, #1
 80063e8:	e7f0      	b.n	80063cc <_svfiprintf_r+0x194>
 80063ea:	ab03      	add	r3, sp, #12
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	462a      	mov	r2, r5
 80063f0:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <_svfiprintf_r+0x1f8>)
 80063f2:	a904      	add	r1, sp, #16
 80063f4:	4638      	mov	r0, r7
 80063f6:	f3af 8000 	nop.w
 80063fa:	1c42      	adds	r2, r0, #1
 80063fc:	4606      	mov	r6, r0
 80063fe:	d1d6      	bne.n	80063ae <_svfiprintf_r+0x176>
 8006400:	89ab      	ldrh	r3, [r5, #12]
 8006402:	065b      	lsls	r3, r3, #25
 8006404:	f53f af2c 	bmi.w	8006260 <_svfiprintf_r+0x28>
 8006408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800640a:	b01d      	add	sp, #116	; 0x74
 800640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006410:	ab03      	add	r3, sp, #12
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	462a      	mov	r2, r5
 8006416:	4b06      	ldr	r3, [pc, #24]	; (8006430 <_svfiprintf_r+0x1f8>)
 8006418:	a904      	add	r1, sp, #16
 800641a:	4638      	mov	r0, r7
 800641c:	f000 f87a 	bl	8006514 <_printf_i>
 8006420:	e7eb      	b.n	80063fa <_svfiprintf_r+0x1c2>
 8006422:	bf00      	nop
 8006424:	08006b00 	.word	0x08006b00
 8006428:	08006b0a 	.word	0x08006b0a
 800642c:	00000000 	.word	0x00000000
 8006430:	08006181 	.word	0x08006181
 8006434:	08006b06 	.word	0x08006b06

08006438 <_printf_common>:
 8006438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	4616      	mov	r6, r2
 800643e:	4699      	mov	r9, r3
 8006440:	688a      	ldr	r2, [r1, #8]
 8006442:	690b      	ldr	r3, [r1, #16]
 8006444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006448:	4293      	cmp	r3, r2
 800644a:	bfb8      	it	lt
 800644c:	4613      	movlt	r3, r2
 800644e:	6033      	str	r3, [r6, #0]
 8006450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006454:	4607      	mov	r7, r0
 8006456:	460c      	mov	r4, r1
 8006458:	b10a      	cbz	r2, 800645e <_printf_common+0x26>
 800645a:	3301      	adds	r3, #1
 800645c:	6033      	str	r3, [r6, #0]
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	0699      	lsls	r1, r3, #26
 8006462:	bf42      	ittt	mi
 8006464:	6833      	ldrmi	r3, [r6, #0]
 8006466:	3302      	addmi	r3, #2
 8006468:	6033      	strmi	r3, [r6, #0]
 800646a:	6825      	ldr	r5, [r4, #0]
 800646c:	f015 0506 	ands.w	r5, r5, #6
 8006470:	d106      	bne.n	8006480 <_printf_common+0x48>
 8006472:	f104 0a19 	add.w	sl, r4, #25
 8006476:	68e3      	ldr	r3, [r4, #12]
 8006478:	6832      	ldr	r2, [r6, #0]
 800647a:	1a9b      	subs	r3, r3, r2
 800647c:	42ab      	cmp	r3, r5
 800647e:	dc26      	bgt.n	80064ce <_printf_common+0x96>
 8006480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006484:	1e13      	subs	r3, r2, #0
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	bf18      	it	ne
 800648a:	2301      	movne	r3, #1
 800648c:	0692      	lsls	r2, r2, #26
 800648e:	d42b      	bmi.n	80064e8 <_printf_common+0xb0>
 8006490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006494:	4649      	mov	r1, r9
 8006496:	4638      	mov	r0, r7
 8006498:	47c0      	blx	r8
 800649a:	3001      	adds	r0, #1
 800649c:	d01e      	beq.n	80064dc <_printf_common+0xa4>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	68e5      	ldr	r5, [r4, #12]
 80064a2:	6832      	ldr	r2, [r6, #0]
 80064a4:	f003 0306 	and.w	r3, r3, #6
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	bf08      	it	eq
 80064ac:	1aad      	subeq	r5, r5, r2
 80064ae:	68a3      	ldr	r3, [r4, #8]
 80064b0:	6922      	ldr	r2, [r4, #16]
 80064b2:	bf0c      	ite	eq
 80064b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b8:	2500      	movne	r5, #0
 80064ba:	4293      	cmp	r3, r2
 80064bc:	bfc4      	itt	gt
 80064be:	1a9b      	subgt	r3, r3, r2
 80064c0:	18ed      	addgt	r5, r5, r3
 80064c2:	2600      	movs	r6, #0
 80064c4:	341a      	adds	r4, #26
 80064c6:	42b5      	cmp	r5, r6
 80064c8:	d11a      	bne.n	8006500 <_printf_common+0xc8>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e008      	b.n	80064e0 <_printf_common+0xa8>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4652      	mov	r2, sl
 80064d2:	4649      	mov	r1, r9
 80064d4:	4638      	mov	r0, r7
 80064d6:	47c0      	blx	r8
 80064d8:	3001      	adds	r0, #1
 80064da:	d103      	bne.n	80064e4 <_printf_common+0xac>
 80064dc:	f04f 30ff 	mov.w	r0, #4294967295
 80064e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e4:	3501      	adds	r5, #1
 80064e6:	e7c6      	b.n	8006476 <_printf_common+0x3e>
 80064e8:	18e1      	adds	r1, r4, r3
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	2030      	movs	r0, #48	; 0x30
 80064ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064f2:	4422      	add	r2, r4
 80064f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064fc:	3302      	adds	r3, #2
 80064fe:	e7c7      	b.n	8006490 <_printf_common+0x58>
 8006500:	2301      	movs	r3, #1
 8006502:	4622      	mov	r2, r4
 8006504:	4649      	mov	r1, r9
 8006506:	4638      	mov	r0, r7
 8006508:	47c0      	blx	r8
 800650a:	3001      	adds	r0, #1
 800650c:	d0e6      	beq.n	80064dc <_printf_common+0xa4>
 800650e:	3601      	adds	r6, #1
 8006510:	e7d9      	b.n	80064c6 <_printf_common+0x8e>
	...

08006514 <_printf_i>:
 8006514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	7e0f      	ldrb	r7, [r1, #24]
 800651a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800651c:	2f78      	cmp	r7, #120	; 0x78
 800651e:	4691      	mov	r9, r2
 8006520:	4680      	mov	r8, r0
 8006522:	460c      	mov	r4, r1
 8006524:	469a      	mov	sl, r3
 8006526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800652a:	d807      	bhi.n	800653c <_printf_i+0x28>
 800652c:	2f62      	cmp	r7, #98	; 0x62
 800652e:	d80a      	bhi.n	8006546 <_printf_i+0x32>
 8006530:	2f00      	cmp	r7, #0
 8006532:	f000 80d8 	beq.w	80066e6 <_printf_i+0x1d2>
 8006536:	2f58      	cmp	r7, #88	; 0x58
 8006538:	f000 80a3 	beq.w	8006682 <_printf_i+0x16e>
 800653c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006544:	e03a      	b.n	80065bc <_printf_i+0xa8>
 8006546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800654a:	2b15      	cmp	r3, #21
 800654c:	d8f6      	bhi.n	800653c <_printf_i+0x28>
 800654e:	a101      	add	r1, pc, #4	; (adr r1, 8006554 <_printf_i+0x40>)
 8006550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006554:	080065ad 	.word	0x080065ad
 8006558:	080065c1 	.word	0x080065c1
 800655c:	0800653d 	.word	0x0800653d
 8006560:	0800653d 	.word	0x0800653d
 8006564:	0800653d 	.word	0x0800653d
 8006568:	0800653d 	.word	0x0800653d
 800656c:	080065c1 	.word	0x080065c1
 8006570:	0800653d 	.word	0x0800653d
 8006574:	0800653d 	.word	0x0800653d
 8006578:	0800653d 	.word	0x0800653d
 800657c:	0800653d 	.word	0x0800653d
 8006580:	080066cd 	.word	0x080066cd
 8006584:	080065f1 	.word	0x080065f1
 8006588:	080066af 	.word	0x080066af
 800658c:	0800653d 	.word	0x0800653d
 8006590:	0800653d 	.word	0x0800653d
 8006594:	080066ef 	.word	0x080066ef
 8006598:	0800653d 	.word	0x0800653d
 800659c:	080065f1 	.word	0x080065f1
 80065a0:	0800653d 	.word	0x0800653d
 80065a4:	0800653d 	.word	0x0800653d
 80065a8:	080066b7 	.word	0x080066b7
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	1d1a      	adds	r2, r3, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	602a      	str	r2, [r5, #0]
 80065b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065bc:	2301      	movs	r3, #1
 80065be:	e0a3      	b.n	8006708 <_printf_i+0x1f4>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	6829      	ldr	r1, [r5, #0]
 80065c4:	0606      	lsls	r6, r0, #24
 80065c6:	f101 0304 	add.w	r3, r1, #4
 80065ca:	d50a      	bpl.n	80065e2 <_printf_i+0xce>
 80065cc:	680e      	ldr	r6, [r1, #0]
 80065ce:	602b      	str	r3, [r5, #0]
 80065d0:	2e00      	cmp	r6, #0
 80065d2:	da03      	bge.n	80065dc <_printf_i+0xc8>
 80065d4:	232d      	movs	r3, #45	; 0x2d
 80065d6:	4276      	negs	r6, r6
 80065d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065dc:	485e      	ldr	r0, [pc, #376]	; (8006758 <_printf_i+0x244>)
 80065de:	230a      	movs	r3, #10
 80065e0:	e019      	b.n	8006616 <_printf_i+0x102>
 80065e2:	680e      	ldr	r6, [r1, #0]
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065ea:	bf18      	it	ne
 80065ec:	b236      	sxthne	r6, r6
 80065ee:	e7ef      	b.n	80065d0 <_printf_i+0xbc>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	6820      	ldr	r0, [r4, #0]
 80065f4:	1d19      	adds	r1, r3, #4
 80065f6:	6029      	str	r1, [r5, #0]
 80065f8:	0601      	lsls	r1, r0, #24
 80065fa:	d501      	bpl.n	8006600 <_printf_i+0xec>
 80065fc:	681e      	ldr	r6, [r3, #0]
 80065fe:	e002      	b.n	8006606 <_printf_i+0xf2>
 8006600:	0646      	lsls	r6, r0, #25
 8006602:	d5fb      	bpl.n	80065fc <_printf_i+0xe8>
 8006604:	881e      	ldrh	r6, [r3, #0]
 8006606:	4854      	ldr	r0, [pc, #336]	; (8006758 <_printf_i+0x244>)
 8006608:	2f6f      	cmp	r7, #111	; 0x6f
 800660a:	bf0c      	ite	eq
 800660c:	2308      	moveq	r3, #8
 800660e:	230a      	movne	r3, #10
 8006610:	2100      	movs	r1, #0
 8006612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006616:	6865      	ldr	r5, [r4, #4]
 8006618:	60a5      	str	r5, [r4, #8]
 800661a:	2d00      	cmp	r5, #0
 800661c:	bfa2      	ittt	ge
 800661e:	6821      	ldrge	r1, [r4, #0]
 8006620:	f021 0104 	bicge.w	r1, r1, #4
 8006624:	6021      	strge	r1, [r4, #0]
 8006626:	b90e      	cbnz	r6, 800662c <_printf_i+0x118>
 8006628:	2d00      	cmp	r5, #0
 800662a:	d04d      	beq.n	80066c8 <_printf_i+0x1b4>
 800662c:	4615      	mov	r5, r2
 800662e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006632:	fb03 6711 	mls	r7, r3, r1, r6
 8006636:	5dc7      	ldrb	r7, [r0, r7]
 8006638:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800663c:	4637      	mov	r7, r6
 800663e:	42bb      	cmp	r3, r7
 8006640:	460e      	mov	r6, r1
 8006642:	d9f4      	bls.n	800662e <_printf_i+0x11a>
 8006644:	2b08      	cmp	r3, #8
 8006646:	d10b      	bne.n	8006660 <_printf_i+0x14c>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	07de      	lsls	r6, r3, #31
 800664c:	d508      	bpl.n	8006660 <_printf_i+0x14c>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	6861      	ldr	r1, [r4, #4]
 8006652:	4299      	cmp	r1, r3
 8006654:	bfde      	ittt	le
 8006656:	2330      	movle	r3, #48	; 0x30
 8006658:	f805 3c01 	strble.w	r3, [r5, #-1]
 800665c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006660:	1b52      	subs	r2, r2, r5
 8006662:	6122      	str	r2, [r4, #16]
 8006664:	f8cd a000 	str.w	sl, [sp]
 8006668:	464b      	mov	r3, r9
 800666a:	aa03      	add	r2, sp, #12
 800666c:	4621      	mov	r1, r4
 800666e:	4640      	mov	r0, r8
 8006670:	f7ff fee2 	bl	8006438 <_printf_common>
 8006674:	3001      	adds	r0, #1
 8006676:	d14c      	bne.n	8006712 <_printf_i+0x1fe>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	b004      	add	sp, #16
 800667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006682:	4835      	ldr	r0, [pc, #212]	; (8006758 <_printf_i+0x244>)
 8006684:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006688:	6829      	ldr	r1, [r5, #0]
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006690:	6029      	str	r1, [r5, #0]
 8006692:	061d      	lsls	r5, r3, #24
 8006694:	d514      	bpl.n	80066c0 <_printf_i+0x1ac>
 8006696:	07df      	lsls	r7, r3, #31
 8006698:	bf44      	itt	mi
 800669a:	f043 0320 	orrmi.w	r3, r3, #32
 800669e:	6023      	strmi	r3, [r4, #0]
 80066a0:	b91e      	cbnz	r6, 80066aa <_printf_i+0x196>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	f023 0320 	bic.w	r3, r3, #32
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	2310      	movs	r3, #16
 80066ac:	e7b0      	b.n	8006610 <_printf_i+0xfc>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	f043 0320 	orr.w	r3, r3, #32
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	2378      	movs	r3, #120	; 0x78
 80066b8:	4828      	ldr	r0, [pc, #160]	; (800675c <_printf_i+0x248>)
 80066ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066be:	e7e3      	b.n	8006688 <_printf_i+0x174>
 80066c0:	0659      	lsls	r1, r3, #25
 80066c2:	bf48      	it	mi
 80066c4:	b2b6      	uxthmi	r6, r6
 80066c6:	e7e6      	b.n	8006696 <_printf_i+0x182>
 80066c8:	4615      	mov	r5, r2
 80066ca:	e7bb      	b.n	8006644 <_printf_i+0x130>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	6826      	ldr	r6, [r4, #0]
 80066d0:	6961      	ldr	r1, [r4, #20]
 80066d2:	1d18      	adds	r0, r3, #4
 80066d4:	6028      	str	r0, [r5, #0]
 80066d6:	0635      	lsls	r5, r6, #24
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	d501      	bpl.n	80066e0 <_printf_i+0x1cc>
 80066dc:	6019      	str	r1, [r3, #0]
 80066de:	e002      	b.n	80066e6 <_printf_i+0x1d2>
 80066e0:	0670      	lsls	r0, r6, #25
 80066e2:	d5fb      	bpl.n	80066dc <_printf_i+0x1c8>
 80066e4:	8019      	strh	r1, [r3, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	4615      	mov	r5, r2
 80066ec:	e7ba      	b.n	8006664 <_printf_i+0x150>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	1d1a      	adds	r2, r3, #4
 80066f2:	602a      	str	r2, [r5, #0]
 80066f4:	681d      	ldr	r5, [r3, #0]
 80066f6:	6862      	ldr	r2, [r4, #4]
 80066f8:	2100      	movs	r1, #0
 80066fa:	4628      	mov	r0, r5
 80066fc:	f7f9 fd68 	bl	80001d0 <memchr>
 8006700:	b108      	cbz	r0, 8006706 <_printf_i+0x1f2>
 8006702:	1b40      	subs	r0, r0, r5
 8006704:	6060      	str	r0, [r4, #4]
 8006706:	6863      	ldr	r3, [r4, #4]
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	2300      	movs	r3, #0
 800670c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006710:	e7a8      	b.n	8006664 <_printf_i+0x150>
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	462a      	mov	r2, r5
 8006716:	4649      	mov	r1, r9
 8006718:	4640      	mov	r0, r8
 800671a:	47d0      	blx	sl
 800671c:	3001      	adds	r0, #1
 800671e:	d0ab      	beq.n	8006678 <_printf_i+0x164>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	079b      	lsls	r3, r3, #30
 8006724:	d413      	bmi.n	800674e <_printf_i+0x23a>
 8006726:	68e0      	ldr	r0, [r4, #12]
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	4298      	cmp	r0, r3
 800672c:	bfb8      	it	lt
 800672e:	4618      	movlt	r0, r3
 8006730:	e7a4      	b.n	800667c <_printf_i+0x168>
 8006732:	2301      	movs	r3, #1
 8006734:	4632      	mov	r2, r6
 8006736:	4649      	mov	r1, r9
 8006738:	4640      	mov	r0, r8
 800673a:	47d0      	blx	sl
 800673c:	3001      	adds	r0, #1
 800673e:	d09b      	beq.n	8006678 <_printf_i+0x164>
 8006740:	3501      	adds	r5, #1
 8006742:	68e3      	ldr	r3, [r4, #12]
 8006744:	9903      	ldr	r1, [sp, #12]
 8006746:	1a5b      	subs	r3, r3, r1
 8006748:	42ab      	cmp	r3, r5
 800674a:	dcf2      	bgt.n	8006732 <_printf_i+0x21e>
 800674c:	e7eb      	b.n	8006726 <_printf_i+0x212>
 800674e:	2500      	movs	r5, #0
 8006750:	f104 0619 	add.w	r6, r4, #25
 8006754:	e7f5      	b.n	8006742 <_printf_i+0x22e>
 8006756:	bf00      	nop
 8006758:	08006b11 	.word	0x08006b11
 800675c:	08006b22 	.word	0x08006b22

08006760 <memcpy>:
 8006760:	440a      	add	r2, r1
 8006762:	4291      	cmp	r1, r2
 8006764:	f100 33ff 	add.w	r3, r0, #4294967295
 8006768:	d100      	bne.n	800676c <memcpy+0xc>
 800676a:	4770      	bx	lr
 800676c:	b510      	push	{r4, lr}
 800676e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006776:	4291      	cmp	r1, r2
 8006778:	d1f9      	bne.n	800676e <memcpy+0xe>
 800677a:	bd10      	pop	{r4, pc}

0800677c <memmove>:
 800677c:	4288      	cmp	r0, r1
 800677e:	b510      	push	{r4, lr}
 8006780:	eb01 0402 	add.w	r4, r1, r2
 8006784:	d902      	bls.n	800678c <memmove+0x10>
 8006786:	4284      	cmp	r4, r0
 8006788:	4623      	mov	r3, r4
 800678a:	d807      	bhi.n	800679c <memmove+0x20>
 800678c:	1e43      	subs	r3, r0, #1
 800678e:	42a1      	cmp	r1, r4
 8006790:	d008      	beq.n	80067a4 <memmove+0x28>
 8006792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800679a:	e7f8      	b.n	800678e <memmove+0x12>
 800679c:	4402      	add	r2, r0
 800679e:	4601      	mov	r1, r0
 80067a0:	428a      	cmp	r2, r1
 80067a2:	d100      	bne.n	80067a6 <memmove+0x2a>
 80067a4:	bd10      	pop	{r4, pc}
 80067a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067ae:	e7f7      	b.n	80067a0 <memmove+0x24>

080067b0 <_free_r>:
 80067b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067b2:	2900      	cmp	r1, #0
 80067b4:	d044      	beq.n	8006840 <_free_r+0x90>
 80067b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ba:	9001      	str	r0, [sp, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f1a1 0404 	sub.w	r4, r1, #4
 80067c2:	bfb8      	it	lt
 80067c4:	18e4      	addlt	r4, r4, r3
 80067c6:	f000 f913 	bl	80069f0 <__malloc_lock>
 80067ca:	4a1e      	ldr	r2, [pc, #120]	; (8006844 <_free_r+0x94>)
 80067cc:	9801      	ldr	r0, [sp, #4]
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	b933      	cbnz	r3, 80067e0 <_free_r+0x30>
 80067d2:	6063      	str	r3, [r4, #4]
 80067d4:	6014      	str	r4, [r2, #0]
 80067d6:	b003      	add	sp, #12
 80067d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067dc:	f000 b90e 	b.w	80069fc <__malloc_unlock>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d908      	bls.n	80067f6 <_free_r+0x46>
 80067e4:	6825      	ldr	r5, [r4, #0]
 80067e6:	1961      	adds	r1, r4, r5
 80067e8:	428b      	cmp	r3, r1
 80067ea:	bf01      	itttt	eq
 80067ec:	6819      	ldreq	r1, [r3, #0]
 80067ee:	685b      	ldreq	r3, [r3, #4]
 80067f0:	1949      	addeq	r1, r1, r5
 80067f2:	6021      	streq	r1, [r4, #0]
 80067f4:	e7ed      	b.n	80067d2 <_free_r+0x22>
 80067f6:	461a      	mov	r2, r3
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	b10b      	cbz	r3, 8006800 <_free_r+0x50>
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	d9fa      	bls.n	80067f6 <_free_r+0x46>
 8006800:	6811      	ldr	r1, [r2, #0]
 8006802:	1855      	adds	r5, r2, r1
 8006804:	42a5      	cmp	r5, r4
 8006806:	d10b      	bne.n	8006820 <_free_r+0x70>
 8006808:	6824      	ldr	r4, [r4, #0]
 800680a:	4421      	add	r1, r4
 800680c:	1854      	adds	r4, r2, r1
 800680e:	42a3      	cmp	r3, r4
 8006810:	6011      	str	r1, [r2, #0]
 8006812:	d1e0      	bne.n	80067d6 <_free_r+0x26>
 8006814:	681c      	ldr	r4, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	6053      	str	r3, [r2, #4]
 800681a:	4421      	add	r1, r4
 800681c:	6011      	str	r1, [r2, #0]
 800681e:	e7da      	b.n	80067d6 <_free_r+0x26>
 8006820:	d902      	bls.n	8006828 <_free_r+0x78>
 8006822:	230c      	movs	r3, #12
 8006824:	6003      	str	r3, [r0, #0]
 8006826:	e7d6      	b.n	80067d6 <_free_r+0x26>
 8006828:	6825      	ldr	r5, [r4, #0]
 800682a:	1961      	adds	r1, r4, r5
 800682c:	428b      	cmp	r3, r1
 800682e:	bf04      	itt	eq
 8006830:	6819      	ldreq	r1, [r3, #0]
 8006832:	685b      	ldreq	r3, [r3, #4]
 8006834:	6063      	str	r3, [r4, #4]
 8006836:	bf04      	itt	eq
 8006838:	1949      	addeq	r1, r1, r5
 800683a:	6021      	streq	r1, [r4, #0]
 800683c:	6054      	str	r4, [r2, #4]
 800683e:	e7ca      	b.n	80067d6 <_free_r+0x26>
 8006840:	b003      	add	sp, #12
 8006842:	bd30      	pop	{r4, r5, pc}
 8006844:	20000b28 	.word	0x20000b28

08006848 <sbrk_aligned>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	4e0e      	ldr	r6, [pc, #56]	; (8006884 <sbrk_aligned+0x3c>)
 800684c:	460c      	mov	r4, r1
 800684e:	6831      	ldr	r1, [r6, #0]
 8006850:	4605      	mov	r5, r0
 8006852:	b911      	cbnz	r1, 800685a <sbrk_aligned+0x12>
 8006854:	f000 f8bc 	bl	80069d0 <_sbrk_r>
 8006858:	6030      	str	r0, [r6, #0]
 800685a:	4621      	mov	r1, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 f8b7 	bl	80069d0 <_sbrk_r>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	d00a      	beq.n	800687c <sbrk_aligned+0x34>
 8006866:	1cc4      	adds	r4, r0, #3
 8006868:	f024 0403 	bic.w	r4, r4, #3
 800686c:	42a0      	cmp	r0, r4
 800686e:	d007      	beq.n	8006880 <sbrk_aligned+0x38>
 8006870:	1a21      	subs	r1, r4, r0
 8006872:	4628      	mov	r0, r5
 8006874:	f000 f8ac 	bl	80069d0 <_sbrk_r>
 8006878:	3001      	adds	r0, #1
 800687a:	d101      	bne.n	8006880 <sbrk_aligned+0x38>
 800687c:	f04f 34ff 	mov.w	r4, #4294967295
 8006880:	4620      	mov	r0, r4
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	20000b2c 	.word	0x20000b2c

08006888 <_malloc_r>:
 8006888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688c:	1ccd      	adds	r5, r1, #3
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	2d00      	cmp	r5, #0
 800689c:	4607      	mov	r7, r0
 800689e:	db01      	blt.n	80068a4 <_malloc_r+0x1c>
 80068a0:	42a9      	cmp	r1, r5
 80068a2:	d905      	bls.n	80068b0 <_malloc_r+0x28>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	2600      	movs	r6, #0
 80068aa:	4630      	mov	r0, r6
 80068ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b0:	4e2e      	ldr	r6, [pc, #184]	; (800696c <_malloc_r+0xe4>)
 80068b2:	f000 f89d 	bl	80069f0 <__malloc_lock>
 80068b6:	6833      	ldr	r3, [r6, #0]
 80068b8:	461c      	mov	r4, r3
 80068ba:	bb34      	cbnz	r4, 800690a <_malloc_r+0x82>
 80068bc:	4629      	mov	r1, r5
 80068be:	4638      	mov	r0, r7
 80068c0:	f7ff ffc2 	bl	8006848 <sbrk_aligned>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	4604      	mov	r4, r0
 80068c8:	d14d      	bne.n	8006966 <_malloc_r+0xde>
 80068ca:	6834      	ldr	r4, [r6, #0]
 80068cc:	4626      	mov	r6, r4
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	d140      	bne.n	8006954 <_malloc_r+0xcc>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	4631      	mov	r1, r6
 80068d6:	4638      	mov	r0, r7
 80068d8:	eb04 0803 	add.w	r8, r4, r3
 80068dc:	f000 f878 	bl	80069d0 <_sbrk_r>
 80068e0:	4580      	cmp	r8, r0
 80068e2:	d13a      	bne.n	800695a <_malloc_r+0xd2>
 80068e4:	6821      	ldr	r1, [r4, #0]
 80068e6:	3503      	adds	r5, #3
 80068e8:	1a6d      	subs	r5, r5, r1
 80068ea:	f025 0503 	bic.w	r5, r5, #3
 80068ee:	3508      	adds	r5, #8
 80068f0:	2d0c      	cmp	r5, #12
 80068f2:	bf38      	it	cc
 80068f4:	250c      	movcc	r5, #12
 80068f6:	4629      	mov	r1, r5
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff ffa5 	bl	8006848 <sbrk_aligned>
 80068fe:	3001      	adds	r0, #1
 8006900:	d02b      	beq.n	800695a <_malloc_r+0xd2>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	442b      	add	r3, r5
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	e00e      	b.n	8006928 <_malloc_r+0xa0>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	1b52      	subs	r2, r2, r5
 800690e:	d41e      	bmi.n	800694e <_malloc_r+0xc6>
 8006910:	2a0b      	cmp	r2, #11
 8006912:	d916      	bls.n	8006942 <_malloc_r+0xba>
 8006914:	1961      	adds	r1, r4, r5
 8006916:	42a3      	cmp	r3, r4
 8006918:	6025      	str	r5, [r4, #0]
 800691a:	bf18      	it	ne
 800691c:	6059      	strne	r1, [r3, #4]
 800691e:	6863      	ldr	r3, [r4, #4]
 8006920:	bf08      	it	eq
 8006922:	6031      	streq	r1, [r6, #0]
 8006924:	5162      	str	r2, [r4, r5]
 8006926:	604b      	str	r3, [r1, #4]
 8006928:	4638      	mov	r0, r7
 800692a:	f104 060b 	add.w	r6, r4, #11
 800692e:	f000 f865 	bl	80069fc <__malloc_unlock>
 8006932:	f026 0607 	bic.w	r6, r6, #7
 8006936:	1d23      	adds	r3, r4, #4
 8006938:	1af2      	subs	r2, r6, r3
 800693a:	d0b6      	beq.n	80068aa <_malloc_r+0x22>
 800693c:	1b9b      	subs	r3, r3, r6
 800693e:	50a3      	str	r3, [r4, r2]
 8006940:	e7b3      	b.n	80068aa <_malloc_r+0x22>
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	42a3      	cmp	r3, r4
 8006946:	bf0c      	ite	eq
 8006948:	6032      	streq	r2, [r6, #0]
 800694a:	605a      	strne	r2, [r3, #4]
 800694c:	e7ec      	b.n	8006928 <_malloc_r+0xa0>
 800694e:	4623      	mov	r3, r4
 8006950:	6864      	ldr	r4, [r4, #4]
 8006952:	e7b2      	b.n	80068ba <_malloc_r+0x32>
 8006954:	4634      	mov	r4, r6
 8006956:	6876      	ldr	r6, [r6, #4]
 8006958:	e7b9      	b.n	80068ce <_malloc_r+0x46>
 800695a:	230c      	movs	r3, #12
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4638      	mov	r0, r7
 8006960:	f000 f84c 	bl	80069fc <__malloc_unlock>
 8006964:	e7a1      	b.n	80068aa <_malloc_r+0x22>
 8006966:	6025      	str	r5, [r4, #0]
 8006968:	e7de      	b.n	8006928 <_malloc_r+0xa0>
 800696a:	bf00      	nop
 800696c:	20000b28 	.word	0x20000b28

08006970 <_realloc_r>:
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	4680      	mov	r8, r0
 8006976:	4614      	mov	r4, r2
 8006978:	460e      	mov	r6, r1
 800697a:	b921      	cbnz	r1, 8006986 <_realloc_r+0x16>
 800697c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006980:	4611      	mov	r1, r2
 8006982:	f7ff bf81 	b.w	8006888 <_malloc_r>
 8006986:	b92a      	cbnz	r2, 8006994 <_realloc_r+0x24>
 8006988:	f7ff ff12 	bl	80067b0 <_free_r>
 800698c:	4625      	mov	r5, r4
 800698e:	4628      	mov	r0, r5
 8006990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006994:	f000 f838 	bl	8006a08 <_malloc_usable_size_r>
 8006998:	4284      	cmp	r4, r0
 800699a:	4607      	mov	r7, r0
 800699c:	d802      	bhi.n	80069a4 <_realloc_r+0x34>
 800699e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069a2:	d812      	bhi.n	80069ca <_realloc_r+0x5a>
 80069a4:	4621      	mov	r1, r4
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff ff6e 	bl	8006888 <_malloc_r>
 80069ac:	4605      	mov	r5, r0
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d0ed      	beq.n	800698e <_realloc_r+0x1e>
 80069b2:	42bc      	cmp	r4, r7
 80069b4:	4622      	mov	r2, r4
 80069b6:	4631      	mov	r1, r6
 80069b8:	bf28      	it	cs
 80069ba:	463a      	movcs	r2, r7
 80069bc:	f7ff fed0 	bl	8006760 <memcpy>
 80069c0:	4631      	mov	r1, r6
 80069c2:	4640      	mov	r0, r8
 80069c4:	f7ff fef4 	bl	80067b0 <_free_r>
 80069c8:	e7e1      	b.n	800698e <_realloc_r+0x1e>
 80069ca:	4635      	mov	r5, r6
 80069cc:	e7df      	b.n	800698e <_realloc_r+0x1e>
	...

080069d0 <_sbrk_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d06      	ldr	r5, [pc, #24]	; (80069ec <_sbrk_r+0x1c>)
 80069d4:	2300      	movs	r3, #0
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f7fa ff34 	bl	8001848 <_sbrk>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_sbrk_r+0x1a>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_sbrk_r+0x1a>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	20000b30 	.word	0x20000b30

080069f0 <__malloc_lock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_lock+0x8>)
 80069f2:	f000 b811 	b.w	8006a18 <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20000b34 	.word	0x20000b34

080069fc <__malloc_unlock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_unlock+0x8>)
 80069fe:	f000 b80c 	b.w	8006a1a <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20000b34 	.word	0x20000b34

08006a08 <_malloc_usable_size_r>:
 8006a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a0c:	1f18      	subs	r0, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bfbc      	itt	lt
 8006a12:	580b      	ldrlt	r3, [r1, r0]
 8006a14:	18c0      	addlt	r0, r0, r3
 8006a16:	4770      	bx	lr

08006a18 <__retarget_lock_acquire_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_release_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <trunc>:
 8006a1c:	ec51 0b10 	vmov	r0, r1, d0
 8006a20:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a24:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006a28:	2b13      	cmp	r3, #19
 8006a2a:	b5d0      	push	{r4, r6, r7, lr}
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	dc10      	bgt.n	8006a52 <trunc+0x36>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bfa5      	ittet	ge
 8006a34:	4a11      	ldrge	r2, [pc, #68]	; (8006a7c <trunc+0x60>)
 8006a36:	fa42 f303 	asrge.w	r3, r2, r3
 8006a3a:	2100      	movlt	r1, #0
 8006a3c:	2100      	movge	r1, #0
 8006a3e:	bfb9      	ittee	lt
 8006a40:	2000      	movlt	r0, #0
 8006a42:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8006a46:	2000      	movge	r0, #0
 8006a48:	ea24 0103 	bicge.w	r1, r4, r3
 8006a4c:	ec41 0b10 	vmov	d0, r0, r1
 8006a50:	bdd0      	pop	{r4, r6, r7, pc}
 8006a52:	2b33      	cmp	r3, #51	; 0x33
 8006a54:	dd08      	ble.n	8006a68 <trunc+0x4c>
 8006a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5a:	d1f7      	bne.n	8006a4c <trunc+0x30>
 8006a5c:	ee10 2a10 	vmov	r2, s0
 8006a60:	460b      	mov	r3, r1
 8006a62:	f7f9 fc0b 	bl	800027c <__adddf3>
 8006a66:	e7f1      	b.n	8006a4c <trunc+0x30>
 8006a68:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a70:	fa23 f202 	lsr.w	r2, r3, r2
 8006a74:	ea20 0602 	bic.w	r6, r0, r2
 8006a78:	4630      	mov	r0, r6
 8006a7a:	e7e7      	b.n	8006a4c <trunc+0x30>
 8006a7c:	000fffff 	.word	0x000fffff

08006a80 <_init>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr

08006a8c <_fini>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr
