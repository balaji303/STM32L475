
003_LED_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004810  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e0  080049e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049e8  080049e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  2000000c  080049fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  080049fc  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018151  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c63  00000000  00000000  0003818d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0003adf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003c340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027209  00000000  00000000  0003d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181a7  00000000  00000000  00064981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef78f  00000000  00000000  0007cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c2b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b88  00000000  00000000  0016c308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004980 	.word	0x08004980

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004980 	.word	0x08004980

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 feed 	bl	80012ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f82c 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9f4 	bl	80008c4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004dc:	f000 f88a 	bl	80005f4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004e0:	f000 f8c0 	bl	8000664 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004e4:	f000 f8fc 	bl	80006e0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e8:	f000 f920 	bl	800072c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 f95c 	bl	80007a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004f0:	f000 f98a 	bl	8000808 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f4:	f000 f9b8 	bl	8000868 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80004f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <main+0x5c>)
 80004fe:	f001 fb37 	bl	8001b70 <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d105      	bne.n	8000514 <main+0x48>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050e:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x60>)
 8000510:	f001 fb46 	bl	8001ba0 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(100);
 8000514:	2064      	movs	r0, #100	; 0x64
 8000516:	f000 ff3f 	bl	8001398 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <main+0x60>)
 8000522:	f001 fb3d 	bl	8001ba0 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000526:	e7e7      	b.n	80004f8 <main+0x2c>
 8000528:	48000800 	.word	0x48000800
 800052c:	48000400 	.word	0x48000400

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fa16 	bl	8004970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000556:	f001 fdeb 	bl	8002130 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 fb62 	bl	8000c28 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000564:	f001 fdc6 	bl	80020f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <SystemClock_Config+0xc0>)
 800056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056e:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <SystemClock_Config+0xc0>)
 8000570:	f023 0318 	bic.w	r3, r3, #24
 8000574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000578:	2314      	movs	r3, #20
 800057a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000588:	2360      	movs	r3, #96	; 0x60
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000590:	2301      	movs	r3, #1
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000594:	2301      	movs	r3, #1
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000598:	2328      	movs	r3, #40	; 0x28
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fee1 	bl	8002374 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b8:	f000 fb36 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2303      	movs	r3, #3
 80005c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	2104      	movs	r1, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 faa9 	bl	8002b2c <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005e0:	f000 fb22 	bl	8000c28 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e4:	f002 ffb0 	bl	8003548 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e8:	bf00      	nop
 80005ea:	3758      	adds	r7, #88	; 0x58
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000

080005f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_DFSDM1_Init+0x68>)
 80005fa:	4a19      	ldr	r2, [pc, #100]	; (8000660 <MX_DFSDM1_Init+0x6c>)
 80005fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000600:	2201      	movs	r2, #1
 8000602:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_DFSDM1_Init+0x68>)
 800060c:	2202      	movs	r2, #2
 800060e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_DFSDM1_Init+0x68>)
 800061e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000622:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_DFSDM1_Init+0x68>)
 800062c:	2204      	movs	r2, #4
 800062e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000638:	2201      	movs	r2, #1
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_DFSDM1_Init+0x68>)
 800063e:	2200      	movs	r2, #0
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000644:	2200      	movs	r2, #0
 8000646:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_DFSDM1_Init+0x68>)
 800064a:	f000 ffdb 	bl	8001604 <HAL_DFSDM_ChannelInit>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000654:	f000 fae8 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000028 	.word	0x20000028
 8000660:	40016020 	.word	0x40016020

08000664 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_I2C2_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_I2C2_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_I2C2_Init+0x74>)
 8000670:	f640 6214 	movw	r2, #3604	; 0xe14
 8000674:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_I2C2_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_I2C2_Init+0x74>)
 800067e:	2201      	movs	r2, #1
 8000680:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_I2C2_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_I2C2_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C2_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_I2C2_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C2_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_I2C2_Init+0x74>)
 80006a2:	f001 fab8 	bl	8001c16 <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 fabc 	bl	8000c28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <MX_I2C2_Init+0x74>)
 80006b4:	f001 fb3e 	bl	8001d34 <HAL_I2CEx_ConfigAnalogFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006be:	f000 fab3 	bl	8000c28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C2_Init+0x74>)
 80006c6:	f001 fb80 	bl	8001dca <HAL_I2CEx_ConfigDigitalFilter>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006d0:	f000 faaa 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000060 	.word	0x20000060
 80006dc:	40005800 	.word	0x40005800

080006e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_QUADSPI_Init+0x44>)
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <MX_QUADSPI_Init+0x48>)
 80006e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_QUADSPI_Init+0x44>)
 80006ec:	2202      	movs	r2, #2
 80006ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_QUADSPI_Init+0x44>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_QUADSPI_Init+0x44>)
 80006f8:	2210      	movs	r2, #16
 80006fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_QUADSPI_Init+0x44>)
 80006fe:	2217      	movs	r2, #23
 8000700:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_QUADSPI_Init+0x44>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_QUADSPI_Init+0x44>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_QUADSPI_Init+0x44>)
 8000710:	f001 fd74 	bl	80021fc <HAL_QSPI_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800071a:	f000 fa85 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200000b4 	.word	0x200000b4
 8000728:	a0001000 	.word	0xa0001000

0800072c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_SPI3_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_SPI3_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_SPI3_Init+0x74>)
 8000738:	f44f 7282 	mov.w	r2, #260	; 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_SPI3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_SPI3_Init+0x74>)
 8000746:	f44f 7240 	mov.w	r2, #768	; 0x300
 800074a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_SPI3_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_SPI3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_SPI3_Init+0x74>)
 800075a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_SPI3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_SPI3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_SPI3_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_SPI3_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_SPI3_Init+0x74>)
 800077a:	2207      	movs	r2, #7
 800077c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_SPI3_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_SPI3_Init+0x74>)
 8000786:	2208      	movs	r2, #8
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_SPI3_Init+0x74>)
 800078c:	f003 f8be 	bl	800390c <HAL_SPI_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 fa47 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000f8 	.word	0x200000f8
 80007a4:	40003c00 	.word	0x40003c00

080007a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <MX_USART1_UART_Init+0x5c>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART1_UART_Init+0x58>)
 80007ec:	f003 f931 	bl	8003a52 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007f6:	f000 fa17 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000015c 	.word	0x2000015c
 8000804:	40013800 	.word	0x40013800

08000808 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART3_UART_Init+0x58>)
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MX_USART3_UART_Init+0x5c>)
 8000810:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_USART3_UART_Init+0x58>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_USART3_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART3_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART3_UART_Init+0x58>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART3_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART3_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART3_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART3_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART3_UART_Init+0x58>)
 800084c:	f003 f901 	bl	8003a52 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f9e7 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200001e0 	.word	0x200001e0
 8000864:	40004800 	.word	0x40004800

08000868 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000872:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2206      	movs	r2, #6
 8000878:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2202      	movs	r2, #2
 800087e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2202      	movs	r2, #2
 8000884:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	f001 fad9 	bl	8001e62 <HAL_PCD_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f9b7 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000264 	.word	0x20000264

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	4bbd      	ldr	r3, [pc, #756]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4abc      	ldr	r2, [pc, #752]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4bba      	ldr	r3, [pc, #744]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4bb7      	ldr	r3, [pc, #732]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4ab6      	ldr	r2, [pc, #728]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4bb4      	ldr	r3, [pc, #720]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4bb1      	ldr	r3, [pc, #708]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4ab0      	ldr	r2, [pc, #704]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4bae      	ldr	r3, [pc, #696]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4bab      	ldr	r3, [pc, #684]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4aaa      	ldr	r2, [pc, #680]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4ba8      	ldr	r3, [pc, #672]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093a:	4ba5      	ldr	r3, [pc, #660]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4aa4      	ldr	r2, [pc, #656]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4ba2      	ldr	r3, [pc, #648]	; (8000bd0 <MX_GPIO_Init+0x30c>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000958:	489e      	ldr	r0, [pc, #632]	; (8000bd4 <MX_GPIO_Init+0x310>)
 800095a:	f001 f921 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f248 1104 	movw	r1, #33028	; 0x8104
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f001 f91a 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800096c:	2200      	movs	r2, #0
 800096e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000972:	4899      	ldr	r0, [pc, #612]	; (8000bd8 <MX_GPIO_Init+0x314>)
 8000974:	f001 f914 	bl	8001ba0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f241 0181 	movw	r1, #4225	; 0x1081
 800097e:	4897      	ldr	r0, [pc, #604]	; (8000bdc <MX_GPIO_Init+0x318>)
 8000980:	f001 f90e 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098a:	4894      	ldr	r0, [pc, #592]	; (8000bdc <MX_GPIO_Init+0x318>)
 800098c:	f001 f908 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000996:	4892      	ldr	r0, [pc, #584]	; (8000be0 <MX_GPIO_Init+0x31c>)
 8000998:	f001 f902 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2120      	movs	r1, #32
 80009a0:	488d      	ldr	r0, [pc, #564]	; (8000bd8 <MX_GPIO_Init+0x314>)
 80009a2:	f001 f8fd 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2101      	movs	r1, #1
 80009aa:	488a      	ldr	r0, [pc, #552]	; (8000bd4 <MX_GPIO_Init+0x310>)
 80009ac:	f001 f8f8 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009b0:	f240 1315 	movw	r3, #277	; 0x115
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4882      	ldr	r0, [pc, #520]	; (8000bd4 <MX_GPIO_Init+0x310>)
 80009ca:	f000 ff27 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009ce:	236a      	movs	r3, #106	; 0x6a
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	487c      	ldr	r0, [pc, #496]	; (8000bd4 <MX_GPIO_Init+0x310>)
 80009e4:	f000 ff1a 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4878      	ldr	r0, [pc, #480]	; (8000be0 <MX_GPIO_Init+0x31c>)
 8000a00:	f000 ff0c 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a04:	233f      	movs	r3, #63	; 0x3f
 8000a06:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a08:	230b      	movs	r3, #11
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4872      	ldr	r0, [pc, #456]	; (8000be0 <MX_GPIO_Init+0x31c>)
 8000a18:	f000 ff00 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f000 feef 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a3e:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 fedf 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a5e:	2308      	movs	r3, #8
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 fece 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a80:	2310      	movs	r3, #16
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a84:	230b      	movs	r3, #11
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 fec1 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a9a:	23e0      	movs	r3, #224	; 0xe0
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f000 feb0 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000abc:	2301      	movs	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4841      	ldr	r0, [pc, #260]	; (8000bd8 <MX_GPIO_Init+0x314>)
 8000ad2:	f000 fea3 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ada:	230b      	movs	r3, #11
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	483b      	ldr	r0, [pc, #236]	; (8000bd8 <MX_GPIO_Init+0x314>)
 8000aea:	f000 fe97 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000aee:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000af2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4834      	ldr	r0, [pc, #208]	; (8000bd8 <MX_GPIO_Init+0x314>)
 8000b08:	f000 fe88 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b0c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b10:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	482e      	ldr	r0, [pc, #184]	; (8000bdc <MX_GPIO_Init+0x318>)
 8000b24:	f000 fe7a 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b28:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4826      	ldr	r0, [pc, #152]	; (8000bdc <MX_GPIO_Init+0x318>)
 8000b42:	f000 fe6b 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b46:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4820      	ldr	r0, [pc, #128]	; (8000be0 <MX_GPIO_Init+0x31c>)
 8000b60:	f000 fe5c 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b64:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4819      	ldr	r0, [pc, #100]	; (8000be0 <MX_GPIO_Init+0x31c>)
 8000b7c:	f000 fe4e 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b80:	2302      	movs	r3, #2
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b90:	2305      	movs	r3, #5
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_GPIO_Init+0x318>)
 8000b9c:	f000 fe3e 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ba0:	2378      	movs	r3, #120	; 0x78
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4808      	ldr	r0, [pc, #32]	; (8000bdc <MX_GPIO_Init+0x318>)
 8000bbc:	f000 fe2e 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc6:	2312      	movs	r3, #18
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e00a      	b.n	8000be4 <MX_GPIO_Init+0x320>
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48001000 	.word	0x48001000
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	48000c00 	.word	0x48000c00
 8000be0:	48000800 	.word	0x48000800
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bea:	2304      	movs	r3, #4
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <MX_GPIO_Init+0x360>)
 8000bf6:	f000 fe11 	bl	800181c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2017      	movs	r0, #23
 8000c00:	f000 fcc9 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c04:	2017      	movs	r0, #23
 8000c06:	f000 fce2 	bl	80015ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2028      	movs	r0, #40	; 0x28
 8000c10:	f000 fcc1 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c14:	2028      	movs	r0, #40	; 0x28
 8000c16:	f000 fcda 	bl	80015ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	48000400 	.word	0x48000400

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_MspInit+0x44>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6613      	str	r3, [r2, #96]	; 0x60
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x44>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x44>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x44>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0ac      	sub	sp, #176	; 0xb0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2288      	movs	r2, #136	; 0x88
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 fe67 	bl	8004970 <memset>
  if(DFSDM1_Init == 0)
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d142      	bne.n	8000d30 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 f95a 	bl	8002f74 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000cc6:	f7ff ffaf 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000cfa:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d14:	2306      	movs	r3, #6
 8000d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000d22:	f000 fd7b 	bl	800181c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	4a02      	ldr	r2, [pc, #8]	; (8000d38 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d2e:	6013      	str	r3, [r2, #0]
  }

}
 8000d30:	bf00      	nop
 8000d32:	37b0      	adds	r7, #176	; 0xb0
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000770 	.word	0x20000770
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48001000 	.word	0x48001000

08000d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0ac      	sub	sp, #176	; 0xb0
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2288      	movs	r2, #136	; 0x88
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 fe03 	bl	8004970 <memset>
  if(hi2c->Instance==I2C2)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <HAL_I2C_MspInit+0xb0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d13b      	bne.n	8000dec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 f8f7 	bl	8002f74 <HAL_RCCEx_PeriphCLKConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d8c:	f7ff ff4c 	bl	8000c28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_I2C_MspInit+0xb4>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <HAL_I2C_MspInit+0xb4>)
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_I2C_MspInit+0xb4>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000da8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <HAL_I2C_MspInit+0xb8>)
 8000dd0:	f000 fd24 	bl	800181c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_I2C_MspInit+0xb4>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_I2C_MspInit+0xb4>)
 8000dda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dde:	6593      	str	r3, [r2, #88]	; 0x58
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_I2C_MspInit+0xb4>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dec:	bf00      	nop
 8000dee:	37b0      	adds	r7, #176	; 0xb0
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40005800 	.word	0x40005800
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48000400 	.word	0x48000400

08000e00 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a17      	ldr	r2, [pc, #92]	; (8000e7c <HAL_QSPI_MspInit+0x7c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d128      	bne.n	8000e74 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_QSPI_MspInit+0x80>)
 8000e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e26:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <HAL_QSPI_MspInit+0x80>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2c:	6513      	str	r3, [r2, #80]	; 0x50
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_QSPI_MspInit+0x80>)
 8000e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_QSPI_MspInit+0x80>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_QSPI_MspInit+0x80>)
 8000e40:	f043 0310 	orr.w	r3, r3, #16
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_QSPI_MspInit+0x80>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e52:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e56:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e64:	230a      	movs	r3, #10
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_QSPI_MspInit+0x84>)
 8000e70:	f000 fcd4 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	a0001000 	.word	0xa0001000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48001000 	.word	0x48001000

08000e88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_SPI_MspInit+0x7c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d128      	bne.n	8000efc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_SPI_MspInit+0x80>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	4a16      	ldr	r2, [pc, #88]	; (8000f08 <HAL_SPI_MspInit+0x80>)
 8000eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_SPI_MspInit+0x80>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_SPI_MspInit+0x80>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <HAL_SPI_MspInit+0x80>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_SPI_MspInit+0x80>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000eda:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eec:	2306      	movs	r3, #6
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_SPI_MspInit+0x84>)
 8000ef8:	f000 fc90 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40003c00 	.word	0x40003c00
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000800 	.word	0x48000800

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ae      	sub	sp, #184	; 0xb8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2288      	movs	r2, #136	; 0x88
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 fd1d 	bl	8004970 <memset>
  if(huart->Instance==USART1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a42      	ldr	r2, [pc, #264]	; (8001044 <HAL_UART_MspInit+0x134>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d13b      	bne.n	8000fb8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f44:	2300      	movs	r3, #0
 8000f46:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 f811 	bl	8002f74 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f58:	f7ff fe66 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f60:	4a39      	ldr	r2, [pc, #228]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f66:	6613      	str	r3, [r2, #96]	; 0x60
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f78:	4a33      	ldr	r2, [pc, #204]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f80:	4b31      	ldr	r3, [pc, #196]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f8c:	23c0      	movs	r3, #192	; 0xc0
 8000f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4826      	ldr	r0, [pc, #152]	; (800104c <HAL_UART_MspInit+0x13c>)
 8000fb2:	f000 fc33 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fb6:	e040      	b.n	800103a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a24      	ldr	r2, [pc, #144]	; (8001050 <HAL_UART_MspInit+0x140>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d13b      	bne.n	800103a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 ffd0 	bl	8002f74 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000fda:	f7ff fe25 	bl	8000c28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a13      	ldr	r2, [pc, #76]	; (8001048 <HAL_UART_MspInit+0x138>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_UART_MspInit+0x138>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800100e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001028:	2307      	movs	r3, #7
 800102a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001032:	4619      	mov	r1, r3
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <HAL_UART_MspInit+0x144>)
 8001036:	f000 fbf1 	bl	800181c <HAL_GPIO_Init>
}
 800103a:	bf00      	nop
 800103c:	37b8      	adds	r7, #184	; 0xb8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40013800 	.word	0x40013800
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400
 8001050:	40004800 	.word	0x40004800
 8001054:	48000c00 	.word	0x48000c00

08001058 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0ac      	sub	sp, #176	; 0xb0
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2288      	movs	r2, #136	; 0x88
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fc79 	bl	8004970 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001086:	d17c      	bne.n	8001182 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800108e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001092:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800109e:	2318      	movs	r3, #24
 80010a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80010ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 ff5b 	bl	8002f74 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80010c4:	f7ff fdb0 	bl	8000c28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <HAL_PCD_MspInit+0x134>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	4a2f      	ldr	r2, [pc, #188]	; (800118c <HAL_PCD_MspInit+0x134>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <HAL_PCD_MspInit+0x134>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80010e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f000 fb8d 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001102:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800111c:	230a      	movs	r3, #10
 800111e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f000 fb76 	bl	800181c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_PCD_MspInit+0x134>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a15      	ldr	r2, [pc, #84]	; (800118c <HAL_PCD_MspInit+0x134>)
 8001136:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_PCD_MspInit+0x134>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_PCD_MspInit+0x134>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d114      	bne.n	800117e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_PCD_MspInit+0x134>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_PCD_MspInit+0x134>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6593      	str	r3, [r2, #88]	; 0x58
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_PCD_MspInit+0x134>)
 8001162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800116c:	f001 f836 	bl	80021dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_PCD_MspInit+0x134>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	4a05      	ldr	r2, [pc, #20]	; (800118c <HAL_PCD_MspInit+0x134>)
 8001176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800117a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800117c:	e001      	b.n	8001182 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800117e:	f001 f82d 	bl	80021dc <HAL_PWREx_EnableVddUSB>
}
 8001182:	bf00      	nop
 8001184:	37b0      	adds	r7, #176	; 0xb0
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <NMI_Handler+0x4>

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011dc:	f000 f8bc 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80011e8:	2020      	movs	r0, #32
 80011ea:	f000 fcf1 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80011ee:	2040      	movs	r0, #64	; 0x40
 80011f0:	f000 fcee 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80011f4:	2080      	movs	r0, #128	; 0x80
 80011f6:	f000 fceb 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80011fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011fe:	f000 fce7 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}

08001206 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800120a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800120e:	f000 fcdf 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001212:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001216:	f000 fcdb 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800121a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800121e:	f000 fcd7 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001222:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001226:	f000 fcd3 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800122a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800122e:	f000 fccf 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001260:	f7ff ffea 	bl	8001238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopForever+0xe>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f003 fb4d 	bl	8004928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128e:	f7ff f91d 	bl	80004cc <main>

08001292 <LoopForever>:

LoopForever:
    b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001294:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012a0:	080049f0 	.word	0x080049f0
  ldr r2, =_sbss
 80012a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012a8:	2000079c 	.word	0x2000079c

080012ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>

080012ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 f961 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f80e 	bl	80012e0 <HAL_InitTick>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	e001      	b.n	80012d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d0:	f7ff fcb0 	bl	8000c34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_InitTick+0x6c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d023      	beq.n	800133c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_InitTick+0x70>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_InitTick+0x6c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f96d 	bl	80015ea <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10f      	bne.n	8001336 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d809      	bhi.n	8001330 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 f937 	bl	8001596 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_InitTick+0x74>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e007      	b.n	8001340 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e004      	b.n	8001340 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e001      	b.n	8001340 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008
 8001350:	20000000 	.word	0x20000000
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008
 800137c:	20000774 	.word	0x20000774

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000774 	.word	0x20000774

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff3e 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff31 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0ac      	b.n	8001770 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f8b2 	bl	8001784 <DFSDM_GetChannelFromInstance>
 8001620:	4603      	mov	r3, r0
 8001622:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_DFSDM_ChannelInit+0x174>)
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e09f      	b.n	8001770 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fb23 	bl	8000c7c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <HAL_DFSDM_ChannelInit+0x178>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	4a4f      	ldr	r2, [pc, #316]	; (800177c <HAL_DFSDM_ChannelInit+0x178>)
 800163e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001640:	4b4e      	ldr	r3, [pc, #312]	; (800177c <HAL_DFSDM_ChannelInit+0x178>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d125      	bne.n	8001694 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001648:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <HAL_DFSDM_ChannelInit+0x17c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <HAL_DFSDM_ChannelInit+0x17c>)
 800164e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001652:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001654:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_DFSDM_ChannelInit+0x17c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4948      	ldr	r1, [pc, #288]	; (8001780 <HAL_DFSDM_ChannelInit+0x17c>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_DFSDM_ChannelInit+0x17c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a46      	ldr	r2, [pc, #280]	; (8001780 <HAL_DFSDM_ChannelInit+0x17c>)
 8001668:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800166c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	791b      	ldrb	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d108      	bne.n	8001688 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001676:	4b42      	ldr	r3, [pc, #264]	; (8001780 <HAL_DFSDM_ChannelInit+0x17c>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	3b01      	subs	r3, #1
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	493f      	ldr	r1, [pc, #252]	; (8001780 <HAL_DFSDM_ChannelInit+0x17c>)
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001688:	4b3d      	ldr	r3, [pc, #244]	; (8001780 <HAL_DFSDM_ChannelInit+0x17c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a3c      	ldr	r2, [pc, #240]	; (8001780 <HAL_DFSDM_ChannelInit+0x17c>)
 800168e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001692:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80016a2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016b2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016b8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 020f 	bic.w	r2, r2, #15
 80016d0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80016f8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6899      	ldr	r1, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	3b01      	subs	r3, #1
 800170a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f002 0207 	and.w	r2, r2, #7
 8001724:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001750:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f810 	bl	8001784 <DFSDM_GetChannelFromInstance>
 8001764:	4602      	mov	r2, r0
 8001766:	4904      	ldr	r1, [pc, #16]	; (8001778 <HAL_DFSDM_ChannelInit+0x174>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000077c 	.word	0x2000077c
 800177c:	20000778 	.word	0x20000778
 8001780:	40016000 	.word	0x40016000

08001784 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <DFSDM_GetChannelFromInstance+0x7c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d102      	bne.n	800179a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e02b      	b.n	80017f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <DFSDM_GetChannelFromInstance+0x80>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d102      	bne.n	80017a8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	e024      	b.n	80017f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <DFSDM_GetChannelFromInstance+0x84>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d102      	bne.n	80017b6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e01d      	b.n	80017f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <DFSDM_GetChannelFromInstance+0x88>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d102      	bne.n	80017c4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80017be:	2304      	movs	r3, #4
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e016      	b.n	80017f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <DFSDM_GetChannelFromInstance+0x8c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d102      	bne.n	80017d2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80017cc:	2305      	movs	r3, #5
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e00f      	b.n	80017f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <DFSDM_GetChannelFromInstance+0x90>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d102      	bne.n	80017e0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80017da:	2306      	movs	r3, #6
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e008      	b.n	80017f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <DFSDM_GetChannelFromInstance+0x94>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d102      	bne.n	80017ee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80017e8:	2307      	movs	r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e001      	b.n	80017f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80017ee:	2303      	movs	r3, #3
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40016000 	.word	0x40016000
 8001804:	40016020 	.word	0x40016020
 8001808:	40016040 	.word	0x40016040
 800180c:	40016080 	.word	0x40016080
 8001810:	400160a0 	.word	0x400160a0
 8001814:	400160c0 	.word	0x400160c0
 8001818:	400160e0 	.word	0x400160e0

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182a:	e17f      	b.n	8001b2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8171 	beq.w	8001b26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x40>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 0201 	and.w	r2, r3, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d118      	bne.n	80018fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018d0:	2201      	movs	r2, #1
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	f003 0201 	and.w	r2, r3, #1
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b03      	cmp	r3, #3
 8001906:	d017      	beq.n	8001938 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d123      	bne.n	800198c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	6939      	ldr	r1, [r7, #16]
 8001988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80ac 	beq.w	8001b26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	4b5f      	ldr	r3, [pc, #380]	; (8001b4c <HAL_GPIO_Init+0x330>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d2:	4a5e      	ldr	r2, [pc, #376]	; (8001b4c <HAL_GPIO_Init+0x330>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6613      	str	r3, [r2, #96]	; 0x60
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <HAL_GPIO_Init+0x330>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019e6:	4a5a      	ldr	r2, [pc, #360]	; (8001b50 <HAL_GPIO_Init+0x334>)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a10:	d025      	beq.n	8001a5e <HAL_GPIO_Init+0x242>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_GPIO_Init+0x338>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01f      	beq.n	8001a5a <HAL_GPIO_Init+0x23e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <HAL_GPIO_Init+0x33c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d019      	beq.n	8001a56 <HAL_GPIO_Init+0x23a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4d      	ldr	r2, [pc, #308]	; (8001b5c <HAL_GPIO_Init+0x340>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0x236>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_GPIO_Init+0x344>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00d      	beq.n	8001a4e <HAL_GPIO_Init+0x232>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <HAL_GPIO_Init+0x348>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0x22e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4a      	ldr	r2, [pc, #296]	; (8001b68 <HAL_GPIO_Init+0x34c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_GPIO_Init+0x22a>
 8001a42:	2306      	movs	r3, #6
 8001a44:	e00c      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a46:	2307      	movs	r3, #7
 8001a48:	e00a      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a4a:	2305      	movs	r3, #5
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a4e:	2304      	movs	r3, #4
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x244>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	f002 0203 	and.w	r2, r2, #3
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a70:	4937      	ldr	r1, [pc, #220]	; (8001b50 <HAL_GPIO_Init+0x334>)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <HAL_GPIO_Init+0x350>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aa2:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <HAL_GPIO_Init+0x350>)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <HAL_GPIO_Init+0x350>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001acc:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <HAL_GPIO_Init+0x350>)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_GPIO_Init+0x350>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <HAL_GPIO_Init+0x350>)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_GPIO_Init+0x350>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <HAL_GPIO_Init+0x350>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f47f ae78 	bne.w	800182c <HAL_GPIO_Init+0x10>
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	48000400 	.word	0x48000400
 8001b58:	48000800 	.word	0x48000800
 8001b5c:	48000c00 	.word	0x48000c00
 8001b60:	48001000 	.word	0x48001000
 8001b64:	48001400 	.word	0x48001400
 8001b68:	48001800 	.word	0x48001800
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e001      	b.n	8001b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f806 	bl	8001c00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e081      	b.n	8001d2c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d106      	bne.n	8001c42 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff f881 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2224      	movs	r2, #36	; 0x24
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0201 	bic.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c66:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c76:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	e006      	b.n	8001c9e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d104      	bne.n	8001cb0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cd2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69d9      	ldr	r1, [r3, #28]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1a      	ldr	r2, [r3, #32]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d138      	bne.n	8001dbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e032      	b.n	8001dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	; 0x24
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d139      	bne.n	8001e54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e033      	b.n	8001e56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2224      	movs	r2, #36	; 0x24
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e000      	b.n	8001e56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
  }
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e64:	b08f      	sub	sp, #60	; 0x3c
 8001e66:	af0a      	add	r7, sp, #40	; 0x28
 8001e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e116      	b.n	80020a2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff f8e2 	bl	8001058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2203      	movs	r2, #3
 8001e98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 faaf 	bl	8004416 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	687e      	ldr	r6, [r7, #4]
 8001ec0:	466d      	mov	r5, sp
 8001ec2:	f106 0410 	add.w	r4, r6, #16
 8001ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ece:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ed2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ed6:	1d33      	adds	r3, r6, #4
 8001ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eda:	6838      	ldr	r0, [r7, #0]
 8001edc:	f002 fa6f 	bl	80043be <USB_CoreInit>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0d7      	b.n	80020a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 fa9d 	bl	8004438 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e04a      	b.n	8001f9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	333d      	adds	r3, #61	; 0x3d
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	333c      	adds	r3, #60	; 0x3c
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	b298      	uxth	r0, r3
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3344      	adds	r3, #68	; 0x44
 8001f40:	4602      	mov	r2, r0
 8001f42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3340      	adds	r3, #64	; 0x40
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3348      	adds	r3, #72	; 0x48
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	334c      	adds	r3, #76	; 0x4c
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3354      	adds	r3, #84	; 0x54
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	3301      	adds	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d3af      	bcc.n	8001f04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	e044      	b.n	8002034 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	3301      	adds	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	d3b5      	bcc.n	8001faa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	687e      	ldr	r6, [r7, #4]
 8002046:	466d      	mov	r5, sp
 8002048:	f106 0410 	add.w	r4, r6, #16
 800204c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002054:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002058:	e885 0003 	stmia.w	r5, {r0, r1}
 800205c:	1d33      	adds	r3, r6, #4
 800205e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002060:	6838      	ldr	r0, [r7, #0]
 8002062:	f002 fa35 	bl	80044d0 <USB_DevInit>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e014      	b.n	80020a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	2b01      	cmp	r3, #1
 800208e:	d102      	bne.n	8002096 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f80a 	bl	80020aa <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fbe1 	bl	8004862 <USB_DevDisconnect>

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	f043 0303 	orr.w	r3, r3, #3
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40007000 	.word	0x40007000

08002114 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_PWREx_GetVoltageRange+0x18>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40007000 	.word	0x40007000

08002130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213e:	d130      	bne.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214c:	d038      	beq.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2232      	movs	r2, #50	; 0x32
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9b      	lsrs	r3, r3, #18
 8002170:	3301      	adds	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002174:	e002      	b.n	800217c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3b01      	subs	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002188:	d102      	bne.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x60>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f2      	bne.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219c:	d110      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e00f      	b.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	d007      	beq.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021b8:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40007000 	.word	0x40007000
 80021d4:	20000000 	.word	0x20000000
 80021d8:	431bde83 	.word	0x431bde83

080021dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ea:	6053      	str	r3, [r2, #4]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000

080021fc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af02      	add	r7, sp, #8
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff f8bc 	bl	8001380 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e063      	b.n	80022dc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10b      	bne.n	8002238 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe fde9 	bl	8000e00 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800222e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f858 	bl	80022e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	3b01      	subs	r3, #1
 8002248:	021a      	lsls	r2, r3, #8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	2120      	movs	r1, #32
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f850 	bl	8002304 <QSPI_WaitFlagStateUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d131      	bne.n	80022d2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002278:	f023 0310 	bic.w	r3, r3, #16
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6852      	ldr	r2, [r2, #4]
 8002280:	0611      	lsls	r1, r2, #24
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68d2      	ldr	r2, [r2, #12]
 8002286:	4311      	orrs	r1, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	430b      	orrs	r3, r1
 800228e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_QSPI_Init+0xe8>)
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6912      	ldr	r2, [r2, #16]
 800229e:	0411      	lsls	r1, r2, #16
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6952      	ldr	r2, [r2, #20]
 80022a4:	4311      	orrs	r1, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6992      	ldr	r2, [r2, #24]
 80022aa:	4311      	orrs	r1, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80022da:	7afb      	ldrb	r3, [r7, #11]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	ffe0f8fe 	.word	0xffe0f8fe

080022e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002314:	e01a      	b.n	800234c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d016      	beq.n	800234c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231e:	f7ff f82f 	bl	8001380 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	429a      	cmp	r2, r3
 800232c:	d302      	bcc.n	8002334 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2204      	movs	r2, #4
 8002338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e00e      	b.n	800236a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	429a      	cmp	r2, r3
 8002366:	d1d6      	bne.n	8002316 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e3ca      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002386:	4b97      	ldr	r3, [pc, #604]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002390:	4b94      	ldr	r3, [pc, #592]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80e4 	beq.w	8002570 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_RCC_OscConfig+0x4a>
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	f040 808b 	bne.w	80024cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	f040 8087 	bne.w	80024cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023be:	4b89      	ldr	r3, [pc, #548]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_RCC_OscConfig+0x62>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e3a2      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1a      	ldr	r2, [r3, #32]
 80023da:	4b82      	ldr	r3, [pc, #520]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <HAL_RCC_OscConfig+0x7c>
 80023e6:	4b7f      	ldr	r3, [pc, #508]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ee:	e005      	b.n	80023fc <HAL_RCC_OscConfig+0x88>
 80023f0:	4b7c      	ldr	r3, [pc, #496]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80023f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d223      	bcs.n	8002448 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fd55 	bl	8002eb4 <RCC_SetFlashLatencyFromMSIRange>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e383      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002414:	4b73      	ldr	r3, [pc, #460]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a72      	ldr	r2, [pc, #456]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 800241a:	f043 0308 	orr.w	r3, r3, #8
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	496d      	ldr	r1, [pc, #436]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	4968      	ldr	r1, [pc, #416]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
 8002446:	e025      	b.n	8002494 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002448:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a65      	ldr	r2, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 800244e:	f043 0308 	orr.w	r3, r3, #8
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4960      	ldr	r1, [pc, #384]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	495b      	ldr	r1, [pc, #364]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fd15 	bl	8002eb4 <RCC_SetFlashLatencyFromMSIRange>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e343      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002494:	f000 fc4a 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b52      	ldr	r3, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	4950      	ldr	r1, [pc, #320]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	4a4e      	ldr	r2, [pc, #312]	; (80025ec <HAL_RCC_OscConfig+0x278>)
 80024b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024b4:	4b4e      	ldr	r3, [pc, #312]	; (80025f0 <HAL_RCC_OscConfig+0x27c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe ff11 	bl	80012e0 <HAL_InitTick>
 80024be:	4603      	mov	r3, r0
 80024c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d052      	beq.n	800256e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	e327      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d032      	beq.n	800253a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a42      	ldr	r2, [pc, #264]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024e0:	f7fe ff4e 	bl	8001380 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e8:	f7fe ff4a 	bl	8001380 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e310      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024fa:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002506:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a36      	ldr	r2, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 800250c:	f043 0308 	orr.w	r3, r3, #8
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4931      	ldr	r1, [pc, #196]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002524:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	492c      	ldr	r1, [pc, #176]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
 8002538:	e01a      	b.n	8002570 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a29      	ldr	r2, [pc, #164]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002546:	f7fe ff1b 	bl	8001380 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800254e:	f7fe ff17 	bl	8001380 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e2dd      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x1da>
 800256c:	e000      	b.n	8002570 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800256e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d074      	beq.n	8002666 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d005      	beq.n	800258e <HAL_RCC_OscConfig+0x21a>
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b0c      	cmp	r3, #12
 8002586:	d10e      	bne.n	80025a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d10b      	bne.n	80025a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d064      	beq.n	8002664 <HAL_RCC_OscConfig+0x2f0>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d160      	bne.n	8002664 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e2ba      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x24a>
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e026      	b.n	800260c <HAL_RCC_OscConfig+0x298>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c6:	d115      	bne.n	80025f4 <HAL_RCC_OscConfig+0x280>
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80025ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a02      	ldr	r2, [pc, #8]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 80025da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	e014      	b.n	800260c <HAL_RCC_OscConfig+0x298>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08004998 	.word	0x08004998
 80025ec:	20000000 	.word	0x20000000
 80025f0:	20000004 	.word	0x20000004
 80025f4:	4ba0      	ldr	r3, [pc, #640]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a9f      	ldr	r2, [pc, #636]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b9d      	ldr	r3, [pc, #628]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a9c      	ldr	r2, [pc, #624]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe feb4 	bl	8001380 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe feb0 	bl	8001380 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e276      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800262e:	4b92      	ldr	r3, [pc, #584]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x2a8>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fea0 	bl	8001380 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fe9c 	bl	8001380 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e262      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002656:	4b88      	ldr	r3, [pc, #544]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x2d0>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d060      	beq.n	8002734 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d005      	beq.n	8002684 <HAL_RCC_OscConfig+0x310>
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d119      	bne.n	80026b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d116      	bne.n	80026b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002684:	4b7c      	ldr	r3, [pc, #496]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_OscConfig+0x328>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e23f      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b76      	ldr	r3, [pc, #472]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	4973      	ldr	r1, [pc, #460]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b0:	e040      	b.n	8002734 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d023      	beq.n	8002702 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ba:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6e      	ldr	r2, [pc, #440]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fe5b 	bl	8001380 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ce:	f7fe fe57 	bl	8001380 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e21d      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e0:	4b65      	ldr	r3, [pc, #404]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b62      	ldr	r3, [pc, #392]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	495f      	ldr	r1, [pc, #380]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
 8002700:	e018      	b.n	8002734 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002702:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a5c      	ldr	r2, [pc, #368]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe fe37 	bl	8001380 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002716:	f7fe fe33 	bl	8001380 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e1f9      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d03c      	beq.n	80027ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01c      	beq.n	8002782 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002748:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 800274a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274e:	4a4a      	ldr	r2, [pc, #296]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe fe12 	bl	8001380 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002760:	f7fe fe0e 	bl	8001380 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1d4      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002772:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ef      	beq.n	8002760 <HAL_RCC_OscConfig+0x3ec>
 8002780:	e01b      	b.n	80027ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002788:	4a3b      	ldr	r2, [pc, #236]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002792:	f7fe fdf5 	bl	8001380 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279a:	f7fe fdf1 	bl	8001380 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e1b7      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027ac:	4b32      	ldr	r3, [pc, #200]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80027ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ef      	bne.n	800279a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80a6 	beq.w	8002914 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027cc:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10d      	bne.n	80027f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	4a26      	ldr	r2, [pc, #152]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80027de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e2:	6593      	str	r3, [r2, #88]	; 0x58
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f0:	2301      	movs	r3, #1
 80027f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCC_OscConfig+0x508>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d118      	bne.n	8002832 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HAL_RCC_OscConfig+0x508>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <HAL_RCC_OscConfig+0x508>)
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280c:	f7fe fdb8 	bl	8001380 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002814:	f7fe fdb4 	bl	8001380 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e17a      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_RCC_OscConfig+0x508>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d108      	bne.n	800284c <HAL_RCC_OscConfig+0x4d8>
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800284a:	e029      	b.n	80028a0 <HAL_RCC_OscConfig+0x52c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b05      	cmp	r3, #5
 8002852:	d115      	bne.n	8002880 <HAL_RCC_OscConfig+0x50c>
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	4a03      	ldr	r2, [pc, #12]	; (8002878 <HAL_RCC_OscConfig+0x504>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002874:	e014      	b.n	80028a0 <HAL_RCC_OscConfig+0x52c>
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
 8002880:	4b9c      	ldr	r3, [pc, #624]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	4a9b      	ldr	r2, [pc, #620]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002890:	4b98      	ldr	r3, [pc, #608]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	4a97      	ldr	r2, [pc, #604]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002898:	f023 0304 	bic.w	r3, r3, #4
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d016      	beq.n	80028d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7fe fd6a 	bl	8001380 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b0:	f7fe fd66 	bl	8001380 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e12a      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c6:	4b8b      	ldr	r3, [pc, #556]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0ed      	beq.n	80028b0 <HAL_RCC_OscConfig+0x53c>
 80028d4:	e015      	b.n	8002902 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d6:	f7fe fd53 	bl	8001380 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe fd4f 	bl	8001380 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e113      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f4:	4b7f      	ldr	r3, [pc, #508]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ed      	bne.n	80028de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002902:	7ffb      	ldrb	r3, [r7, #31]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002908:	4b7a      	ldr	r3, [pc, #488]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	4a79      	ldr	r2, [pc, #484]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 800290e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002912:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80fe 	beq.w	8002b1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	2b02      	cmp	r3, #2
 8002924:	f040 80d0 	bne.w	8002ac8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002928:	4b72      	ldr	r3, [pc, #456]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f003 0203 	and.w	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	429a      	cmp	r2, r3
 800293a:	d130      	bne.n	800299e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	3b01      	subs	r3, #1
 8002948:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d127      	bne.n	800299e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002958:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d11f      	bne.n	800299e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002968:	2a07      	cmp	r2, #7
 800296a:	bf14      	ite	ne
 800296c:	2201      	movne	r2, #1
 800296e:	2200      	moveq	r2, #0
 8002970:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002972:	4293      	cmp	r3, r2
 8002974:	d113      	bne.n	800299e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	085b      	lsrs	r3, r3, #1
 8002982:	3b01      	subs	r3, #1
 8002984:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d109      	bne.n	800299e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	3b01      	subs	r3, #1
 8002998:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d06e      	beq.n	8002a7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d069      	beq.n	8002a78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029a4:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0ad      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029c0:	4b4c      	ldr	r3, [pc, #304]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4b      	ldr	r2, [pc, #300]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 80029c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029cc:	f7fe fcd8 	bl	8001380 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe fcd4 	bl	8001380 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e09a      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e6:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f2:	4b40      	ldr	r3, [pc, #256]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <HAL_RCC_OscConfig+0x784>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a02:	3a01      	subs	r2, #1
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a0c:	0212      	lsls	r2, r2, #8
 8002a0e:	4311      	orrs	r1, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a14:	0852      	lsrs	r2, r2, #1
 8002a16:	3a01      	subs	r2, #1
 8002a18:	0552      	lsls	r2, r2, #21
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a20:	0852      	lsrs	r2, r2, #1
 8002a22:	3a01      	subs	r2, #1
 8002a24:	0652      	lsls	r2, r2, #25
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a2c:	0912      	lsrs	r2, r2, #4
 8002a2e:	0452      	lsls	r2, r2, #17
 8002a30:	430a      	orrs	r2, r1
 8002a32:	4930      	ldr	r1, [pc, #192]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a38:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2d      	ldr	r2, [pc, #180]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a44:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a2a      	ldr	r2, [pc, #168]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a50:	f7fe fc96 	bl	8001380 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fe fc92 	bl	8001380 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e058      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a76:	e050      	b.n	8002b1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e04f      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d148      	bne.n	8002b1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aa0:	f7fe fc6e 	bl	8001380 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe fc6a 	bl	8001380 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e030      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x734>
 8002ac6:	e028      	b.n	8002b1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d023      	beq.n	8002b16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <HAL_RCC_OscConfig+0x780>)
 8002ad4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe fc51 	bl	8001380 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae0:	e00c      	b.n	8002afc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe fc4d 	bl	8001380 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d905      	bls.n	8002afc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e013      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
 8002af4:	40021000 	.word	0x40021000
 8002af8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_OscConfig+0x7b0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ec      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_OscConfig+0x7b0>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	4905      	ldr	r1, [pc, #20]	; (8002b24 <HAL_RCC_OscConfig+0x7b0>)
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_OscConfig+0x7b4>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	60cb      	str	r3, [r1, #12]
 8002b14:	e001      	b.n	8002b1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	feeefffc 	.word	0xfeeefffc

08002b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0e7      	b.n	8002d10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b75      	ldr	r3, [pc, #468]	; (8002d18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d910      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 0207 	bic.w	r2, r3, #7
 8002b56:	4970      	ldr	r1, [pc, #448]	; (8002d18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b6e      	ldr	r3, [pc, #440]	; (8002d18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0cf      	b.n	8002d10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d010      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d908      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8c:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4960      	ldr	r1, [pc, #384]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d04c      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb2:	4b5a      	ldr	r3, [pc, #360]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d121      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0a6      	b.n	8002d10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bca:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d115      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e09a      	b.n	8002d10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002be2:	4b4e      	ldr	r3, [pc, #312]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e08e      	b.n	8002d10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf2:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e086      	b.n	8002d10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b46      	ldr	r3, [pc, #280]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4943      	ldr	r1, [pc, #268]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c14:	f7fe fbb4 	bl	8001380 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7fe fbb0 	bl	8001380 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e06e      	b.n	8002d10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 020c 	and.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1eb      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d010      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d208      	bcs.n	8002c72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c60:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	492b      	ldr	r1, [pc, #172]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c72:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_RCC_ClockConfig+0x1ec>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d210      	bcs.n	8002ca2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_RCC_ClockConfig+0x1ec>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 0207 	bic.w	r2, r3, #7
 8002c88:	4923      	ldr	r1, [pc, #140]	; (8002d18 <HAL_RCC_ClockConfig+0x1ec>)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c90:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_RCC_ClockConfig+0x1ec>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e036      	b.n	8002d10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4918      	ldr	r1, [pc, #96]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d009      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4910      	ldr	r1, [pc, #64]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ce0:	f000 f824 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_RCC_ClockConfig+0x1f0>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	490b      	ldr	r1, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1f4>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfc:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <HAL_RCC_ClockConfig+0x1f8>)
 8002cfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1fc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe faeb 	bl	80012e0 <HAL_InitTick>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40022000 	.word	0x40022000
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	08004998 	.word	0x08004998
 8002d24:	20000000 	.word	0x20000000
 8002d28:	20000004 	.word	0x20000004

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d44:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x34>
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d121      	bne.n	8002d9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d11e      	bne.n	8002d9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d60:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d6c:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e005      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d88:	4a2b      	ldr	r2, [pc, #172]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10d      	bne.n	8002db4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d102      	bne.n	8002daa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002da6:	61bb      	str	r3, [r7, #24]
 8002da8:	e004      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002db0:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x114>)
 8002db2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	d134      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d003      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xac>
 8002dd0:	e005      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002dd4:	617b      	str	r3, [r7, #20]
      break;
 8002dd6:	e005      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dda:	617b      	str	r3, [r7, #20]
      break;
 8002ddc:	e002      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	617b      	str	r3, [r7, #20]
      break;
 8002de2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	3301      	adds	r3, #1
 8002df0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	fb03 f202 	mul.w	r2, r3, r2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	0e5b      	lsrs	r3, r3, #25
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	3301      	adds	r3, #1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e24:	69bb      	ldr	r3, [r7, #24]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3724      	adds	r7, #36	; 0x24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	080049b0 	.word	0x080049b0
 8002e3c:	00f42400 	.word	0x00f42400
 8002e40:	007a1200 	.word	0x007a1200

08002e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000000 	.word	0x20000000

08002e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e60:	f7ff fff0 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4904      	ldr	r1, [pc, #16]	; (8002e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	080049a8 	.word	0x080049a8

08002e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e8c:	f7ff ffda 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0adb      	lsrs	r3, r3, #11
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	080049a8 	.word	0x080049a8

08002eb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ec0:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ecc:	f7ff f922 	bl	8002114 <HAL_PWREx_GetVoltageRange>
 8002ed0:	6178      	str	r0, [r7, #20]
 8002ed2:	e014      	b.n	8002efe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ed4:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee0:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002eec:	f7ff f912 	bl	8002114 <HAL_PWREx_GetVoltageRange>
 8002ef0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f04:	d10b      	bne.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b80      	cmp	r3, #128	; 0x80
 8002f0a:	d919      	bls.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2ba0      	cmp	r3, #160	; 0xa0
 8002f10:	d902      	bls.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f12:	2302      	movs	r3, #2
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	e013      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f18:	2301      	movs	r3, #1
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	e010      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b80      	cmp	r3, #128	; 0x80
 8002f22:	d902      	bls.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f24:	2303      	movs	r3, #3
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e00a      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b80      	cmp	r3, #128	; 0x80
 8002f2e:	d102      	bne.n	8002f36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f30:	2302      	movs	r3, #2
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	e004      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b70      	cmp	r3, #112	; 0x70
 8002f3a:	d101      	bne.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 0207 	bic.w	r2, r3, #7
 8002f48:	4909      	ldr	r1, [pc, #36]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d001      	beq.n	8002f62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40022000 	.word	0x40022000

08002f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f80:	2300      	movs	r3, #0
 8002f82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d041      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f98:	d02a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f9e:	d824      	bhi.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fa4:	d008      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002faa:	d81e      	bhi.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb4:	d010      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fb6:	e018      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fb8:	4b86      	ldr	r3, [pc, #536]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a85      	ldr	r2, [pc, #532]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 facb 	bl	8003568 <RCCEx_PLLSAI1_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fd6:	e00c      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3320      	adds	r3, #32
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fbb6 	bl	8003750 <RCCEx_PLLSAI2_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fe8:	e003      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	74fb      	strb	r3, [r7, #19]
      break;
 8002fee:	e000      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ff8:	4b76      	ldr	r3, [pc, #472]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003006:	4973      	ldr	r1, [pc, #460]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800300e:	e001      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d041      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003024:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003028:	d02a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800302a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800302e:	d824      	bhi.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003034:	d008      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800303a:	d81e      	bhi.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003044:	d010      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003046:	e018      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003048:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a61      	ldr	r2, [pc, #388]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003052:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003054:	e015      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3304      	adds	r3, #4
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fa83 	bl	8003568 <RCCEx_PLLSAI1_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003066:	e00c      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3320      	adds	r3, #32
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fb6e 	bl	8003750 <RCCEx_PLLSAI2_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003078:	e003      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	74fb      	strb	r3, [r7, #19]
      break;
 800307e:	e000      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003082:	7cfb      	ldrb	r3, [r7, #19]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003088:	4b52      	ldr	r3, [pc, #328]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003096:	494f      	ldr	r1, [pc, #316]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800309e:	e001      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80a0 	beq.w	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b2:	2300      	movs	r3, #0
 80030b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030b6:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030cc:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	4a40      	ldr	r2, [pc, #256]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d6:	6593      	str	r3, [r2, #88]	; 0x58
 80030d8:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e4:	2301      	movs	r3, #1
 80030e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e8:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3a      	ldr	r2, [pc, #232]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030f4:	f7fe f944 	bl	8001380 <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030fa:	e009      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fc:	f7fe f940 	bl	8001380 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d902      	bls.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	74fb      	strb	r3, [r7, #19]
        break;
 800310e:	e005      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0ef      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800311c:	7cfb      	ldrb	r3, [r7, #19]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d15c      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003122:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01f      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	429a      	cmp	r2, r3
 800313e:	d019      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	4a20      	ldr	r2, [pc, #128]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fe f8ff 	bl	8001380 <HAL_GetTick>
 8003182:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003184:	e00b      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe f8fb 	bl	8001380 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d902      	bls.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	74fb      	strb	r3, [r7, #19]
            break;
 800319c:	e006      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ec      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c2:	4904      	ldr	r1, [pc, #16]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031ca:	e009      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	74bb      	strb	r3, [r7, #18]
 80031d0:	e006      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e0:	7c7b      	ldrb	r3, [r7, #17]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	4b9e      	ldr	r3, [pc, #632]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	4a9d      	ldr	r2, [pc, #628]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031fe:	4b98      	ldr	r3, [pc, #608]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f023 0203 	bic.w	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	4994      	ldr	r1, [pc, #592]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003220:	4b8f      	ldr	r3, [pc, #572]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f023 020c 	bic.w	r2, r3, #12
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	498c      	ldr	r1, [pc, #560]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003242:	4b87      	ldr	r3, [pc, #540]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003248:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	4983      	ldr	r1, [pc, #524]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003264:	4b7e      	ldr	r3, [pc, #504]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	497b      	ldr	r1, [pc, #492]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003286:	4b76      	ldr	r3, [pc, #472]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	4972      	ldr	r1, [pc, #456]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032a8:	4b6d      	ldr	r3, [pc, #436]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	496a      	ldr	r1, [pc, #424]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ca:	4b65      	ldr	r3, [pc, #404]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	4961      	ldr	r1, [pc, #388]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032ec:	4b5c      	ldr	r3, [pc, #368]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fa:	4959      	ldr	r1, [pc, #356]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800330e:	4b54      	ldr	r3, [pc, #336]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331c:	4950      	ldr	r1, [pc, #320]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	4948      	ldr	r1, [pc, #288]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003352:	4b43      	ldr	r3, [pc, #268]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	493f      	ldr	r1, [pc, #252]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d028      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003374:	4b3a      	ldr	r3, [pc, #232]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003382:	4937      	ldr	r1, [pc, #220]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800338e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003392:	d106      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a31      	ldr	r2, [pc, #196]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800339e:	60d3      	str	r3, [r2, #12]
 80033a0:	e011      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033aa:	d10c      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	2101      	movs	r1, #1
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f8d8 	bl	8003568 <RCCEx_PLLSAI1_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033c2:	7cfb      	ldrb	r3, [r7, #19]
 80033c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d028      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033d2:	4b23      	ldr	r3, [pc, #140]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	491f      	ldr	r1, [pc, #124]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f0:	d106      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f2:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	4a1a      	ldr	r2, [pc, #104]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033fc:	60d3      	str	r3, [r2, #12]
 80033fe:	e011      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003408:	d10c      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3304      	adds	r3, #4
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f000 f8a9 	bl	8003568 <RCCEx_PLLSAI1_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800341a:	7cfb      	ldrb	r3, [r7, #19]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d02b      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343e:	4908      	ldr	r1, [pc, #32]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800344e:	d109      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4a02      	ldr	r2, [pc, #8]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800345a:	60d3      	str	r3, [r2, #12]
 800345c:	e014      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800346c:	d10c      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	2101      	movs	r1, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f000 f877 	bl	8003568 <RCCEx_PLLSAI1_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d02f      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a2:	4928      	ldr	r1, [pc, #160]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	2102      	movs	r1, #2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f854 	bl	8003568 <RCCEx_PLLSAI1_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d014      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	74bb      	strb	r3, [r7, #18]
 80034ce:	e011      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3320      	adds	r3, #32
 80034de:	2102      	movs	r1, #2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f935 	bl	8003750 <RCCEx_PLLSAI2_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003500:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800350e:	490d      	ldr	r1, [pc, #52]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003532:	4904      	ldr	r1, [pc, #16]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800353a:	7cbb      	ldrb	r3, [r7, #18]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000

08003568 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003576:	4b75      	ldr	r3, [pc, #468]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d018      	beq.n	80035b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003582:	4b72      	ldr	r3, [pc, #456]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0203 	and.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d10d      	bne.n	80035ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
       ||
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800359a:	4b6c      	ldr	r3, [pc, #432]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
       ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d047      	beq.n	800363e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	e044      	b.n	800363e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d018      	beq.n	80035ee <RCCEx_PLLSAI1_Config+0x86>
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d825      	bhi.n	800360c <RCCEx_PLLSAI1_Config+0xa4>
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d002      	beq.n	80035ca <RCCEx_PLLSAI1_Config+0x62>
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d009      	beq.n	80035dc <RCCEx_PLLSAI1_Config+0x74>
 80035c8:	e020      	b.n	800360c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ca:	4b60      	ldr	r3, [pc, #384]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11d      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035da:	e01a      	b.n	8003612 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035dc:	4b5b      	ldr	r3, [pc, #364]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d116      	bne.n	8003616 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ec:	e013      	b.n	8003616 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035ee:	4b57      	ldr	r3, [pc, #348]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10f      	bne.n	800361a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035fa:	4b54      	ldr	r3, [pc, #336]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800360a:	e006      	b.n	800361a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      break;
 8003610:	e004      	b.n	800361c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003612:	bf00      	nop
 8003614:	e002      	b.n	800361c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003616:	bf00      	nop
 8003618:	e000      	b.n	800361c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800361a:	bf00      	nop
    }

    if(status == HAL_OK)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10d      	bne.n	800363e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003622:	4b4a      	ldr	r3, [pc, #296]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	430b      	orrs	r3, r1
 8003638:	4944      	ldr	r1, [pc, #272]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d17d      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003644:	4b41      	ldr	r3, [pc, #260]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a40      	ldr	r2, [pc, #256]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 800364a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800364e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003650:	f7fd fe96 	bl	8001380 <HAL_GetTick>
 8003654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003656:	e009      	b.n	800366c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003658:	f7fd fe92 	bl	8001380 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d902      	bls.n	800366c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	73fb      	strb	r3, [r7, #15]
        break;
 800366a:	e005      	b.n	8003678 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800366c:	4b37      	ldr	r3, [pc, #220]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ef      	bne.n	8003658 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d160      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800368c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6892      	ldr	r2, [r2, #8]
 8003694:	0211      	lsls	r1, r2, #8
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68d2      	ldr	r2, [r2, #12]
 800369a:	0912      	lsrs	r2, r2, #4
 800369c:	0452      	lsls	r2, r2, #17
 800369e:	430a      	orrs	r2, r1
 80036a0:	492a      	ldr	r1, [pc, #168]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	610b      	str	r3, [r1, #16]
 80036a6:	e027      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d112      	bne.n	80036d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ae:	4b27      	ldr	r3, [pc, #156]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6892      	ldr	r2, [r2, #8]
 80036be:	0211      	lsls	r1, r2, #8
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6912      	ldr	r2, [r2, #16]
 80036c4:	0852      	lsrs	r2, r2, #1
 80036c6:	3a01      	subs	r2, #1
 80036c8:	0552      	lsls	r2, r2, #21
 80036ca:	430a      	orrs	r2, r1
 80036cc:	491f      	ldr	r1, [pc, #124]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	610b      	str	r3, [r1, #16]
 80036d2:	e011      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6892      	ldr	r2, [r2, #8]
 80036e4:	0211      	lsls	r1, r2, #8
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6952      	ldr	r2, [r2, #20]
 80036ea:	0852      	lsrs	r2, r2, #1
 80036ec:	3a01      	subs	r2, #1
 80036ee:	0652      	lsls	r2, r2, #25
 80036f0:	430a      	orrs	r2, r1
 80036f2:	4916      	ldr	r1, [pc, #88]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd fe3c 	bl	8001380 <HAL_GetTick>
 8003708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800370a:	e009      	b.n	8003720 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800370c:	f7fd fe38 	bl	8001380 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d902      	bls.n	8003720 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	73fb      	strb	r3, [r7, #15]
          break;
 800371e:	e005      	b.n	800372c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ef      	beq.n	800370c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	4904      	ldr	r1, [pc, #16]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 800373c:	4313      	orrs	r3, r2
 800373e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000

08003750 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800375e:	4b6a      	ldr	r3, [pc, #424]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d018      	beq.n	800379c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800376a:	4b67      	ldr	r3, [pc, #412]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0203 	and.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d10d      	bne.n	8003796 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
       ||
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003782:	4b61      	ldr	r3, [pc, #388]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
       ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d047      	beq.n	8003826 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e044      	b.n	8003826 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d018      	beq.n	80037d6 <RCCEx_PLLSAI2_Config+0x86>
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d825      	bhi.n	80037f4 <RCCEx_PLLSAI2_Config+0xa4>
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d002      	beq.n	80037b2 <RCCEx_PLLSAI2_Config+0x62>
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d009      	beq.n	80037c4 <RCCEx_PLLSAI2_Config+0x74>
 80037b0:	e020      	b.n	80037f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037b2:	4b55      	ldr	r3, [pc, #340]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11d      	bne.n	80037fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c2:	e01a      	b.n	80037fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037c4:	4b50      	ldr	r3, [pc, #320]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d116      	bne.n	80037fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d4:	e013      	b.n	80037fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037d6:	4b4c      	ldr	r3, [pc, #304]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037e2:	4b49      	ldr	r3, [pc, #292]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037f2:	e006      	b.n	8003802 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      break;
 80037f8:	e004      	b.n	8003804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037fa:	bf00      	nop
 80037fc:	e002      	b.n	8003804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003802:	bf00      	nop
    }

    if(status == HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10d      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800380a:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	3b01      	subs	r3, #1
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	430b      	orrs	r3, r1
 8003820:	4939      	ldr	r1, [pc, #228]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003822:	4313      	orrs	r3, r2
 8003824:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d167      	bne.n	80038fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800382c:	4b36      	ldr	r3, [pc, #216]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a35      	ldr	r2, [pc, #212]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003838:	f7fd fda2 	bl	8001380 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800383e:	e009      	b.n	8003854 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003840:	f7fd fd9e 	bl	8001380 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	73fb      	strb	r3, [r7, #15]
        break;
 8003852:	e005      	b.n	8003860 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003854:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ef      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d14a      	bne.n	80038fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d111      	bne.n	8003890 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800386c:	4b26      	ldr	r3, [pc, #152]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6892      	ldr	r2, [r2, #8]
 800387c:	0211      	lsls	r1, r2, #8
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	0912      	lsrs	r2, r2, #4
 8003884:	0452      	lsls	r2, r2, #17
 8003886:	430a      	orrs	r2, r1
 8003888:	491f      	ldr	r1, [pc, #124]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388a:	4313      	orrs	r3, r2
 800388c:	614b      	str	r3, [r1, #20]
 800388e:	e011      	b.n	80038b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6892      	ldr	r2, [r2, #8]
 80038a0:	0211      	lsls	r1, r2, #8
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6912      	ldr	r2, [r2, #16]
 80038a6:	0852      	lsrs	r2, r2, #1
 80038a8:	3a01      	subs	r2, #1
 80038aa:	0652      	lsls	r2, r2, #25
 80038ac:	430a      	orrs	r2, r1
 80038ae:	4916      	ldr	r1, [pc, #88]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a13      	ldr	r2, [pc, #76]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c0:	f7fd fd5e 	bl	8001380 <HAL_GetTick>
 80038c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038c6:	e009      	b.n	80038dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038c8:	f7fd fd5a 	bl	8001380 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d902      	bls.n	80038dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	73fb      	strb	r3, [r7, #15]
          break;
 80038da:	e005      	b.n	80038e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ef      	beq.n	80038c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	4904      	ldr	r1, [pc, #16]	; (8003908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000

0800390c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e095      	b.n	8003a4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d108      	bne.n	8003938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392e:	d009      	beq.n	8003944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	61da      	str	r2, [r3, #28]
 8003936:	e005      	b.n	8003944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fa92 	bl	8000e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003984:	d902      	bls.n	800398c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	e002      	b.n	8003992 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800398c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003990:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800399a:	d007      	beq.n	80039ac <HAL_SPI_Init+0xa0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	ea42 0103 	orr.w	r1, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	f003 0204 	and.w	r2, r3, #4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a28:	ea42 0103 	orr.w	r1, r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e040      	b.n	8003ae6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fd fa4b 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2224      	movs	r2, #36	; 0x24
 8003a7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f82d 	bl	8003af0 <UART_SetConfig>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e022      	b.n	8003ae6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fad9 	bl	8004060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003abc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003acc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fb60 	bl	80041a4 <UART_CheckIdleState>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af4:	b08a      	sub	sp, #40	; 0x28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4ba4      	ldr	r3, [pc, #656]	; (8003db0 <UART_SetConfig+0x2c0>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a99      	ldr	r2, [pc, #612]	; (8003db4 <UART_SetConfig+0x2c4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a90      	ldr	r2, [pc, #576]	; (8003db8 <UART_SetConfig+0x2c8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d126      	bne.n	8003bc8 <UART_SetConfig+0xd8>
 8003b7a:	4b90      	ldr	r3, [pc, #576]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d81b      	bhi.n	8003bc0 <UART_SetConfig+0xd0>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0xa0>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003ba1 	.word	0x08003ba1
 8003b94:	08003bb1 	.word	0x08003bb1
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003bb9 	.word	0x08003bb9
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba6:	e116      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bae:	e112      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e10e      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e10a      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e106      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7c      	ldr	r2, [pc, #496]	; (8003dc0 <UART_SetConfig+0x2d0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d138      	bne.n	8003c44 <UART_SetConfig+0x154>
 8003bd2:	4b7a      	ldr	r3, [pc, #488]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d82d      	bhi.n	8003c3c <UART_SetConfig+0x14c>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <UART_SetConfig+0xf8>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c1d 	.word	0x08003c1d
 8003bec:	08003c3d 	.word	0x08003c3d
 8003bf0:	08003c3d 	.word	0x08003c3d
 8003bf4:	08003c3d 	.word	0x08003c3d
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c3d 	.word	0x08003c3d
 8003c00:	08003c3d 	.word	0x08003c3d
 8003c04:	08003c3d 	.word	0x08003c3d
 8003c08:	08003c25 	.word	0x08003c25
 8003c0c:	08003c3d 	.word	0x08003c3d
 8003c10:	08003c3d 	.word	0x08003c3d
 8003c14:	08003c3d 	.word	0x08003c3d
 8003c18:	08003c35 	.word	0x08003c35
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c22:	e0d8      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c24:	2302      	movs	r3, #2
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2a:	e0d4      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e0d0      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c34:	2308      	movs	r3, #8
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e0cc      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e0c8      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a5e      	ldr	r2, [pc, #376]	; (8003dc4 <UART_SetConfig+0x2d4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d125      	bne.n	8003c9a <UART_SetConfig+0x1aa>
 8003c4e:	4b5b      	ldr	r3, [pc, #364]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c58:	2b30      	cmp	r3, #48	; 0x30
 8003c5a:	d016      	beq.n	8003c8a <UART_SetConfig+0x19a>
 8003c5c:	2b30      	cmp	r3, #48	; 0x30
 8003c5e:	d818      	bhi.n	8003c92 <UART_SetConfig+0x1a2>
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d00a      	beq.n	8003c7a <UART_SetConfig+0x18a>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d814      	bhi.n	8003c92 <UART_SetConfig+0x1a2>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <UART_SetConfig+0x182>
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d008      	beq.n	8003c82 <UART_SetConfig+0x192>
 8003c70:	e00f      	b.n	8003c92 <UART_SetConfig+0x1a2>
 8003c72:	2300      	movs	r3, #0
 8003c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c78:	e0ad      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c80:	e0a9      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c82:	2304      	movs	r3, #4
 8003c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c88:	e0a5      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c90:	e0a1      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c92:	2310      	movs	r3, #16
 8003c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c98:	e09d      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a4a      	ldr	r2, [pc, #296]	; (8003dc8 <UART_SetConfig+0x2d8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d125      	bne.n	8003cf0 <UART_SetConfig+0x200>
 8003ca4:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cae:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb0:	d016      	beq.n	8003ce0 <UART_SetConfig+0x1f0>
 8003cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb4:	d818      	bhi.n	8003ce8 <UART_SetConfig+0x1f8>
 8003cb6:	2b80      	cmp	r3, #128	; 0x80
 8003cb8:	d00a      	beq.n	8003cd0 <UART_SetConfig+0x1e0>
 8003cba:	2b80      	cmp	r3, #128	; 0x80
 8003cbc:	d814      	bhi.n	8003ce8 <UART_SetConfig+0x1f8>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <UART_SetConfig+0x1d8>
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d008      	beq.n	8003cd8 <UART_SetConfig+0x1e8>
 8003cc6:	e00f      	b.n	8003ce8 <UART_SetConfig+0x1f8>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cce:	e082      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e07e      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e07a      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e076      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e072      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a35      	ldr	r2, [pc, #212]	; (8003dcc <UART_SetConfig+0x2dc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d12a      	bne.n	8003d50 <UART_SetConfig+0x260>
 8003cfa:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d08:	d01a      	beq.n	8003d40 <UART_SetConfig+0x250>
 8003d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d0e:	d81b      	bhi.n	8003d48 <UART_SetConfig+0x258>
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d14:	d00c      	beq.n	8003d30 <UART_SetConfig+0x240>
 8003d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1a:	d815      	bhi.n	8003d48 <UART_SetConfig+0x258>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <UART_SetConfig+0x238>
 8003d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d24:	d008      	beq.n	8003d38 <UART_SetConfig+0x248>
 8003d26:	e00f      	b.n	8003d48 <UART_SetConfig+0x258>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2e:	e052      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d30:	2302      	movs	r3, #2
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d36:	e04e      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3e:	e04a      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d40:	2308      	movs	r3, #8
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d46:	e046      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4e:	e042      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <UART_SetConfig+0x2c4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d13a      	bne.n	8003dd0 <UART_SetConfig+0x2e0>
 8003d5a:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d68:	d01a      	beq.n	8003da0 <UART_SetConfig+0x2b0>
 8003d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d6e:	d81b      	bhi.n	8003da8 <UART_SetConfig+0x2b8>
 8003d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d74:	d00c      	beq.n	8003d90 <UART_SetConfig+0x2a0>
 8003d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7a:	d815      	bhi.n	8003da8 <UART_SetConfig+0x2b8>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <UART_SetConfig+0x298>
 8003d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d84:	d008      	beq.n	8003d98 <UART_SetConfig+0x2a8>
 8003d86:	e00f      	b.n	8003da8 <UART_SetConfig+0x2b8>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8e:	e022      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d90:	2302      	movs	r3, #2
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d96:	e01e      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9e:	e01a      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003da0:	2308      	movs	r3, #8
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da6:	e016      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003da8:	2310      	movs	r3, #16
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dae:	e012      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003db0:	efff69f3 	.word	0xefff69f3
 8003db4:	40008000 	.word	0x40008000
 8003db8:	40013800 	.word	0x40013800
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40004400 	.word	0x40004400
 8003dc4:	40004800 	.word	0x40004800
 8003dc8:	40004c00 	.word	0x40004c00
 8003dcc:	40005000 	.word	0x40005000
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a9f      	ldr	r2, [pc, #636]	; (8004058 <UART_SetConfig+0x568>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d17a      	bne.n	8003ed6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d824      	bhi.n	8003e32 <UART_SetConfig+0x342>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x300>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e33 	.word	0x08003e33
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e33 	.word	0x08003e33
 8003e00:	08003e23 	.word	0x08003e23
 8003e04:	08003e33 	.word	0x08003e33
 8003e08:	08003e33 	.word	0x08003e33
 8003e0c:	08003e33 	.word	0x08003e33
 8003e10:	08003e2b 	.word	0x08003e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7ff f822 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8003e18:	61f8      	str	r0, [r7, #28]
        break;
 8003e1a:	e010      	b.n	8003e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e1c:	4b8f      	ldr	r3, [pc, #572]	; (800405c <UART_SetConfig+0x56c>)
 8003e1e:	61fb      	str	r3, [r7, #28]
        break;
 8003e20:	e00d      	b.n	8003e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e22:	f7fe ff83 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8003e26:	61f8      	str	r0, [r7, #28]
        break;
 8003e28:	e009      	b.n	8003e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	61fb      	str	r3, [r7, #28]
        break;
 8003e30:	e005      	b.n	8003e3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80fb 	beq.w	800403c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d305      	bcc.n	8003e62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d903      	bls.n	8003e6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e68:	e0e8      	b.n	800403c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	461c      	mov	r4, r3
 8003e70:	4615      	mov	r5, r2
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	022b      	lsls	r3, r5, #8
 8003e7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e80:	0222      	lsls	r2, r4, #8
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	6849      	ldr	r1, [r1, #4]
 8003e86:	0849      	lsrs	r1, r1, #1
 8003e88:	2000      	movs	r0, #0
 8003e8a:	4688      	mov	r8, r1
 8003e8c:	4681      	mov	r9, r0
 8003e8e:	eb12 0a08 	adds.w	sl, r2, r8
 8003e92:	eb43 0b09 	adc.w	fp, r3, r9
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea4:	4650      	mov	r0, sl
 8003ea6:	4659      	mov	r1, fp
 8003ea8:	f7fc f98e 	bl	80001c8 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eba:	d308      	bcc.n	8003ece <UART_SetConfig+0x3de>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec2:	d204      	bcs.n	8003ece <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	e0b6      	b.n	800403c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ed4:	e0b2      	b.n	800403c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ede:	d15e      	bne.n	8003f9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d828      	bhi.n	8003f3a <UART_SetConfig+0x44a>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x400>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f1d 	.word	0x08003f1d
 8003ef8:	08003f25 	.word	0x08003f25
 8003efc:	08003f3b 	.word	0x08003f3b
 8003f00:	08003f2b 	.word	0x08003f2b
 8003f04:	08003f3b 	.word	0x08003f3b
 8003f08:	08003f3b 	.word	0x08003f3b
 8003f0c:	08003f3b 	.word	0x08003f3b
 8003f10:	08003f33 	.word	0x08003f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7fe ffa2 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8003f18:	61f8      	str	r0, [r7, #28]
        break;
 8003f1a:	e014      	b.n	8003f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f1c:	f7fe ffb4 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 8003f20:	61f8      	str	r0, [r7, #28]
        break;
 8003f22:	e010      	b.n	8003f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f24:	4b4d      	ldr	r3, [pc, #308]	; (800405c <UART_SetConfig+0x56c>)
 8003f26:	61fb      	str	r3, [r7, #28]
        break;
 8003f28:	e00d      	b.n	8003f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2a:	f7fe feff 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8003f2e:	61f8      	str	r0, [r7, #28]
        break;
 8003f30:	e009      	b.n	8003f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f36:	61fb      	str	r3, [r7, #28]
        break;
 8003f38:	e005      	b.n	8003f46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d077      	beq.n	800403c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	005a      	lsls	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	441a      	add	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b0f      	cmp	r3, #15
 8003f66:	d916      	bls.n	8003f96 <UART_SetConfig+0x4a6>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6e:	d212      	bcs.n	8003f96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f023 030f 	bic.w	r3, r3, #15
 8003f78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	8afb      	ldrh	r3, [r7, #22]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	8afa      	ldrh	r2, [r7, #22]
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	e052      	b.n	800403c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f9c:	e04e      	b.n	800403c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d827      	bhi.n	8003ff6 <UART_SetConfig+0x506>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x4bc>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	08003ff7 	.word	0x08003ff7
 8003fbc:	08003fe7 	.word	0x08003fe7
 8003fc0:	08003ff7 	.word	0x08003ff7
 8003fc4:	08003ff7 	.word	0x08003ff7
 8003fc8:	08003ff7 	.word	0x08003ff7
 8003fcc:	08003fef 	.word	0x08003fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd0:	f7fe ff44 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8003fd4:	61f8      	str	r0, [r7, #28]
        break;
 8003fd6:	e014      	b.n	8004002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd8:	f7fe ff56 	bl	8002e88 <HAL_RCC_GetPCLK2Freq>
 8003fdc:	61f8      	str	r0, [r7, #28]
        break;
 8003fde:	e010      	b.n	8004002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	; (800405c <UART_SetConfig+0x56c>)
 8003fe2:	61fb      	str	r3, [r7, #28]
        break;
 8003fe4:	e00d      	b.n	8004002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe6:	f7fe fea1 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8003fea:	61f8      	str	r0, [r7, #28]
        break;
 8003fec:	e009      	b.n	8004002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff2:	61fb      	str	r3, [r7, #28]
        break;
 8003ff4:	e005      	b.n	8004002 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004000:	bf00      	nop
    }

    if (pclk != 0U)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d019      	beq.n	800403c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	085a      	lsrs	r2, r3, #1
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	441a      	add	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b0f      	cmp	r3, #15
 8004020:	d909      	bls.n	8004036 <UART_SetConfig+0x546>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004028:	d205      	bcs.n	8004036 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60da      	str	r2, [r3, #12]
 8004034:	e002      	b.n	800403c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004048:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800404c:	4618      	mov	r0, r3
 800404e:	3728      	adds	r7, #40	; 0x28
 8004050:	46bd      	mov	sp, r7
 8004052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004056:	bf00      	nop
 8004058:	40008000 	.word	0x40008000
 800405c:	00f42400 	.word	0x00f42400

08004060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01a      	beq.n	8004176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415e:	d10a      	bne.n	8004176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  }
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041b4:	f7fd f8e4 	bl	8001380 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d10e      	bne.n	80041e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f82d 	bl	8004236 <UART_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e023      	b.n	800422e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d10e      	bne.n	8004212 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f817 	bl	8004236 <UART_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e00d      	b.n	800422e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b09c      	sub	sp, #112	; 0x70
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	603b      	str	r3, [r7, #0]
 8004242:	4613      	mov	r3, r2
 8004244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004246:	e0a5      	b.n	8004394 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	f000 80a1 	beq.w	8004394 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004252:	f7fd f895 	bl	8001380 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <UART_WaitOnFlagUntilTimeout+0x32>
 8004262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004264:	2b00      	cmp	r3, #0
 8004266:	d13e      	bne.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800427c:	667b      	str	r3, [r7, #100]	; 0x64
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004288:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800428c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e6      	bne.n	8004268 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3308      	adds	r3, #8
 80042a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	663b      	str	r3, [r7, #96]	; 0x60
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3308      	adds	r3, #8
 80042b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e5      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e067      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d04f      	beq.n	8004394 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004302:	d147      	bne.n	8004394 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800430c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
 800432e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e6      	bne.n	800430e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3308      	adds	r3, #8
 8004346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	613b      	str	r3, [r7, #16]
   return(result);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	66bb      	str	r3, [r7, #104]	; 0x68
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3308      	adds	r3, #8
 800435e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004360:	623a      	str	r2, [r7, #32]
 8004362:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	69f9      	ldr	r1, [r7, #28]
 8004366:	6a3a      	ldr	r2, [r7, #32]
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	61bb      	str	r3, [r7, #24]
   return(result);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e5      	bne.n	8004340 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e010      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69da      	ldr	r2, [r3, #28]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	f43f af4a 	beq.w	8004248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3770      	adds	r7, #112	; 0x70
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043be:	b084      	sub	sp, #16
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	f107 001c 	add.w	r0, r7, #28
 80043cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fa6f 	bl	80048c0 <USB_CoreReset>
 80043e2:	4603      	mov	r3, r0
 80043e4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80043e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38
 80043f8:	e005      	b.n	8004406 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004412:	b004      	add	sp, #16
 8004414:	4770      	bx	lr

08004416 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f023 0201 	bic.w	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d115      	bne.n	8004486 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004466:	2001      	movs	r0, #1
 8004468:	f7fc ff96 	bl	8001398 <HAL_Delay>
      ms++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3301      	adds	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fa16 	bl	80048a4 <USB_GetMode>
 8004478:	4603      	mov	r3, r0
 800447a:	2b01      	cmp	r3, #1
 800447c:	d01e      	beq.n	80044bc <USB_SetCurrentMode+0x84>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b31      	cmp	r3, #49	; 0x31
 8004482:	d9f0      	bls.n	8004466 <USB_SetCurrentMode+0x2e>
 8004484:	e01a      	b.n	80044bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d115      	bne.n	80044b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004498:	2001      	movs	r0, #1
 800449a:	f7fc ff7d 	bl	8001398 <HAL_Delay>
      ms++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f9fd 	bl	80048a4 <USB_GetMode>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <USB_SetCurrentMode+0x84>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b31      	cmp	r3, #49	; 0x31
 80044b4:	d9f0      	bls.n	8004498 <USB_SetCurrentMode+0x60>
 80044b6:	e001      	b.n	80044bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e005      	b.n	80044c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b32      	cmp	r3, #50	; 0x32
 80044c0:	d101      	bne.n	80044c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d0:	b084      	sub	sp, #16
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	e009      	b.n	8004504 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	3340      	adds	r3, #64	; 0x40
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	2200      	movs	r2, #0
 80044fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3301      	adds	r3, #1
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b0e      	cmp	r3, #14
 8004508:	d9f2      	bls.n	80044f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800450a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11c      	bne.n	800454a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e005      	b.n	8004556 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800455c:	461a      	mov	r2, r3
 800455e:	2300      	movs	r3, #0
 8004560:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004568:	4619      	mov	r1, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004570:	461a      	mov	r2, r3
 8004572:	680b      	ldr	r3, [r1, #0]
 8004574:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004576:	2103      	movs	r1, #3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f959 	bl	8004830 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800457e:	2110      	movs	r1, #16
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f8f1 	bl	8004768 <USB_FlushTxFifo>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f91d 	bl	80047d0 <USB_FlushRxFifo>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a6:	461a      	mov	r2, r3
 80045a8:	2300      	movs	r3, #0
 80045aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b2:	461a      	mov	r2, r3
 80045b4:	2300      	movs	r3, #0
 80045b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045be:	461a      	mov	r2, r3
 80045c0:	2300      	movs	r3, #0
 80045c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	e043      	b.n	8004652 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e0:	d118      	bne.n	8004614 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f4:	461a      	mov	r2, r3
 80045f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	e013      	b.n	8004626 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460a:	461a      	mov	r2, r3
 800460c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	e008      	b.n	8004626 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004620:	461a      	mov	r2, r3
 8004622:	2300      	movs	r3, #0
 8004624:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004632:	461a      	mov	r2, r3
 8004634:	2300      	movs	r3, #0
 8004636:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	461a      	mov	r2, r3
 8004646:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800464a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	3301      	adds	r3, #1
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	429a      	cmp	r2, r3
 8004658:	d3b7      	bcc.n	80045ca <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	e043      	b.n	80046e8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004676:	d118      	bne.n	80046aa <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10a      	bne.n	8004694 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	461a      	mov	r2, r3
 800468c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e013      	b.n	80046bc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	461a      	mov	r2, r3
 80046a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e008      	b.n	80046bc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b6:	461a      	mov	r2, r3
 80046b8:	2300      	movs	r3, #0
 80046ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	461a      	mov	r2, r3
 80046ca:	2300      	movs	r3, #0
 80046cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	461a      	mov	r2, r3
 80046dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	3301      	adds	r3, #1
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d3b7      	bcc.n	8004660 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004702:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004710:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f043 0210 	orr.w	r2, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <USB_DevInit+0x294>)
 8004724:	4313      	orrs	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f043 0208 	orr.w	r2, r3, #8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800473c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d107      	bne.n	8004752 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004752:	7dfb      	ldrb	r3, [r7, #23]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800475e:	b004      	add	sp, #16
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	803c3800 	.word	0x803c3800

08004768 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <USB_FlushTxFifo+0x64>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e01b      	b.n	80047c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	daf2      	bge.n	8004776 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	019b      	lsls	r3, r3, #6
 8004798:	f043 0220 	orr.w	r2, r3, #32
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3301      	adds	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a08      	ldr	r2, [pc, #32]	; (80047cc <USB_FlushTxFifo+0x64>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e006      	b.n	80047c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d0f0      	beq.n	80047a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	00030d40 	.word	0x00030d40

080047d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3301      	adds	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <USB_FlushRxFifo+0x5c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e018      	b.n	8004820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	daf2      	bge.n	80047dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2210      	movs	r2, #16
 80047fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3301      	adds	r3, #1
 8004804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <USB_FlushRxFifo+0x5c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e006      	b.n	8004820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b10      	cmp	r3, #16
 800481c:	d0f0      	beq.n	8004800 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	00030d40 	.word	0x00030d40

08004830 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800487c:	f023 0303 	bic.w	r3, r3, #3
 8004880:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004890:	f043 0302 	orr.w	r3, r3, #2
 8004894:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0301 	and.w	r3, r3, #1
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4a13      	ldr	r2, [pc, #76]	; (8004924 <USB_CoreReset+0x64>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e01b      	b.n	8004916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	daf2      	bge.n	80048cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <USB_CoreReset+0x64>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d901      	bls.n	8004908 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e006      	b.n	8004916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d0f0      	beq.n	80048f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	00030d40 	.word	0x00030d40

08004928 <__libc_init_array>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	4d0d      	ldr	r5, [pc, #52]	; (8004960 <__libc_init_array+0x38>)
 800492c:	4c0d      	ldr	r4, [pc, #52]	; (8004964 <__libc_init_array+0x3c>)
 800492e:	1b64      	subs	r4, r4, r5
 8004930:	10a4      	asrs	r4, r4, #2
 8004932:	2600      	movs	r6, #0
 8004934:	42a6      	cmp	r6, r4
 8004936:	d109      	bne.n	800494c <__libc_init_array+0x24>
 8004938:	4d0b      	ldr	r5, [pc, #44]	; (8004968 <__libc_init_array+0x40>)
 800493a:	4c0c      	ldr	r4, [pc, #48]	; (800496c <__libc_init_array+0x44>)
 800493c:	f000 f820 	bl	8004980 <_init>
 8004940:	1b64      	subs	r4, r4, r5
 8004942:	10a4      	asrs	r4, r4, #2
 8004944:	2600      	movs	r6, #0
 8004946:	42a6      	cmp	r6, r4
 8004948:	d105      	bne.n	8004956 <__libc_init_array+0x2e>
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004950:	4798      	blx	r3
 8004952:	3601      	adds	r6, #1
 8004954:	e7ee      	b.n	8004934 <__libc_init_array+0xc>
 8004956:	f855 3b04 	ldr.w	r3, [r5], #4
 800495a:	4798      	blx	r3
 800495c:	3601      	adds	r6, #1
 800495e:	e7f2      	b.n	8004946 <__libc_init_array+0x1e>
 8004960:	080049e8 	.word	0x080049e8
 8004964:	080049e8 	.word	0x080049e8
 8004968:	080049e8 	.word	0x080049e8
 800496c:	080049ec 	.word	0x080049ec

08004970 <memset>:
 8004970:	4402      	add	r2, r0
 8004972:	4603      	mov	r3, r0
 8004974:	4293      	cmp	r3, r2
 8004976:	d100      	bne.n	800497a <memset+0xa>
 8004978:	4770      	bx	lr
 800497a:	f803 1b01 	strb.w	r1, [r3], #1
 800497e:	e7f9      	b.n	8004974 <memset+0x4>

08004980 <_init>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr

0800498c <_fini>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	bf00      	nop
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr
